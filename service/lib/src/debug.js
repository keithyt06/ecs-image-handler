"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const sharp = require("sharp");
function debug(lruCache) {
    const ret = {
        os: {
            arch: os.arch(),
            cpus: os.cpus().length,
            loadavg: os.loadavg(),
        },
        memory: {
            stats: `free: ${formatBytes(os.freemem())}, total: ${formatBytes(os.totalmem())}, usage ${((os.totalmem() - os.freemem()) / os.totalmem() * 100).toFixed(2)} %`,
            free: os.freemem(),
            total: os.totalmem(),
            usage: process.memoryUsage(),
        },
        resource: {
            usage: process.resourceUsage(),
        },
        sharp: {
            cache: sharp.cache(),
            simd: sharp.simd(),
            counters: sharp.counters(),
            concurrency: sharp.concurrency(),
            versions: sharp.versions,
        },
    };
    if (lruCache) {
        ret.lruCache = {
            keys: lruCache.size,
            sizeMB: Math.round(b2mb(lruCache.calculatedSize) * 100) / 100,
            ttlSec: Math.round(lruCache.ttl / 1000),
        };
    }
    return ret;
}
exports.default = debug;
function b2mb(v) {
    return v / 1048576;
}
function formatBytes(bytes) {
    const units = ['B', 'KB', 'MB', 'GB', 'TB'];
    let i = 0;
    for (; bytes >= 1024 && i < units.length - 1; i++) {
        bytes /= 1024;
    }
    return `${bytes.toFixed(2)} ${units[i]}`;
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVidWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBeUI7QUFFekIsK0JBQStCO0FBbUUvQixTQUF3QixLQUFLLENBQUMsUUFBd0M7SUFDcEUsTUFBTSxHQUFHLEdBQWU7UUFDdEIsRUFBRSxFQUFFO1lBQ0YsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUU7WUFDZixJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU07WUFDdEIsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUU7U0FDdEI7UUFDRCxNQUFNLEVBQUU7WUFDTixLQUFLLEVBQUUsU0FBUyxXQUFXLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLFlBQVksV0FBVyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSTtZQUMvSixJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRTtZQUNsQixLQUFLLEVBQUUsRUFBRSxDQUFDLFFBQVEsRUFBRTtZQUNwQixLQUFLLEVBQUUsT0FBTyxDQUFDLFdBQVcsRUFBRTtTQUM3QjtRQUNELFFBQVEsRUFBRTtZQUNSLEtBQUssRUFBRSxPQUFPLENBQUMsYUFBYSxFQUFFO1NBQy9CO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDcEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDbEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDMUIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUU7WUFDaEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1NBQ3pCO0tBQ0YsQ0FBQztJQUNGLElBQUksUUFBUSxFQUFFO1FBQ1osR0FBRyxDQUFDLFFBQVEsR0FBRztZQUNiLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSTtZQUNuQixNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUc7WUFDN0QsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7U0FDeEMsQ0FBQztLQUNIO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBaENELHdCQWdDQztBQUVELFNBQVMsSUFBSSxDQUFDLENBQVM7SUFDckIsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ3JCLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxLQUFhO0lBQ2hDLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLE9BQU8sS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakQsS0FBSyxJQUFJLElBQUksQ0FBQztLQUNmO0lBQ0QsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDM0MsQ0FBQztBQUFBLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7XG5pbXBvcnQgeyBMUlVDYWNoZSB9IGZyb20gJ2xydS1jYWNoZSc7XG5pbXBvcnQgKiBhcyBzaGFycCBmcm9tICdzaGFycCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNoYXJwSW5mbyB7XG4gIGNhY2hlOiBzaGFycC5DYWNoZVJlc3VsdDtcbiAgc2ltZDogYm9vbGVhbjtcbiAgY291bnRlcnM6IHNoYXJwLlNoYXJwQ291bnRlcnM7XG4gIGNvbmN1cnJlbmN5OiBudW1iZXI7XG4gIHZlcnNpb25zOiB7XG4gICAgdmlwczogc3RyaW5nO1xuICAgIGNhaXJvPzogc3RyaW5nO1xuICAgIGNyb2NvPzogc3RyaW5nO1xuICAgIGV4aWY/OiBzdHJpbmc7XG4gICAgZXhwYXQ/OiBzdHJpbmc7XG4gICAgZmZpPzogc3RyaW5nO1xuICAgIGZvbnRjb25maWc/OiBzdHJpbmc7XG4gICAgZnJlZXR5cGU/OiBzdHJpbmc7XG4gICAgZ2RrcGl4YnVmPzogc3RyaW5nO1xuICAgIGdpZj86IHN0cmluZztcbiAgICBnbGliPzogc3RyaW5nO1xuICAgIGdzZj86IHN0cmluZztcbiAgICBoYXJmYnV6ej86IHN0cmluZztcbiAgICBqcGVnPzogc3RyaW5nO1xuICAgIGxjbXM/OiBzdHJpbmc7XG4gICAgb3JjPzogc3RyaW5nO1xuICAgIHBhbmdvPzogc3RyaW5nO1xuICAgIHBpeG1hbj86IHN0cmluZztcbiAgICBwbmc/OiBzdHJpbmc7XG4gICAgc3ZnPzogc3RyaW5nO1xuICAgIHRpZmY/OiBzdHJpbmc7XG4gICAgd2VicD86IHN0cmluZztcbiAgICBhdmlmPzogc3RyaW5nO1xuICAgIGhlaWY/OiBzdHJpbmc7XG4gICAgeG1sPzogc3RyaW5nO1xuICAgIHpsaWI/OiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURlYnVnSW5mbyB7XG4gIG9zOiB7XG4gICAgYXJjaDogc3RyaW5nO1xuICAgIGNwdXM6IG51bWJlcjtcbiAgICBsb2FkYXZnOiBudW1iZXJbXTtcbiAgfTtcbiAgbWVtb3J5OiB7XG4gICAgc3RhdHM6IHN0cmluZztcbiAgICBmcmVlOiBudW1iZXI7XG4gICAgdG90YWw6IG51bWJlcjtcbiAgICB1c2FnZTogTm9kZUpTLk1lbW9yeVVzYWdlO1xuICB9O1xuICByZXNvdXJjZToge1xuICAgIHVzYWdlOiBOb2RlSlMuUmVzb3VyY2VVc2FnZTtcbiAgfTtcbiAgbHJ1Q2FjaGU/OiB7XG4gICAga2V5czogbnVtYmVyO1xuICAgIHNpemVNQjogbnVtYmVyO1xuICAgIHR0bFNlYzogbnVtYmVyO1xuICB9O1xuICBzaGFycDogSVNoYXJwSW5mbztcbn1cblxuLy8g5a6a5LmJ57yT5a2Y5a+56LGh5o6l5Y+jXG5pbnRlcmZhY2UgQ2FjaGVPYmplY3Qge1xuICBib2R5OiBhbnk7XG4gIHR5cGU6IHN0cmluZztcbiAgaGVhZGVyczogYW55O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJ1ZyhscnVDYWNoZT86IExSVUNhY2hlPHN0cmluZywgQ2FjaGVPYmplY3Q+KTogSURlYnVnSW5mbyB7XG4gIGNvbnN0IHJldDogSURlYnVnSW5mbyA9IHtcbiAgICBvczoge1xuICAgICAgYXJjaDogb3MuYXJjaCgpLFxuICAgICAgY3B1czogb3MuY3B1cygpLmxlbmd0aCxcbiAgICAgIGxvYWRhdmc6IG9zLmxvYWRhdmcoKSxcbiAgICB9LFxuICAgIG1lbW9yeToge1xuICAgICAgc3RhdHM6IGBmcmVlOiAke2Zvcm1hdEJ5dGVzKG9zLmZyZWVtZW0oKSl9LCB0b3RhbDogJHtmb3JtYXRCeXRlcyhvcy50b3RhbG1lbSgpKX0sIHVzYWdlICR7KChvcy50b3RhbG1lbSgpIC0gb3MuZnJlZW1lbSgpKSAvIG9zLnRvdGFsbWVtKCkgKiAxMDApLnRvRml4ZWQoMil9ICVgLFxuICAgICAgZnJlZTogb3MuZnJlZW1lbSgpLFxuICAgICAgdG90YWw6IG9zLnRvdGFsbWVtKCksXG4gICAgICB1c2FnZTogcHJvY2Vzcy5tZW1vcnlVc2FnZSgpLFxuICAgIH0sXG4gICAgcmVzb3VyY2U6IHtcbiAgICAgIHVzYWdlOiBwcm9jZXNzLnJlc291cmNlVXNhZ2UoKSxcbiAgICB9LFxuICAgIHNoYXJwOiB7XG4gICAgICBjYWNoZTogc2hhcnAuY2FjaGUoKSxcbiAgICAgIHNpbWQ6IHNoYXJwLnNpbWQoKSxcbiAgICAgIGNvdW50ZXJzOiBzaGFycC5jb3VudGVycygpLFxuICAgICAgY29uY3VycmVuY3k6IHNoYXJwLmNvbmN1cnJlbmN5KCksXG4gICAgICB2ZXJzaW9uczogc2hhcnAudmVyc2lvbnMsXG4gICAgfSxcbiAgfTtcbiAgaWYgKGxydUNhY2hlKSB7XG4gICAgcmV0LmxydUNhY2hlID0ge1xuICAgICAga2V5czogbHJ1Q2FjaGUuc2l6ZSxcbiAgICAgIHNpemVNQjogTWF0aC5yb3VuZChiMm1iKGxydUNhY2hlLmNhbGN1bGF0ZWRTaXplKSAqIDEwMCkgLyAxMDAsXG4gICAgICB0dGxTZWM6IE1hdGgucm91bmQobHJ1Q2FjaGUudHRsIC8gMTAwMCksXG4gICAgfTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBiMm1iKHY6IG51bWJlcikge1xuICByZXR1cm4gdiAvIDEwNDg1NzY7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEJ5dGVzKGJ5dGVzOiBudW1iZXIpIHtcbiAgY29uc3QgdW5pdHMgPSBbJ0InLCAnS0InLCAnTUInLCAnR0InLCAnVEInXTtcbiAgbGV0IGkgPSAwO1xuICBmb3IgKDsgYnl0ZXMgPj0gMTAyNCAmJiBpIDwgdW5pdHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgYnl0ZXMgLz0gMTAyNDtcbiAgfVxuICByZXR1cm4gYCR7Ynl0ZXMudG9GaXhlZCgyKX0gJHt1bml0c1tpXX1gO1xufTtcbiJdfQ==