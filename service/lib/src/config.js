"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const { REGION, AWS_REGION, NODE_ENV, BUCKET, SRC_BUCKET, SRC_BUCKETS, STYLE_TABLE_NAME, AUTO_WEBP, AUTO_AVIF, SECRET_NAME, SHARP_QUEUE_LIMIT, CONFIG_JSON_PARAMETER_NAME, CACHE_TTL_SEC, CACHE_MAX_ITEMS, CACHE_MAX_SIZE_MB, ALLOW_DIRECT_ACCESS, } = process.env;
function parseInt(s) {
    return Number.parseInt(s, 10);
}
// Parse comma-separated bucket list
function parseBuckets(bucketStr) {
    if (!bucketStr)
        return [];
    return bucketStr.split(',').map(b => b.trim()).filter(b => b.length > 0);
}
// Get default bucket and bucket list
const defaultBucket = BUCKET || SRC_BUCKET || 'sih-input';
const bucketList = parseBuckets(SRC_BUCKETS);
// If no buckets specified in SRC_BUCKETS, use the default bucket
const srcBuckets = bucketList.length > 0 ? bucketList : [defaultBucket];
const conf = {
    port: 8080,
    region: (_a = REGION !== null && REGION !== void 0 ? REGION : AWS_REGION) !== null && _a !== void 0 ? _a : 'us-west-2',
    isProd: NODE_ENV === 'production',
    srcBucket: defaultBucket,
    srcBuckets: srcBuckets,
    styleTableName: STYLE_TABLE_NAME || 'style-table-name',
    autoWebp: ['yes', '1', 'true'].includes((AUTO_WEBP !== null && AUTO_WEBP !== void 0 ? AUTO_WEBP : '').toLowerCase()),
    autoAvif: ['yes', '1', 'true'].includes((AUTO_AVIF !== null && AUTO_AVIF !== void 0 ? AUTO_AVIF : '').toLowerCase()),
    secretName: SECRET_NAME !== null && SECRET_NAME !== void 0 ? SECRET_NAME : 'X-Client-Authorization',
    sharpQueueLimit: parseInt(SHARP_QUEUE_LIMIT !== null && SHARP_QUEUE_LIMIT !== void 0 ? SHARP_QUEUE_LIMIT : '1'),
    configJsonParameterName: CONFIG_JSON_PARAMETER_NAME !== null && CONFIG_JSON_PARAMETER_NAME !== void 0 ? CONFIG_JSON_PARAMETER_NAME : '',
    CACHE_TTL_SEC: parseInt(CACHE_TTL_SEC !== null && CACHE_TTL_SEC !== void 0 ? CACHE_TTL_SEC : '300'),
    CACHE_MAX_ITEMS: parseInt(CACHE_MAX_ITEMS !== null && CACHE_MAX_ITEMS !== void 0 ? CACHE_MAX_ITEMS : '10000'),
    CACHE_MAX_SIZE_MB: parseInt(CACHE_MAX_SIZE_MB !== null && CACHE_MAX_SIZE_MB !== void 0 ? CACHE_MAX_SIZE_MB : '1024'),
    allowDirectAccess: ALLOW_DIRECT_ACCESS !== null && ALLOW_DIRECT_ACCESS !== void 0 ? ALLOW_DIRECT_ACCESS : 'false',
    video: {
        maxOutputSizeMB: 100,
        maxProcessingTimeSeconds: 300,
        defaultCRF: 23,
        defaultPreset: 'medium',
        supportedInputFormats: ['mp4', 'mov', 'avi', 'mkv', 'webm', 'flv'],
        supportedOutputFormats: ['mp4', 'webm', 'hls']
    }
};
exports.default = conf;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFNLEVBQ0osTUFBTSxFQUNOLFVBQVUsRUFDVixRQUFRLEVBQ1IsTUFBTSxFQUNOLFVBQVUsRUFDVixXQUFXLEVBQ1gsZ0JBQWdCLEVBQ2hCLFNBQVMsRUFDVCxTQUFTLEVBQ1QsV0FBVyxFQUNYLGlCQUFpQixFQUNqQiwwQkFBMEIsRUFDMUIsYUFBYSxFQUNiLGVBQWUsRUFDZixpQkFBaUIsRUFDakIsbUJBQW1CLEdBQ3BCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQTRCaEIsU0FBUyxRQUFRLENBQUMsQ0FBUztJQUN6QixPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLENBQUM7QUFFRCxvQ0FBb0M7QUFDcEMsU0FBUyxZQUFZLENBQUMsU0FBa0I7SUFDdEMsSUFBSSxDQUFDLFNBQVM7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUMxQixPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMzRSxDQUFDO0FBRUQscUNBQXFDO0FBQ3JDLE1BQU0sYUFBYSxHQUFHLE1BQU0sSUFBSSxVQUFVLElBQUksV0FBVyxDQUFDO0FBQzFELE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUU3QyxpRUFBaUU7QUFDakUsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUV4RSxNQUFNLElBQUksR0FBWTtJQUNwQixJQUFJLEVBQUUsSUFBSTtJQUNWLE1BQU0sRUFBRSxNQUFBLE1BQU0sYUFBTixNQUFNLGNBQU4sTUFBTSxHQUFJLFVBQVUsbUNBQUksV0FBVztJQUMzQyxNQUFNLEVBQUUsUUFBUSxLQUFLLFlBQVk7SUFDakMsU0FBUyxFQUFFLGFBQWE7SUFDeEIsVUFBVSxFQUFFLFVBQVU7SUFDdEIsY0FBYyxFQUFFLGdCQUFnQixJQUFJLGtCQUFrQjtJQUN0RCxRQUFRLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsYUFBVCxTQUFTLGNBQVQsU0FBUyxHQUFJLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3hFLFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxhQUFULFNBQVMsY0FBVCxTQUFTLEdBQUksRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDeEUsVUFBVSxFQUFFLFdBQVcsYUFBWCxXQUFXLGNBQVgsV0FBVyxHQUFJLHdCQUF3QjtJQUNuRCxlQUFlLEVBQUUsUUFBUSxDQUFDLGlCQUFpQixhQUFqQixpQkFBaUIsY0FBakIsaUJBQWlCLEdBQUksR0FBRyxDQUFDO0lBQ25ELHVCQUF1QixFQUFFLDBCQUEwQixhQUExQiwwQkFBMEIsY0FBMUIsMEJBQTBCLEdBQUksRUFBRTtJQUN6RCxhQUFhLEVBQUUsUUFBUSxDQUFDLGFBQWEsYUFBYixhQUFhLGNBQWIsYUFBYSxHQUFJLEtBQUssQ0FBQztJQUMvQyxlQUFlLEVBQUUsUUFBUSxDQUFDLGVBQWUsYUFBZixlQUFlLGNBQWYsZUFBZSxHQUFJLE9BQU8sQ0FBQztJQUNyRCxpQkFBaUIsRUFBRSxRQUFRLENBQUMsaUJBQWlCLGFBQWpCLGlCQUFpQixjQUFqQixpQkFBaUIsR0FBSSxNQUFNLENBQUM7SUFDeEQsaUJBQWlCLEVBQUUsbUJBQW1CLGFBQW5CLG1CQUFtQixjQUFuQixtQkFBbUIsR0FBSSxPQUFPO0lBQ2pELEtBQUssRUFBRTtRQUNMLGVBQWUsRUFBRSxHQUFHO1FBQ3BCLHdCQUF3QixFQUFFLEdBQUc7UUFDN0IsVUFBVSxFQUFFLEVBQUU7UUFDZCxhQUFhLEVBQUUsUUFBUTtRQUN2QixxQkFBcUIsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDO1FBQ2xFLHNCQUFzQixFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUM7S0FDL0M7Q0FDRixDQUFDO0FBRUYsa0JBQWUsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qge1xuICBSRUdJT04sXG4gIEFXU19SRUdJT04sXG4gIE5PREVfRU5WLFxuICBCVUNLRVQsXG4gIFNSQ19CVUNLRVQsXG4gIFNSQ19CVUNLRVRTLFxuICBTVFlMRV9UQUJMRV9OQU1FLFxuICBBVVRPX1dFQlAsXG4gIEFVVE9fQVZJRixcbiAgU0VDUkVUX05BTUUsXG4gIFNIQVJQX1FVRVVFX0xJTUlULFxuICBDT05GSUdfSlNPTl9QQVJBTUVURVJfTkFNRSxcbiAgQ0FDSEVfVFRMX1NFQyxcbiAgQ0FDSEVfTUFYX0lURU1TLFxuICBDQUNIRV9NQVhfU0laRV9NQixcbiAgQUxMT1dfRElSRUNUX0FDQ0VTUyxcbn0gPSBwcm9jZXNzLmVudjtcblxuZXhwb3J0IGludGVyZmFjZSBJQ29uZmlnIHtcbiAgcG9ydDogbnVtYmVyO1xuICByZWdpb246IHN0cmluZztcbiAgaXNQcm9kOiBib29sZWFuO1xuICBzcmNCdWNrZXQ6IHN0cmluZztcbiAgc3JjQnVja2V0czogc3RyaW5nW107XG4gIHN0eWxlVGFibGVOYW1lOiBzdHJpbmc7XG4gIGF1dG9XZWJwOiBib29sZWFuO1xuICBhdXRvQXZpZjogYm9vbGVhbjtcbiAgc2VjcmV0TmFtZTogc3RyaW5nO1xuICBzaGFycFF1ZXVlTGltaXQ6IG51bWJlcjtcbiAgY29uZmlnSnNvblBhcmFtZXRlck5hbWU6IHN0cmluZztcbiAgQ0FDSEVfVFRMX1NFQzogbnVtYmVyO1xuICBDQUNIRV9NQVhfSVRFTVM6IG51bWJlcjtcbiAgQ0FDSEVfTUFYX1NJWkVfTUI6IG51bWJlcjtcbiAgYWxsb3dEaXJlY3RBY2Nlc3M6IHN0cmluZztcbiAgdmlkZW86IHtcbiAgICBtYXhPdXRwdXRTaXplTUI6IG51bWJlcjtcbiAgICBtYXhQcm9jZXNzaW5nVGltZVNlY29uZHM6IG51bWJlcjtcbiAgICBkZWZhdWx0Q1JGOiBudW1iZXI7IFxuICAgIGRlZmF1bHRQcmVzZXQ6IHN0cmluZztcbiAgICBzdXBwb3J0ZWRJbnB1dEZvcm1hdHM6IHN0cmluZ1tdO1xuICAgIHN1cHBvcnRlZE91dHB1dEZvcm1hdHM6IHN0cmluZ1tdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlSW50KHM6IHN0cmluZykge1xuICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHMsIDEwKTtcbn1cblxuLy8gUGFyc2UgY29tbWEtc2VwYXJhdGVkIGJ1Y2tldCBsaXN0XG5mdW5jdGlvbiBwYXJzZUJ1Y2tldHMoYnVja2V0U3RyPzogc3RyaW5nKTogc3RyaW5nW10ge1xuICBpZiAoIWJ1Y2tldFN0cikgcmV0dXJuIFtdO1xuICByZXR1cm4gYnVja2V0U3RyLnNwbGl0KCcsJykubWFwKGIgPT4gYi50cmltKCkpLmZpbHRlcihiID0+IGIubGVuZ3RoID4gMCk7XG59XG5cbi8vIEdldCBkZWZhdWx0IGJ1Y2tldCBhbmQgYnVja2V0IGxpc3RcbmNvbnN0IGRlZmF1bHRCdWNrZXQgPSBCVUNLRVQgfHwgU1JDX0JVQ0tFVCB8fCAnc2loLWlucHV0JztcbmNvbnN0IGJ1Y2tldExpc3QgPSBwYXJzZUJ1Y2tldHMoU1JDX0JVQ0tFVFMpO1xuXG4vLyBJZiBubyBidWNrZXRzIHNwZWNpZmllZCBpbiBTUkNfQlVDS0VUUywgdXNlIHRoZSBkZWZhdWx0IGJ1Y2tldFxuY29uc3Qgc3JjQnVja2V0cyA9IGJ1Y2tldExpc3QubGVuZ3RoID4gMCA/IGJ1Y2tldExpc3QgOiBbZGVmYXVsdEJ1Y2tldF07XG5cbmNvbnN0IGNvbmY6IElDb25maWcgPSB7XG4gIHBvcnQ6IDgwODAsXG4gIHJlZ2lvbjogUkVHSU9OID8/IEFXU19SRUdJT04gPz8gJ3VzLXdlc3QtMicsXG4gIGlzUHJvZDogTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyxcbiAgc3JjQnVja2V0OiBkZWZhdWx0QnVja2V0LFxuICBzcmNCdWNrZXRzOiBzcmNCdWNrZXRzLFxuICBzdHlsZVRhYmxlTmFtZTogU1RZTEVfVEFCTEVfTkFNRSB8fCAnc3R5bGUtdGFibGUtbmFtZScsXG4gIGF1dG9XZWJwOiBbJ3llcycsICcxJywgJ3RydWUnXS5pbmNsdWRlcygoQVVUT19XRUJQID8/ICcnKS50b0xvd2VyQ2FzZSgpKSxcbiAgYXV0b0F2aWY6IFsneWVzJywgJzEnLCAndHJ1ZSddLmluY2x1ZGVzKChBVVRPX0FWSUYgPz8gJycpLnRvTG93ZXJDYXNlKCkpLFxuICBzZWNyZXROYW1lOiBTRUNSRVRfTkFNRSA/PyAnWC1DbGllbnQtQXV0aG9yaXphdGlvbicsXG4gIHNoYXJwUXVldWVMaW1pdDogcGFyc2VJbnQoU0hBUlBfUVVFVUVfTElNSVQgPz8gJzEnKSxcbiAgY29uZmlnSnNvblBhcmFtZXRlck5hbWU6IENPTkZJR19KU09OX1BBUkFNRVRFUl9OQU1FID8/ICcnLFxuICBDQUNIRV9UVExfU0VDOiBwYXJzZUludChDQUNIRV9UVExfU0VDID8/ICczMDAnKSxcbiAgQ0FDSEVfTUFYX0lURU1TOiBwYXJzZUludChDQUNIRV9NQVhfSVRFTVMgPz8gJzEwMDAwJyksXG4gIENBQ0hFX01BWF9TSVpFX01COiBwYXJzZUludChDQUNIRV9NQVhfU0laRV9NQiA/PyAnMTAyNCcpLFxuICBhbGxvd0RpcmVjdEFjY2VzczogQUxMT1dfRElSRUNUX0FDQ0VTUyA/PyAnZmFsc2UnLFxuICB2aWRlbzoge1xuICAgIG1heE91dHB1dFNpemVNQjogMTAwLFxuICAgIG1heFByb2Nlc3NpbmdUaW1lU2Vjb25kczogMzAwLFxuICAgIGRlZmF1bHRDUkY6IDIzLFxuICAgIGRlZmF1bHRQcmVzZXQ6ICdtZWRpdW0nLFxuICAgIHN1cHBvcnRlZElucHV0Rm9ybWF0czogWydtcDQnLCAnbW92JywgJ2F2aScsICdta3YnLCAnd2VibScsICdmbHYnXSxcbiAgICBzdXBwb3J0ZWRPdXRwdXRGb3JtYXRzOiBbJ21wNCcsICd3ZWJtJywgJ2hscyddXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmY7XG4iXX0=