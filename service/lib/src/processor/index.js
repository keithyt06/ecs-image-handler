"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Features = exports.InvalidArgument = void 0;
const HttpErrors = require("http-errors");
/**
 * Invalid argument error (HTTP 400).
 */
class InvalidArgument extends HttpErrors[400] {
}
exports.InvalidArgument = InvalidArgument;
var Features;
(function (Features) {
    Features["AutoWebp"] = "auto-webp";
    Features["AutoAvif"] = "auto-avif";
    Features["AutoOrient"] = "auto-orient";
    Features["ReturnInfo"] = "return-info";
    Features["ReadAllAnimatedFrames"] = "read-all-animated-frames";
    Features[Features["LimitAnimatedFrames"] = 0] = "LimitAnimatedFrames";
})(Features = exports.Features || (exports.Features = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcHJvY2Vzc29yL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBDQUEwQztBQW1LMUM7O0dBRUc7QUFDSCxNQUFhLGVBQWdCLFNBQVEsVUFBVSxDQUFDLEdBQUcsQ0FBQztDQUFJO0FBQXhELDBDQUF3RDtBQUd4RCxJQUFZLFFBT1g7QUFQRCxXQUFZLFFBQVE7SUFDbEIsa0NBQXNCLENBQUE7SUFDdEIsa0NBQXNCLENBQUE7SUFDdEIsc0NBQTBCLENBQUE7SUFDMUIsc0NBQTBCLENBQUE7SUFDMUIsOERBQWtELENBQUE7SUFDbEQscUVBQXVCLENBQUE7QUFDekIsQ0FBQyxFQVBXLFFBQVEsR0FBUixnQkFBUSxLQUFSLGdCQUFRLFFBT25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgSHR0cEVycm9ycyBmcm9tICdodHRwLWVycm9ycyc7XG5pbXBvcnQgeyBJQnVmZmVyU3RvcmUgfSBmcm9tICcuLi9zdG9yZSc7XG5cbi8qKlxuICogQSB1dGlsaXR5IHRvIG1ha2UgYW4gb2JqZWN0IGltbXV0YWJsZS5cbiAqL1xuZXhwb3J0IHR5cGUgUmVhZE9ubHk8VD4gPSB7XG4gIHJlYWRvbmx5IFtLIGluIGtleW9mIFRdOiBSZWFkT25seTxUW0tdPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQWN0aW9uTWFzayB7XG4gIHJlYWRvbmx5IGxlbmd0aDogbnVtYmVyO1xuICBnZXRBY3Rpb24oaW5kZXg6IG51bWJlcik6IHN0cmluZztcbiAgaXNFbmFibGVkKGluZGV4OiBudW1iZXIpOiBib29sZWFuO1xuICBpc0Rpc2FibGVkKGluZGV4OiBudW1iZXIpOiBib29sZWFuO1xuICBlbmFibGUoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gIGRpc2FibGUoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gIGRpc2FibGVBbGwoKTogdm9pZDtcbiAgZmlsdGVyRW5hYmxlZEFjdGlvbnMoKTogc3RyaW5nW107XG4gIGZvckVhY2hBY3Rpb24oY2I6IChhY3Rpb246IHN0cmluZywgZW5hYmxlZDogYm9vbGVhbiwgaW5kZXg6IG51bWJlcikgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbi8qKlxuICogQ29udGV4dCBvYmplY3QgZm9yIHByb2Nlc3Nvci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUHJvY2Vzc0NvbnRleHQge1xuICAvKipcbiAgICogVGhlIGNvbnRleHQgdXJpLiBlLmcuICdhL2IvZXhhbXBsZS5qcGcnXG4gICAqL1xuICByZWFkb25seSB1cmk6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGFjdGlvbnMuIGUuZyAnaW1hZ2UvcmVzaXplLHdfMTAwL2Zvcm1hdCxwbmcnLnNwbGl0KCcvJylcbiAgICovXG4gIHJlYWRvbmx5IGFjdGlvbnM6IHN0cmluZ1tdO1xuXG4gIHJlYWRvbmx5IG1hc2s6IElBY3Rpb25NYXNrO1xuXG4gIC8qKlxuICAgKiBBIGFic3RyYWN0IHN0b3JlIHRvIGdldCBmaWxlIGRhdGEuXG4gICAqIEl0IGNhbiBlaXRoZXIgZ2V0IGZyb20gczMgb3IgbG9jYWwgZmlsZXN5c3RlbS5cbiAgICovXG4gIHJlYWRvbmx5IGJ1ZmZlclN0b3JlOiBJQnVmZmVyU3RvcmU7XG5cbiAgLyoqXG4gICAqIEZlYXR1cmUgZmxhZ3MuXG4gICAqL1xuICByZWFkb25seSBmZWF0dXJlczogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcblxuICByZWFkb25seSBoZWFkZXJzOiBJSHR0cEhlYWRlcnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUh0dHBIZWFkZXJzIHtcbiAgW2tleTogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jZXNzUmVzcG9uc2Uge1xuICByZWFkb25seSBkYXRhOiBhbnk7XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBQcm9jZXNzb3IgaW50ZXJmYWNlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElQcm9jZXNzb3Ige1xuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgcHJvY2Vzc29yLlxuICAgKi9cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhY3Rpb24gaGFuZGxlcnMgZm9yIHRoZSBwcm9jZXNzb3IuXG4gICAqXG4gICAqIEBwYXJhbSBhY3Rpb25zIHRoZSBhY3Rpb24gaGFuZGxlcnNcbiAgICovXG4gIHJlZ2lzdGVyKC4uLmFjdGlvbnM6IElBY3Rpb25bXSk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBjb250ZXh0LlxuICAgKiBAcGFyYW0gdXJpIGUuZy4gJ2EvYi9leGFtcGxlLmpwZydcbiAgICogQHBhcmFtIGFjdGlvbnMgZS5nLiAnaW1hZ2UvcmVzaXplLHdfMTAwL2Zvcm1hdCxwbmcnLnNwbGl0KCcvJylcbiAgICogQHBhcmFtIGJ1ZmZlclN0b3JlXG4gICAqL1xuICBuZXdDb250ZXh0KHVyaTogc3RyaW5nLCBhY3Rpb25zOiBzdHJpbmdbXSwgYnVmZmVyU3RvcmU6IElCdWZmZXJTdG9yZSk6IFByb21pc2U8SVByb2Nlc3NDb250ZXh0PjtcblxuICAvKipcbiAgICogUHJvY2VzcyBlYWNoIGFjdGlvbnMgd2l0aCBhIGNvbnRleHQuXG4gICAqXG4gICAqIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiBgYGB0c1xuICAgKiBjb25zdCBicyA9IG5ldyBTaGFycEJ1ZmZlclN0b3JlKHNoYXJwKHtcbiAgICogICBjcmVhdGU6IHtcbiAgICogICAgIHdpZHRoOiA1MCxcbiAgICogICAgIGhlaWdodDogNTAsXG4gICAqICAgICBjaGFubmVsczogMyxcbiAgICogICAgIGJhY2tncm91bmQ6IHsgcjogMjU1LCBnOiAwLCBiOiAwIH0sXG4gICAqICAgfSxcbiAgICogfSkucG5nKCkpO1xuICAgKiBjb25zdCBjdHggPSBJbWFnZVByb2Nlc3Nvci5nZXRJbnN0YW5jZSgpLm5ld0NvbnRleHQoJ2V4YW1wbGUuanBnJywgJ2ltYWdlL3Jlc2l6ZSx3XzEwMCxoXzEwMCxtX2ZpeGVkLGxpbWl0XzAvJy5zcGxpdCgnLycpKTtcbiAgICogYXdhaXQgSW1hZ2VQcm9jZXNzb3IuZ2V0SW5zdGFuY2UoKS5wcm9jZXNzKGN0eCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gY3R4IHRoZSBjb250ZXh0XG4gICAqL1xuICBwcm9jZXNzKGN0eDogSVByb2Nlc3NDb250ZXh0KTogUHJvbWlzZTxJUHJvY2Vzc1Jlc3BvbnNlPjtcbn1cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2Ugb2YgYWN0aW9uIG9wdGlvbnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUFjdGlvbk9wdHMgeyB9XG5cbi8qKlxuICogQW4gaW50ZXJmYWNlIG9mIGFjdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQWN0aW9uIHtcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGFjdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVmFsaWRhdGUgcGFyYW1ldGVycyBhbmQgcmV0dXJuIGFuIGFjdGlvbiBvcHRpb24gb2JqZWN0LlxuICAgKiBUaHJvdyBhbiBlcnJvciBpZiBpdCdzIGludmFsaWQuXG4gICAqXG4gICAqIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiBgYGB0c1xuICAgKiBhY3Rpb24udmFsaWRhdGUoJ3Jlc2l6ZSxtX21maXQsaF8xMDAsd18xMDAsLCcuc3BsaXQoJywnKTtcbiAgICogYGBgYFxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIHRoZSBwYXJhbWV0ZXJzXG4gICAqL1xuICB2YWxpZGF0ZShwYXJhbXM6IHN0cmluZ1tdKTogUmVhZE9ubHk8SUFjdGlvbk9wdHM+O1xuXG4gIC8qKlxuICAgKiBQcm9jZXNzIHRoZSBhY3Rpb24gd2l0aCB0aGUgZ2l2ZW4gcGFyYW1ldGVycy5cbiAgICpcbiAgICogRm9yIGV4YW1wbGU6XG4gICAqXG4gICAqIGBgYHRzXG4gICAqIGFjdGlvbi5wcm9jZXNzKGN0eCwgJ3Jlc2l6ZSx3XzEwLGhfMTAnLnNwbGl0KCcsJykpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGN0eCB0aGUgY29udGV4dFxuICAgKiBAcGFyYW0gcGFyYW1zIHRoZSBwYXJhbWV0ZXJzXG4gICAqL1xuICBwcm9jZXNzKGN0eDogSVByb2Nlc3NDb250ZXh0LCBwYXJhbXM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYmVmb3JlIHByb2Nlc3NvciBuZXcgY29udGV4dC5cbiAgICpcbiAgICogQHBhcmFtIGN0eCB0aGUgY29udGV4dFxuICAgKiBAcGFyYW0gcGFyYW1zIHRoZSBwYXJhbWV0ZXJzXG4gICAqL1xuICBiZWZvcmVOZXdDb250ZXh0KGN0eDogSVByb2Nlc3NDb250ZXh0LCBwYXJhbXM6IHN0cmluZ1tdLCBpbmRleDogbnVtYmVyKTogdm9pZDtcblxuICBiZWZvcmVQcm9jZXNzKGN0eDogSVByb2Nlc3NDb250ZXh0LCBwYXJhbXM6IHN0cmluZ1tdLCBpbmRleDogbnVtYmVyKTogdm9pZDtcbn1cblxuLyoqXG4gKiBJbnZhbGlkIGFyZ3VtZW50IGVycm9yIChIVFRQIDQwMCkuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQXJndW1lbnQgZXh0ZW5kcyBIdHRwRXJyb3JzWzQwMF0geyB9XG5cblxuZXhwb3J0IGVudW0gRmVhdHVyZXMge1xuICBBdXRvV2VicCA9ICdhdXRvLXdlYnAnLFxuICBBdXRvQXZpZiA9ICdhdXRvLWF2aWYnLFxuICBBdXRvT3JpZW50ID0gJ2F1dG8tb3JpZW50JyxcbiAgUmV0dXJuSW5mbyA9ICdyZXR1cm4taW5mbycsXG4gIFJlYWRBbGxBbmltYXRlZEZyYW1lcyA9ICdyZWFkLWFsbC1hbmltYXRlZC1mcmFtZXMnLFxuICBMaW1pdEFuaW1hdGVkRnJhbWVzID0gMCxcbn0iXX0=