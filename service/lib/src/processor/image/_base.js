"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.split1 = exports.ActionMask = exports.BaseImageAction = void 0;
class BaseImageAction {
    constructor() {
        this.name = 'unknown';
    }
    beforeNewContext(_1, params, _3) {
        this.validate(params);
    }
    beforeProcess(_1, _2, _3) { }
}
exports.BaseImageAction = BaseImageAction;
class ActionMask {
    constructor(_actions) {
        this._actions = _actions;
        this._masks = _actions.map(() => true);
    }
    get length() {
        return this._actions.length;
    }
    _check(index) {
        if (!(0 <= index && index < this.length)) {
            throw new Error('Index out of range');
        }
    }
    getAction(index) {
        this._check(index);
        return this._actions[index];
    }
    isEnabled(index) {
        this._check(index);
        return this._masks[index];
    }
    isDisabled(index) {
        this._check(index);
        return !this._masks[index];
    }
    enable(index) {
        this._check(index);
        this._masks[index] = true;
    }
    disable(index) {
        this._check(index);
        this._masks[index] = false;
    }
    disableAll() {
        for (let i = 0; i < this._masks.length; i++) {
            this._masks[i] = false;
        }
    }
    filterEnabledActions() {
        return this._actions.filter((_, index) => this._masks[index]);
    }
    forEachAction(cb) {
        this._actions.forEach((action, index) => {
            cb(action, this.isEnabled(index), index);
        });
    }
}
exports.ActionMask = ActionMask;
function split1(s, sep = ',') {
    const split = s.split(sep, 1);
    return [split[0], s.substring(split[0].length + sep.length)];
}
exports.split1 = split1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2Jhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcHJvY2Vzc29yL2ltYWdlL19iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUlBLE1BQXNCLGVBQWU7SUFBckM7UUFDUyxTQUFJLEdBQVcsU0FBUyxDQUFDO0lBT2xDLENBQUM7SUFKUSxnQkFBZ0IsQ0FBQyxFQUFtQixFQUFFLE1BQWdCLEVBQUUsRUFBVTtRQUN2RSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFDTSxhQUFhLENBQUMsRUFBaUIsRUFBRSxFQUFZLEVBQUUsRUFBVSxJQUFVLENBQUM7Q0FDNUU7QUFSRCwwQ0FRQztBQUVELE1BQWEsVUFBVTtJQUdyQixZQUFvQyxRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ3BELElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsSUFBVyxNQUFNO1FBQ2YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUM5QixDQUFDO0lBRU8sTUFBTSxDQUFDLEtBQWE7UUFDMUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3hDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUN2QztJQUNILENBQUM7SUFFTSxTQUFTLENBQUMsS0FBYTtRQUM1QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRU0sU0FBUyxDQUFDLEtBQWE7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVNLFVBQVUsQ0FBQyxLQUFhO1FBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkIsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFhO1FBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDNUIsQ0FBQztJQUVNLE9BQU8sQ0FBQyxLQUFhO1FBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDN0IsQ0FBQztJQUVNLFVBQVU7UUFDZixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBRU0sb0JBQW9CO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVNLGFBQWEsQ0FBQyxFQUE2RDtRQUNoRixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN0QyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUF6REQsZ0NBeURDO0FBRUQsU0FBZ0IsTUFBTSxDQUFDLENBQVMsRUFBRSxNQUFjLEdBQUc7SUFDakQsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUIsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDL0QsQ0FBQztBQUhELHdCQUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUltYWdlQ29udGV4dCB9IGZyb20gJy4nO1xuaW1wb3J0IHsgSUFjdGlvbiwgSUFjdGlvbk9wdHMsIElQcm9jZXNzQ29udGV4dCwgUmVhZE9ubHksIElBY3Rpb25NYXNrIH0gZnJvbSAnLi4nO1xuXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlSW1hZ2VBY3Rpb24gaW1wbGVtZW50cyBJQWN0aW9uIHtcbiAgcHVibGljIG5hbWU6IHN0cmluZyA9ICd1bmtub3duJztcbiAgYWJzdHJhY3QgdmFsaWRhdGUocGFyYW1zOiBzdHJpbmdbXSk6IFJlYWRPbmx5PElBY3Rpb25PcHRzPjtcbiAgYWJzdHJhY3QgcHJvY2VzcyhjdHg6IElQcm9jZXNzQ29udGV4dCwgcGFyYW1zOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD47XG4gIHB1YmxpYyBiZWZvcmVOZXdDb250ZXh0KF8xOiBJUHJvY2Vzc0NvbnRleHQsIHBhcmFtczogc3RyaW5nW10sIF8zOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnZhbGlkYXRlKHBhcmFtcyk7XG4gIH1cbiAgcHVibGljIGJlZm9yZVByb2Nlc3MoXzE6IElJbWFnZUNvbnRleHQsIF8yOiBzdHJpbmdbXSwgXzM6IG51bWJlcik6IHZvaWQgeyB9XG59XG5cbmV4cG9ydCBjbGFzcyBBY3Rpb25NYXNrIGltcGxlbWVudHMgSUFjdGlvbk1hc2sge1xuICBwcml2YXRlIHJlYWRvbmx5IF9tYXNrczogYm9vbGVhbltdO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9hY3Rpb25zOiBzdHJpbmdbXSkge1xuICAgIHRoaXMuX21hc2tzID0gX2FjdGlvbnMubWFwKCgpID0+IHRydWUpO1xuICB9XG5cbiAgcHVibGljIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aW9ucy5sZW5ndGg7XG4gIH1cblxuICBwcml2YXRlIF9jaGVjayhpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKCEoMCA8PSBpbmRleCAmJiBpbmRleCA8IHRoaXMubGVuZ3RoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0QWN0aW9uKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHRoaXMuX2NoZWNrKGluZGV4KTtcbiAgICByZXR1cm4gdGhpcy5fYWN0aW9uc1tpbmRleF07XG4gIH1cblxuICBwdWJsaWMgaXNFbmFibGVkKGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICB0aGlzLl9jaGVjayhpbmRleCk7XG4gICAgcmV0dXJuIHRoaXMuX21hc2tzW2luZGV4XTtcbiAgfVxuXG4gIHB1YmxpYyBpc0Rpc2FibGVkKGluZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICB0aGlzLl9jaGVjayhpbmRleCk7XG4gICAgcmV0dXJuICF0aGlzLl9tYXNrc1tpbmRleF07XG4gIH1cblxuICBwdWJsaWMgZW5hYmxlKGluZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLl9jaGVjayhpbmRleCk7XG4gICAgdGhpcy5fbWFza3NbaW5kZXhdID0gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBkaXNhYmxlKGluZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLl9jaGVjayhpbmRleCk7XG4gICAgdGhpcy5fbWFza3NbaW5kZXhdID0gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgZGlzYWJsZUFsbCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX21hc2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLl9tYXNrc1tpXSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBmaWx0ZXJFbmFibGVkQWN0aW9ucygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGlvbnMuZmlsdGVyKChfLCBpbmRleCkgPT4gdGhpcy5fbWFza3NbaW5kZXhdKTtcbiAgfVxuXG4gIHB1YmxpYyBmb3JFYWNoQWN0aW9uKGNiOiAoYWN0aW9uOiBzdHJpbmcsIGVuYWJsZWQ6IGJvb2xlYW4sIGluZGV4OiBudW1iZXIpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLl9hY3Rpb25zLmZvckVhY2goKGFjdGlvbiwgaW5kZXgpID0+IHtcbiAgICAgIGNiKGFjdGlvbiwgdGhpcy5pc0VuYWJsZWQoaW5kZXgpLCBpbmRleCk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0MShzOiBzdHJpbmcsIHNlcDogc3RyaW5nID0gJywnKSB7XG4gIGNvbnN0IHNwbGl0ID0gcy5zcGxpdChzZXAsIDEpO1xuICByZXR1cm4gW3NwbGl0WzBdLCBzLnN1YnN0cmluZyhzcGxpdFswXS5sZW5ndGggKyBzZXAubGVuZ3RoKV07XG59XG4iXX0=