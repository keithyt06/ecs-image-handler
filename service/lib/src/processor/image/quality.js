"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.QualityAction = void 0;
const sharp = require("sharp");
const __1 = require("..");
const is = require("../../is");
const _base_1 = require("./_base");
const jpeg = require("./jpeg");
const JPG = 'jpg';
const JPEG = sharp.format.jpeg.id;
const WEBP = sharp.format.webp.id;
const AVIF = ((_a = sharp.format.avif) === null || _a === void 0 ? void 0 : _a.id) || 'avif';
class QualityAction extends _base_1.BaseImageAction {
    constructor() {
        super(...arguments);
        this.name = 'quality';
    }
    beforeProcess(ctx, _2, index) {
        if ('gif' === ctx.metadata.format) {
            ctx.mask.disable(index);
        }
    }
    validate(params) {
        const opt = {};
        for (const param of params) {
            if ((this.name === param) || (!param)) {
                continue;
            }
            const [k, v] = param.split('_');
            if (k === 'q') {
                const q = Number.parseInt(v, 10);
                if (is.inRange(q, 1, 100)) {
                    opt.q = q;
                }
                else {
                    throw new __1.InvalidArgument('Quality must be between 1 and 100');
                }
            }
            else if (k === 'Q') {
                const Q = Number.parseInt(v, 10);
                if (is.inRange(Q, 1, 100)) {
                    opt.Q = Q;
                }
                else {
                    throw new __1.InvalidArgument('Quality must be between 1 and 100');
                }
            }
            else {
                throw new __1.InvalidArgument(`Unkown param: "${k}"`);
            }
        }
        return opt;
    }
    async process(ctx, params) {
        var _a, _b, _c;
        const opt = this.validate(params);
        const metadata = ctx.metadata; // If the format is changed before.
        if (JPEG === metadata.format || JPG === metadata.format) {
            let q = 72;
            if (opt.q) {
                const buffer = await ctx.image.toBuffer();
                const estq = jpeg.decode(buffer).quality;
                q = Math.round(estq * opt.q / 100);
            }
            else if (opt.Q) {
                q = opt.Q;
            }
            ctx.image.jpeg({ quality: q });
        }
        else if (WEBP === metadata.format) {
            ctx.image.webp({ quality: ((_a = opt.q) !== null && _a !== void 0 ? _a : opt.Q) });
        }
        else if (AVIF === metadata.format) {
            const quality = (_c = (_b = opt.q) !== null && _b !== void 0 ? _b : opt.Q) !== null && _c !== void 0 ? _c : 65; // 如果没有指定质量，使用默认值65
            ctx.image.avif({
                quality: quality,
                effort: 4,
                chromaSubsampling: '4:4:4',
                lossless: false
            });
        }
    }
}
exports.QualityAction = QualityAction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVhbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm9jZXNzb3IvaW1hZ2UvcXVhbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsK0JBQStCO0FBRS9CLDBCQUE0RDtBQUM1RCwrQkFBK0I7QUFDL0IsbUNBQTBDO0FBQzFDLCtCQUErQjtBQUcvQixNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDbEIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBQ2xDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztBQUNsQyxNQUFNLElBQUksR0FBRyxDQUFBLE1BQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLDBDQUFFLEVBQUUsS0FBSSxNQUFNLENBQUM7QUFPN0MsTUFBYSxhQUFjLFNBQVEsdUJBQWU7SUFBbEQ7O1FBQ29CLFNBQUksR0FBVyxTQUFTLENBQUM7SUE0RDdDLENBQUM7SUExRFUsYUFBYSxDQUFDLEdBQWtCLEVBQUUsRUFBWSxFQUFFLEtBQWE7UUFDaEUsSUFBSSxLQUFLLEtBQUssR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDL0IsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDM0I7SUFDTCxDQUFDO0lBRU0sUUFBUSxDQUFDLE1BQWdCO1FBQzVCLE1BQU0sR0FBRyxHQUFnQixFQUFFLENBQUM7UUFDNUIsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLEVBQUU7WUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNuQyxTQUFTO2FBQ1o7WUFDRCxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFL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aW1wb3J0ICogYXMgc2hhcnAgZnJvbSAnc2hhcnAnO1xuaW1wb3J0IHsgSUltYWdlQ29udGV4dCB9IGZyb20gJy4nO1xuaW1wb3J0IHsgSUFjdGlvbk9wdHMsIEludmFsaWRBcmd1bWVudCwgUmVhZE9ubHkgfSBmcm9tICcuLic7XG5pbXBvcnQgKiBhcyBpcyBmcm9tICcuLi8uLi9pcyc7XG5pbXBvcnQgeyBCYXNlSW1hZ2VBY3Rpb24gfSBmcm9tICcuL19iYXNlJztcbmltcG9ydCAqIGFzIGpwZWcgZnJvbSAnLi9qcGVnJztcblxuXG5jb25zdCBKUEcgPSAnanBnJztcbmNvbnN0IEpQRUcgPSBzaGFycC5mb3JtYXQuanBlZy5pZDtcbmNvbnN0IFdFQlAgPSBzaGFycC5mb3JtYXQud2VicC5pZDtcbmNvbnN0IEFWSUYgPSBzaGFycC5mb3JtYXQuYXZpZj8uaWQgfHwgJ2F2aWYnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFF1YWxpdHlPcHRzIGV4dGVuZHMgSUFjdGlvbk9wdHMge1xuICAgIHE/OiBudW1iZXI7XG4gICAgUT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFF1YWxpdHlBY3Rpb24gZXh0ZW5kcyBCYXNlSW1hZ2VBY3Rpb24ge1xuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmcgPSAncXVhbGl0eSc7XG5cbiAgICBwdWJsaWMgYmVmb3JlUHJvY2VzcyhjdHg6IElJbWFnZUNvbnRleHQsIF8yOiBzdHJpbmdbXSwgaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBpZiAoJ2dpZicgPT09IGN0eC5tZXRhZGF0YS5mb3JtYXQpIHtcbiAgICAgICAgICAgIGN0eC5tYXNrLmRpc2FibGUoaW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHZhbGlkYXRlKHBhcmFtczogc3RyaW5nW10pOiBSZWFkT25seTxRdWFsaXR5T3B0cz4ge1xuICAgICAgICBjb25zdCBvcHQ6IFF1YWxpdHlPcHRzID0ge307XG4gICAgICAgIGZvciAoY29uc3QgcGFyYW0gb2YgcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoKHRoaXMubmFtZSA9PT0gcGFyYW0pIHx8ICghcGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBbaywgdl0gPSBwYXJhbS5zcGxpdCgnXycpO1xuICAgICAgICAgICAgaWYgKGsgPT09ICdxJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHEgPSBOdW1iZXIucGFyc2VJbnQodiwgMTApO1xuICAgICAgICAgICAgICAgIGlmIChpcy5pblJhbmdlKHEsIDEsIDEwMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0LnEgPSBxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnQoJ1F1YWxpdHkgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwMCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoayA9PT0gJ1EnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgUSA9IE51bWJlci5wYXJzZUludCh2LCAxMCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzLmluUmFuZ2UoUSwgMSwgMTAwKSkge1xuICAgICAgICAgICAgICAgICAgICBvcHQuUSA9IFE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudCgnUXVhbGl0eSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgMTAwJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50KGBVbmtvd24gcGFyYW06IFwiJHtrfVwiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdDtcbiAgICB9XG4gICAgcHVibGljIGFzeW5jIHByb2Nlc3MoY3R4OiBJSW1hZ2VDb250ZXh0LCBwYXJhbXM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IG9wdCA9IHRoaXMudmFsaWRhdGUocGFyYW1zKTtcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBjdHgubWV0YWRhdGE7IC8vIElmIHRoZSBmb3JtYXQgaXMgY2hhbmdlZCBiZWZvcmUuXG4gICAgICAgIGlmIChKUEVHID09PSBtZXRhZGF0YS5mb3JtYXQgfHwgSlBHID09PSBtZXRhZGF0YS5mb3JtYXQpIHtcbiAgICAgICAgICAgIGxldCBxID0gNzI7XG4gICAgICAgICAgICBpZiAob3B0LnEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBjdHguaW1hZ2UudG9CdWZmZXIoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBlc3RxID0ganBlZy5kZWNvZGUoYnVmZmVyKS5xdWFsaXR5O1xuICAgICAgICAgICAgICAgIHEgPSBNYXRoLnJvdW5kKGVzdHEgKiBvcHQucSAvIDEwMCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdC5RKSB7XG4gICAgICAgICAgICAgICAgcSA9IG9wdC5RO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LmltYWdlLmpwZWcoeyBxdWFsaXR5OiBxIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKFdFQlAgPT09IG1ldGFkYXRhLmZvcm1hdCkge1xuICAgICAgICAgICAgY3R4LmltYWdlLndlYnAoeyBxdWFsaXR5OiAob3B0LnEgPz8gb3B0LlEpIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKEFWSUYgPT09IG1ldGFkYXRhLmZvcm1hdCkge1xuICAgICAgICAgICAgY29uc3QgcXVhbGl0eSA9IG9wdC5xID8/IG9wdC5RID8/IDY1OyAgLy8g5aaC5p6c5rKh5pyJ5oyH5a6a6LSo6YeP77yM5L2/55So6buY6K6k5YC8NjVcbiAgICAgICAgICAgIGN0eC5pbWFnZS5hdmlmKHtcbiAgICAgICAgICAgICAgICBxdWFsaXR5OiBxdWFsaXR5LFxuICAgICAgICAgICAgICAgIGVmZm9ydDogNCwgIC8vIOS/neaMgeS4reetieWOi+e8qeWKquWKm+e6p+WIq1xuICAgICAgICAgICAgICAgIGNocm9tYVN1YnNhbXBsaW5nOiAnNDo0OjQnLCAgLy8g5L+d5oyB5pyA5L2z6Imy5b2p6LSo6YePXG4gICAgICAgICAgICAgICAgbG9zc2xlc3M6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn0iXX0=