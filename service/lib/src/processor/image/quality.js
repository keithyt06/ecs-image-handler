"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QualityAction = void 0;
const sharp = require("sharp");
const __1 = require("..");
const is = require("../../is");
const _base_1 = require("./_base");
const jpeg = require("./jpeg");
const JPG = 'jpg';
const JPEG = sharp.format.jpeg.id;
const WEBP = sharp.format.webp.id;
class QualityAction extends _base_1.BaseImageAction {
    constructor() {
        super(...arguments);
        this.name = 'quality';
    }
    beforeProcess(ctx, _2, index) {
        if ('gif' === ctx.metadata.format) {
            ctx.mask.disable(index);
        }
    }
    validate(params) {
        const opt = {};
        for (const param of params) {
            if ((this.name === param) || (!param)) {
                continue;
            }
            const [k, v] = param.split('_');
            if (k === 'q') {
                const q = Number.parseInt(v, 10);
                if (is.inRange(q, 1, 100)) {
                    opt.q = q;
                }
                else {
                    throw new __1.InvalidArgument('Quality must be between 1 and 100');
                }
            }
            else if (k === 'Q') {
                const Q = Number.parseInt(v, 10);
                if (is.inRange(Q, 1, 100)) {
                    opt.Q = Q;
                }
                else {
                    throw new __1.InvalidArgument('Quality must be between 1 and 100');
                }
            }
            else {
                throw new __1.InvalidArgument(`Unkown param: "${k}"`);
            }
        }
        return opt;
    }
    async process(ctx, params) {
        var _a;
        const opt = this.validate(params);
        const metadata = ctx.metadata; // If the format is changed before.
        if (JPEG === metadata.format || JPG === metadata.format) {
            let q = 72;
            if (opt.q) {
                const buffer = await ctx.image.toBuffer();
                const estq = jpeg.decode(buffer).quality;
                q = Math.round(estq * opt.q / 100);
            }
            else if (opt.Q) {
                q = opt.Q;
            }
            ctx.image.jpeg({ quality: q });
        }
        else if (WEBP === metadata.format) {
            ctx.image.webp({ quality: ((_a = opt.q) !== null && _a !== void 0 ? _a : opt.Q) });
        }
    }
}
exports.QualityAction = QualityAction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVhbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm9jZXNzb3IvaW1hZ2UvcXVhbGl0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBK0I7QUFFL0IsMEJBQTREO0FBQzVELCtCQUErQjtBQUMvQixtQ0FBMEM7QUFDMUMsK0JBQStCO0FBRy9CLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQztBQUNsQixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7QUFDbEMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO0FBT2xDLE1BQWEsYUFBYyxTQUFRLHVCQUFlO0lBQWxEOztRQUNrQixTQUFJLEdBQVcsU0FBUyxDQUFDO0lBb0QzQyxDQUFDO0lBbERRLGFBQWEsQ0FBQyxHQUFrQixFQUFFLEVBQVksRUFBRSxLQUFhO1FBQ2xFLElBQUksS0FBSyxLQUFLLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ2pDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVNLFFBQVEsQ0FBQyxNQUFnQjtRQUM5QixNQUFNLEdBQUcsR0FBZ0IsRUFBRSxDQUFDO1FBQzVCLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFO1lBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDckMsU0FBUzthQUNWO1lBQ0QsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTtnQkFDYixNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDakMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7b0JBQ3pCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNYO3FCQUFNO29CQUNMLE1BQU0sSUFBSSxtQkFBZSxDQUFDLG1DQUFtQyxDQUFDLENBQUM7aUJBQ2hFO2FBQ0Y7aUJBQU0sSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFO2dCQUNwQixNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDakMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7b0JBQ3pCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNYO3FCQUFNO29CQUNMLE1BQU0sSUFBSSxtQkFBZSxDQUFDLG1DQUFtQyxDQUFDLENBQUM7aUJBQ2hFO2FBQ0Y7aUJBQU07Z0JBQ0wsTUFBTSxJQUFJLG1CQUFlLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDbkQ7U0FDRjtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUNNLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBa0IsRUFBRSxNQUFnQjs7UUFDdkQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsbUNBQW1DO1FBQ2xFLElBQUksSUFBSSxLQUFLLFFBQVEsQ0FBQyxNQUFNLElBQUksR0FBRyxLQUFLLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDdkQsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1gsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFO2dCQUNULE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDMUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQ3pDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO2FBQ3BDO2lCQUFNLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtnQkFDaEIsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDWDtZQUNELEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDaEM7YUFBTSxJQUFJLElBQUksS0FBSyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ25DLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsTUFBQSxHQUFHLENBQUMsQ0FBQyxtQ0FBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQy9DO0lBQ0gsQ0FBQztDQUNGO0FBckRELHNDQXFEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHNoYXJwIGZyb20gJ3NoYXJwJztcbmltcG9ydCB7IElJbWFnZUNvbnRleHQgfSBmcm9tICcuJztcbmltcG9ydCB7IElBY3Rpb25PcHRzLCBJbnZhbGlkQXJndW1lbnQsIFJlYWRPbmx5IH0gZnJvbSAnLi4nO1xuaW1wb3J0ICogYXMgaXMgZnJvbSAnLi4vLi4vaXMnO1xuaW1wb3J0IHsgQmFzZUltYWdlQWN0aW9uIH0gZnJvbSAnLi9fYmFzZSc7XG5pbXBvcnQgKiBhcyBqcGVnIGZyb20gJy4vanBlZyc7XG5cblxuY29uc3QgSlBHID0gJ2pwZyc7XG5jb25zdCBKUEVHID0gc2hhcnAuZm9ybWF0LmpwZWcuaWQ7XG5jb25zdCBXRUJQID0gc2hhcnAuZm9ybWF0LndlYnAuaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUXVhbGl0eU9wdHMgZXh0ZW5kcyBJQWN0aW9uT3B0cyB7XG4gIHE/OiBudW1iZXI7XG4gIFE/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBRdWFsaXR5QWN0aW9uIGV4dGVuZHMgQmFzZUltYWdlQWN0aW9uIHtcbiAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZyA9ICdxdWFsaXR5JztcblxuICBwdWJsaWMgYmVmb3JlUHJvY2VzcyhjdHg6IElJbWFnZUNvbnRleHQsIF8yOiBzdHJpbmdbXSwgaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICgnZ2lmJyA9PT0gY3R4Lm1ldGFkYXRhLmZvcm1hdCkge1xuICAgICAgY3R4Lm1hc2suZGlzYWJsZShpbmRleCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHZhbGlkYXRlKHBhcmFtczogc3RyaW5nW10pOiBSZWFkT25seTxRdWFsaXR5T3B0cz4ge1xuICAgIGNvbnN0IG9wdDogUXVhbGl0eU9wdHMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHBhcmFtIG9mIHBhcmFtcykge1xuICAgICAgaWYgKCh0aGlzLm5hbWUgPT09IHBhcmFtKSB8fCAoIXBhcmFtKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IFtrLCB2XSA9IHBhcmFtLnNwbGl0KCdfJyk7XG4gICAgICBpZiAoayA9PT0gJ3EnKSB7XG4gICAgICAgIGNvbnN0IHEgPSBOdW1iZXIucGFyc2VJbnQodiwgMTApO1xuICAgICAgICBpZiAoaXMuaW5SYW5nZShxLCAxLCAxMDApKSB7XG4gICAgICAgICAgb3B0LnEgPSBxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnQoJ1F1YWxpdHkgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwMCcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGsgPT09ICdRJykge1xuICAgICAgICBjb25zdCBRID0gTnVtYmVyLnBhcnNlSW50KHYsIDEwKTtcbiAgICAgICAgaWYgKGlzLmluUmFuZ2UoUSwgMSwgMTAwKSkge1xuICAgICAgICAgIG9wdC5RID0gUTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50KCdRdWFsaXR5IG11c3QgYmUgYmV0d2VlbiAxIGFuZCAxMDAnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudChgVW5rb3duIHBhcmFtOiBcIiR7a31cImApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb3B0O1xuICB9XG4gIHB1YmxpYyBhc3luYyBwcm9jZXNzKGN0eDogSUltYWdlQ29udGV4dCwgcGFyYW1zOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IG9wdCA9IHRoaXMudmFsaWRhdGUocGFyYW1zKTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IGN0eC5tZXRhZGF0YTsgLy8gSWYgdGhlIGZvcm1hdCBpcyBjaGFuZ2VkIGJlZm9yZS5cbiAgICBpZiAoSlBFRyA9PT0gbWV0YWRhdGEuZm9ybWF0IHx8IEpQRyA9PT0gbWV0YWRhdGEuZm9ybWF0KSB7XG4gICAgICBsZXQgcSA9IDcyO1xuICAgICAgaWYgKG9wdC5xKSB7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGN0eC5pbWFnZS50b0J1ZmZlcigpO1xuICAgICAgICBjb25zdCBlc3RxID0ganBlZy5kZWNvZGUoYnVmZmVyKS5xdWFsaXR5O1xuICAgICAgICBxID0gTWF0aC5yb3VuZChlc3RxICogb3B0LnEgLyAxMDApO1xuICAgICAgfSBlbHNlIGlmIChvcHQuUSkge1xuICAgICAgICBxID0gb3B0LlE7XG4gICAgICB9XG4gICAgICBjdHguaW1hZ2UuanBlZyh7IHF1YWxpdHk6IHEgfSk7XG4gICAgfSBlbHNlIGlmIChXRUJQID09PSBtZXRhZGF0YS5mb3JtYXQpIHtcbiAgICAgIGN0eC5pbWFnZS53ZWJwKHsgcXVhbGl0eTogKG9wdC5xID8/IG9wdC5RKSB9KTtcbiAgICB9XG4gIH1cbn0iXX0=