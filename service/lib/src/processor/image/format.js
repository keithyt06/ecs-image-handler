"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormatAction = void 0;
const __1 = require("..");
const _base_1 = require("./_base");
class FormatAction extends _base_1.BaseImageAction {
    constructor() {
        super(...arguments);
        this.name = 'format';
    }
    beforeNewContext(ctx, params) {
        const opts = this.validate(params);
        if (['webp', 'gif', 'avif'].includes(opts.format)) {
            ctx.features[__1.Features.ReadAllAnimatedFrames] = true;
        }
        else {
            ctx.features[__1.Features.ReadAllAnimatedFrames] = false;
        }
    }
    beforeProcess(ctx, params, index) {
        const opts = this.validate(params);
        if (('gif' === ctx.metadata.format) && ('gif' === opts.format)) {
            ctx.mask.disable(index);
        }
    }
    validate(params) {
        let opt = { format: '' };
        if (params.length !== 2) {
            throw new __1.InvalidArgument(`Format param error, e.g: format,jpg (${SUPPORTED_FORMAT.toString()})`);
        }
        opt.format = params[1];
        if (!SUPPORTED_FORMAT.includes(opt.format)) {
            throw new __1.InvalidArgument(`Format must be one of ${SUPPORTED_FORMAT.toString()}`);
        }
        return opt;
    }
    async process(ctx, params) {
        if (ctx.features[__1.Features.AutoWebp]) {
            ctx.features[__1.Features.AutoWebp] = false;
        }
        const opt = this.validate(params);
        if ('gif' === opt.format) {
            return; // nothing to do
        }
        if (['jpeg', 'jpg'].includes(opt.format)) {
            ctx.metadata.format = 'jpeg';
            ctx.image.jpeg();
        }
        else if (opt.format === 'png') {
            ctx.metadata.format = 'png';
            ctx.image.png({ effort: 2, quality: 80 });
        }
        else if (opt.format === 'webp') {
            ctx.metadata.format = 'webp';
            ctx.image.webp({ effort: 2, quality: 80 });
        }
        else if (opt.format === 'avif') {
            ctx.metadata.format = 'avif';
            ctx.headers['Content-Type'] = 'image/avif';
            ctx.image.avif({ effort: 2, quality: 60 }); // AVIF默认使用较低的质量以获得更好的压缩率
        }
    }
}
exports.FormatAction = FormatAction;
const SUPPORTED_FORMAT = [
    'jpg',
    'jpeg',
    'png',
    'webp',
    'gif',
    'avif',
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Byb2Nlc3Nvci9pbWFnZS9mb3JtYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMEJBQXVGO0FBQ3ZGLG1DQUEwQztBQU0xQyxNQUFhLFlBQWEsU0FBUSx1QkFBZTtJQUFqRDs7UUFDa0IsU0FBSSxHQUFXLFFBQVEsQ0FBQztJQTBEMUMsQ0FBQztJQXhEUSxnQkFBZ0IsQ0FBQyxHQUFvQixFQUFFLE1BQWdCO1FBQzVELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNqRCxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLElBQUksQ0FBQztTQUNyRDthQUFNO1lBQ0wsR0FBRyxDQUFDLFFBQVEsQ0FBQyxZQUFRLENBQUMscUJBQXFCLENBQUMsR0FBRyxLQUFLLENBQUM7U0FDdEQ7SUFDSCxDQUFDO0lBRU0sYUFBYSxDQUFDLEdBQWtCLEVBQUUsTUFBZ0IsRUFBRSxLQUFhO1FBQ3RFLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLEtBQUssS0FBSyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM5RCxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QjtJQUNILENBQUM7SUFFTSxRQUFRLENBQUMsTUFBZ0I7UUFDOUIsSUFBSSxHQUFHLEdBQWUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFFckMsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN2QixNQUFNLElBQUksbUJBQWUsQ0FBQyx3Q0FBd0MsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ25HO1FBQ0QsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFdkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUMsTUFBTSxJQUFJLG1CQUFlLENBQUMseUJBQXlCLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNuRjtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUdNLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBa0IsRUFBRSxNQUFnQjtRQUN2RCxJQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ25DLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQztTQUN6QztRQUVELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEMsSUFBSSxLQUFLLEtBQUssR0FBRyxDQUFDLE1BQU0sRUFBRTtZQUN4QixPQUFPLENBQUMsZ0JBQWdCO1NBQ3pCO1FBQ0QsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3hDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztZQUM3QixHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2xCO2FBQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRTtZQUMvQixHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDNUIsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQzNDO2FBQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRTtZQUNoQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDN0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQzVDO2FBQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLE1BQU0sRUFBRTtZQUNoQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7WUFDN0IsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxZQUFZLENBQUM7WUFDM0MsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMseUJBQXlCO1NBQ3RFO0lBQ0gsQ0FBQztDQUNGO0FBM0RELG9DQTJEQztBQUVELE1BQU0sZ0JBQWdCLEdBQUc7SUFDdkIsS0FBSztJQUNMLE1BQU07SUFDTixLQUFLO0lBQ0wsTUFBTTtJQUNOLEtBQUs7SUFDTCxNQUFNO0NBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElJbWFnZUNvbnRleHQgfSBmcm9tICcuJztcbmltcG9ydCB7IElBY3Rpb25PcHRzLCBSZWFkT25seSwgSW52YWxpZEFyZ3VtZW50LCBGZWF0dXJlcywgSVByb2Nlc3NDb250ZXh0IH0gZnJvbSAnLi4nO1xuaW1wb3J0IHsgQmFzZUltYWdlQWN0aW9uIH0gZnJvbSAnLi9fYmFzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRm9ybWF0T3B0cyBleHRlbmRzIElBY3Rpb25PcHRzIHtcbiAgZm9ybWF0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBGb3JtYXRBY3Rpb24gZXh0ZW5kcyBCYXNlSW1hZ2VBY3Rpb24ge1xuICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nID0gJ2Zvcm1hdCc7XG5cbiAgcHVibGljIGJlZm9yZU5ld0NvbnRleHQoY3R4OiBJUHJvY2Vzc0NvbnRleHQsIHBhcmFtczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy52YWxpZGF0ZShwYXJhbXMpO1xuICAgIGlmIChbJ3dlYnAnLCAnZ2lmJywgJ2F2aWYnXS5pbmNsdWRlcyhvcHRzLmZvcm1hdCkpIHtcbiAgICAgIGN0eC5mZWF0dXJlc1tGZWF0dXJlcy5SZWFkQWxsQW5pbWF0ZWRGcmFtZXNdID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LmZlYXR1cmVzW0ZlYXR1cmVzLlJlYWRBbGxBbmltYXRlZEZyYW1lc10gPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYmVmb3JlUHJvY2VzcyhjdHg6IElJbWFnZUNvbnRleHQsIHBhcmFtczogc3RyaW5nW10sIGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBvcHRzID0gdGhpcy52YWxpZGF0ZShwYXJhbXMpO1xuICAgIGlmICgoJ2dpZicgPT09IGN0eC5tZXRhZGF0YS5mb3JtYXQpICYmICgnZ2lmJyA9PT0gb3B0cy5mb3JtYXQpKSB7XG4gICAgICBjdHgubWFzay5kaXNhYmxlKGluZGV4KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgdmFsaWRhdGUocGFyYW1zOiBzdHJpbmdbXSk6IFJlYWRPbmx5PEZvcm1hdE9wdHM+IHtcbiAgICBsZXQgb3B0OiBGb3JtYXRPcHRzID0geyBmb3JtYXQ6ICcnIH07XG5cbiAgICBpZiAocGFyYW1zLmxlbmd0aCAhPT0gMikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudChgRm9ybWF0IHBhcmFtIGVycm9yLCBlLmc6IGZvcm1hdCxqcGcgKCR7U1VQUE9SVEVEX0ZPUk1BVC50b1N0cmluZygpfSlgKTtcbiAgICB9XG4gICAgb3B0LmZvcm1hdCA9IHBhcmFtc1sxXTtcblxuICAgIGlmICghU1VQUE9SVEVEX0ZPUk1BVC5pbmNsdWRlcyhvcHQuZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudChgRm9ybWF0IG11c3QgYmUgb25lIG9mICR7U1VQUE9SVEVEX0ZPUk1BVC50b1N0cmluZygpfWApO1xuICAgIH1cblxuICAgIHJldHVybiBvcHQ7XG4gIH1cblxuXG4gIHB1YmxpYyBhc3luYyBwcm9jZXNzKGN0eDogSUltYWdlQ29udGV4dCwgcGFyYW1zOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmIChjdHguZmVhdHVyZXNbRmVhdHVyZXMuQXV0b1dlYnBdKSB7XG4gICAgICBjdHguZmVhdHVyZXNbRmVhdHVyZXMuQXV0b1dlYnBdID0gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0ID0gdGhpcy52YWxpZGF0ZShwYXJhbXMpO1xuICAgIGlmICgnZ2lmJyA9PT0gb3B0LmZvcm1hdCkge1xuICAgICAgcmV0dXJuOyAvLyBub3RoaW5nIHRvIGRvXG4gICAgfVxuICAgIGlmIChbJ2pwZWcnLCAnanBnJ10uaW5jbHVkZXMob3B0LmZvcm1hdCkpIHtcbiAgICAgIGN0eC5tZXRhZGF0YS5mb3JtYXQgPSAnanBlZyc7XG4gICAgICBjdHguaW1hZ2UuanBlZygpO1xuICAgIH0gZWxzZSBpZiAob3B0LmZvcm1hdCA9PT0gJ3BuZycpIHtcbiAgICAgIGN0eC5tZXRhZGF0YS5mb3JtYXQgPSAncG5nJztcbiAgICAgIGN0eC5pbWFnZS5wbmcoeyBlZmZvcnQ6IDIsIHF1YWxpdHk6IDgwIH0pO1xuICAgIH0gZWxzZSBpZiAob3B0LmZvcm1hdCA9PT0gJ3dlYnAnKSB7XG4gICAgICBjdHgubWV0YWRhdGEuZm9ybWF0ID0gJ3dlYnAnO1xuICAgICAgY3R4LmltYWdlLndlYnAoeyBlZmZvcnQ6IDIsIHF1YWxpdHk6IDgwIH0pO1xuICAgIH0gZWxzZSBpZiAob3B0LmZvcm1hdCA9PT0gJ2F2aWYnKSB7XG4gICAgICBjdHgubWV0YWRhdGEuZm9ybWF0ID0gJ2F2aWYnO1xuICAgICAgY3R4LmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2ltYWdlL2F2aWYnO1xuICAgICAgY3R4LmltYWdlLmF2aWYoeyBlZmZvcnQ6IDIsIHF1YWxpdHk6IDYwIH0pOyAvLyBBVklG6buY6K6k5L2/55So6L6D5L2O55qE6LSo6YeP5Lul6I635b6X5pu05aW955qE5Y6L57yp546HXG4gICAgfVxuICB9XG59XG5cbmNvbnN0IFNVUFBPUlRFRF9GT1JNQVQgPSBbXG4gICdqcGcnLFxuICAnanBlZycsXG4gICdwbmcnLFxuICAnd2VicCcsXG4gICdnaWYnLFxuICAnYXZpZicsXG5dOyJdfQ==