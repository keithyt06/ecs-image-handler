"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sharp = require("sharp");
const auto_orient_1 = require("../../../src/processor/image/auto-orient");
const utils_1 = require("./utils");
test('auto-orient action validate', () => {
    const action = new auto_orient_1.AutoOrientAction();
    const param0 = action.validate('auto-orient,0'.split(','));
    expect(param0).toEqual({
        auto: false,
    });
    const param1 = action.validate('auto-orient,1'.split(','));
    expect(param1).toEqual({
        auto: true,
    });
    expect(() => {
        action.validate('auto-orient,1,2'.split(','));
    }).toThrowError(/Auto-orient param error, e.g: auto-orient,1/);
    expect(() => {
        action.validate('auto-orient'.split(','));
    }).toThrowError(/Auto-orient param error, e.g: auto-orient,1/);
    expect(() => {
        action.validate('auto-orient,xx'.split(','));
    }).toThrowError(/Auto-orient param must be 0 or 1/);
    expect(() => {
        action.validate('auto-orient,20'.split(','));
    }).toThrowError(/Auto-orient param must be 0 or 1/);
});
test('quality action', async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const action = new auto_orient_1.AutoOrientAction();
    await action.process(ctx, 'auto-orient,1'.split(','));
    const { info } = await ctx.image.toBuffer({ resolveWithObject: true });
    expect(info.format).toBe(sharp.format.jpeg.id);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1vcmllbnQudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvcHJvY2Vzc29yL2ltYWdlL2F1dG8tb3JpZW50LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBK0I7QUFDL0IsMEVBQTRFO0FBQzVFLG1DQUFnQztBQUVoQyxJQUFJLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksOEJBQWdCLEVBQUUsQ0FBQztJQUN0QyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3JCLElBQUksRUFBRSxLQUFLO0tBQ1osQ0FBQyxDQUFDO0lBQ0gsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNyQixJQUFJLEVBQUUsSUFBSTtLQUNYLENBQUMsQ0FBQztJQUdILE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDVixNQUFNLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO0lBRS9ELE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDVixNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsNkNBQTZDLENBQUMsQ0FBQztJQUcvRCxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsa0NBQWtDLENBQUMsQ0FBQztJQUVwRCxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsa0NBQWtDLENBQUMsQ0FBQztBQUV0RCxDQUFDLENBQUMsQ0FBQztBQUdILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNoQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUEsYUFBSyxFQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksOEJBQWdCLEVBQUUsQ0FBQztJQUN0QyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGVBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN0RCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFFdkUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzaGFycCBmcm9tICdzaGFycCc7XG5pbXBvcnQgeyBBdXRvT3JpZW50QWN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vc3JjL3Byb2Nlc3Nvci9pbWFnZS9hdXRvLW9yaWVudCc7XG5pbXBvcnQgeyBta2N0eCB9IGZyb20gJy4vdXRpbHMnO1xuXG50ZXN0KCdhdXRvLW9yaWVudCBhY3Rpb24gdmFsaWRhdGUnLCAoKSA9PiB7XG4gIGNvbnN0IGFjdGlvbiA9IG5ldyBBdXRvT3JpZW50QWN0aW9uKCk7XG4gIGNvbnN0IHBhcmFtMCA9IGFjdGlvbi52YWxpZGF0ZSgnYXV0by1vcmllbnQsMCcuc3BsaXQoJywnKSk7XG4gIGV4cGVjdChwYXJhbTApLnRvRXF1YWwoe1xuICAgIGF1dG86IGZhbHNlLFxuICB9KTtcbiAgY29uc3QgcGFyYW0xID0gYWN0aW9uLnZhbGlkYXRlKCdhdXRvLW9yaWVudCwxJy5zcGxpdCgnLCcpKTtcbiAgZXhwZWN0KHBhcmFtMSkudG9FcXVhbCh7XG4gICAgYXV0bzogdHJ1ZSxcbiAgfSk7XG5cblxuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgnYXV0by1vcmllbnQsMSwyJy5zcGxpdCgnLCcpKTtcbiAgfSkudG9UaHJvd0Vycm9yKC9BdXRvLW9yaWVudCBwYXJhbSBlcnJvciwgZS5nOiBhdXRvLW9yaWVudCwxLyk7XG5cbiAgZXhwZWN0KCgpID0+IHtcbiAgICBhY3Rpb24udmFsaWRhdGUoJ2F1dG8tb3JpZW50Jy5zcGxpdCgnLCcpKTtcbiAgfSkudG9UaHJvd0Vycm9yKC9BdXRvLW9yaWVudCBwYXJhbSBlcnJvciwgZS5nOiBhdXRvLW9yaWVudCwxLyk7XG5cblxuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgnYXV0by1vcmllbnQseHgnLnNwbGl0KCcsJykpO1xuICB9KS50b1Rocm93RXJyb3IoL0F1dG8tb3JpZW50IHBhcmFtIG11c3QgYmUgMCBvciAxLyk7XG5cbiAgZXhwZWN0KCgpID0+IHtcbiAgICBhY3Rpb24udmFsaWRhdGUoJ2F1dG8tb3JpZW50LDIwJy5zcGxpdCgnLCcpKTtcbiAgfSkudG9UaHJvd0Vycm9yKC9BdXRvLW9yaWVudCBwYXJhbSBtdXN0IGJlIDAgb3IgMS8pO1xuXG59KTtcblxuXG50ZXN0KCdxdWFsaXR5IGFjdGlvbicsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgY3R4ID0gYXdhaXQgbWtjdHgoJ2V4YW1wbGUuanBnJyk7XG4gIGNvbnN0IGFjdGlvbiA9IG5ldyBBdXRvT3JpZW50QWN0aW9uKCk7XG4gIGF3YWl0IGFjdGlvbi5wcm9jZXNzKGN0eCwgJ2F1dG8tb3JpZW50LDEnLnNwbGl0KCcsJykpO1xuICBjb25zdCB7IGluZm8gfSA9IGF3YWl0IGN0eC5pbWFnZS50b0J1ZmZlcih7IHJlc29sdmVXaXRoT2JqZWN0OiB0cnVlIH0pO1xuXG4gIGV4cGVjdChpbmZvLmZvcm1hdCkudG9CZShzaGFycC5mb3JtYXQuanBlZy5pZCk7XG59KTsiXX0=