"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sharp = require("sharp");
const sharpen_1 = require("../../../src/processor/image/sharpen");
const utils_1 = require("./utils");
test('quality action validate', () => {
    const action = new sharpen_1.SharpenAction();
    const param1 = action.validate('sharpen,50'.split(','));
    expect(param1).toEqual({
        sharpen: 50,
    });
    expect(() => {
        action.validate('sharpen'.split(','));
    }).toThrowError(/Sharpen param error, e.g: sharpen,100/);
    expect(() => {
        action.validate('sharpen,xx,22'.split(','));
    }).toThrowError(/Sharpen param error, e.g: sharpen,100/);
    expect(() => {
        action.validate('sharpen,22'.split(','));
    }).toThrowError(/Sharpen be between 50 and 399/);
    expect(() => {
        action.validate('contrast,49'.split(','));
    }).toThrowError(/Sharpen be between 50 and 399/);
    expect(() => {
        action.validate('contrast,400'.split(','));
    }).toThrowError(/Sharpen be between 50 and 399/);
    expect(() => {
        action.validate('contrast,100'.split(','));
    });
    expect(() => {
        action.validate('contrast,60'.split(','));
    });
});
test('quality action', async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const action = new sharpen_1.SharpenAction();
    await action.process(ctx, 'sharpen,100'.split(','));
    const { info } = await ctx.image.toBuffer({ resolveWithObject: true });
    expect(info.format).toBe(sharp.format.jpeg.id);
});
test('quality action', async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const action = new sharpen_1.SharpenAction();
    await action.process(ctx, 'sharpen,60'.split(','));
    const { info } = await ctx.image.toBuffer({ resolveWithObject: true });
    expect(info.format).toBe(sharp.format.jpeg.id);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcnBlbi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC9wcm9jZXNzb3IvaW1hZ2Uvc2hhcnBlbi50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQStCO0FBQy9CLGtFQUFxRTtBQUNyRSxtQ0FBZ0M7QUFFaEMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUNuQyxNQUFNLE1BQU0sR0FBRyxJQUFJLHVCQUFhLEVBQUUsQ0FBQztJQUNuQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN4RCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3JCLE9BQU8sRUFBRSxFQUFFO0tBQ1osQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNWLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO0lBRXpELE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDVixNQUFNLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsdUNBQXVDLENBQUMsQ0FBQztJQUd6RCxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLCtCQUErQixDQUFDLENBQUM7SUFHakQsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNWLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0lBRWpELE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDVixNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsK0JBQStCLENBQUMsQ0FBQztJQUVqRCxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUdILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNoQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUEsYUFBSyxFQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksdUJBQWEsRUFBRSxDQUFDO0lBQ25DLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUV2RSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqRCxDQUFDLENBQUMsQ0FBQztBQUdILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNoQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUEsYUFBSyxFQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksdUJBQWEsRUFBRSxDQUFDO0lBQ25DLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUV2RSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqRCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHNoYXJwIGZyb20gJ3NoYXJwJztcbmltcG9ydCB7IFNoYXJwZW5BY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9zcmMvcHJvY2Vzc29yL2ltYWdlL3NoYXJwZW4nO1xuaW1wb3J0IHsgbWtjdHggfSBmcm9tICcuL3V0aWxzJztcblxudGVzdCgncXVhbGl0eSBhY3Rpb24gdmFsaWRhdGUnLCAoKSA9PiB7XG4gIGNvbnN0IGFjdGlvbiA9IG5ldyBTaGFycGVuQWN0aW9uKCk7XG4gIGNvbnN0IHBhcmFtMSA9IGFjdGlvbi52YWxpZGF0ZSgnc2hhcnBlbiw1MCcuc3BsaXQoJywnKSk7XG4gIGV4cGVjdChwYXJhbTEpLnRvRXF1YWwoe1xuICAgIHNoYXJwZW46IDUwLFxuICB9KTtcblxuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgnc2hhcnBlbicuc3BsaXQoJywnKSk7XG4gIH0pLnRvVGhyb3dFcnJvcigvU2hhcnBlbiBwYXJhbSBlcnJvciwgZS5nOiBzaGFycGVuLDEwMC8pO1xuXG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgYWN0aW9uLnZhbGlkYXRlKCdzaGFycGVuLHh4LDIyJy5zcGxpdCgnLCcpKTtcbiAgfSkudG9UaHJvd0Vycm9yKC9TaGFycGVuIHBhcmFtIGVycm9yLCBlLmc6IHNoYXJwZW4sMTAwLyk7XG5cblxuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgnc2hhcnBlbiwyMicuc3BsaXQoJywnKSk7XG4gIH0pLnRvVGhyb3dFcnJvcigvU2hhcnBlbiBiZSBiZXR3ZWVuIDUwIGFuZCAzOTkvKTtcblxuXG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgYWN0aW9uLnZhbGlkYXRlKCdjb250cmFzdCw0OScuc3BsaXQoJywnKSk7XG4gIH0pLnRvVGhyb3dFcnJvcigvU2hhcnBlbiBiZSBiZXR3ZWVuIDUwIGFuZCAzOTkvKTtcblxuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgnY29udHJhc3QsNDAwJy5zcGxpdCgnLCcpKTtcbiAgfSkudG9UaHJvd0Vycm9yKC9TaGFycGVuIGJlIGJldHdlZW4gNTAgYW5kIDM5OS8pO1xuXG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgYWN0aW9uLnZhbGlkYXRlKCdjb250cmFzdCwxMDAnLnNwbGl0KCcsJykpO1xuICB9KTtcblxuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgnY29udHJhc3QsNjAnLnNwbGl0KCcsJykpO1xuICB9KTtcbn0pO1xuXG5cbnRlc3QoJ3F1YWxpdHkgYWN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjdHggPSBhd2FpdCBta2N0eCgnZXhhbXBsZS5qcGcnKTtcbiAgY29uc3QgYWN0aW9uID0gbmV3IFNoYXJwZW5BY3Rpb24oKTtcbiAgYXdhaXQgYWN0aW9uLnByb2Nlc3MoY3R4LCAnc2hhcnBlbiwxMDAnLnNwbGl0KCcsJykpO1xuICBjb25zdCB7IGluZm8gfSA9IGF3YWl0IGN0eC5pbWFnZS50b0J1ZmZlcih7IHJlc29sdmVXaXRoT2JqZWN0OiB0cnVlIH0pO1xuXG4gIGV4cGVjdChpbmZvLmZvcm1hdCkudG9CZShzaGFycC5mb3JtYXQuanBlZy5pZCk7XG59KTtcblxuXG50ZXN0KCdxdWFsaXR5IGFjdGlvbicsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgY3R4ID0gYXdhaXQgbWtjdHgoJ2V4YW1wbGUuanBnJyk7XG4gIGNvbnN0IGFjdGlvbiA9IG5ldyBTaGFycGVuQWN0aW9uKCk7XG4gIGF3YWl0IGFjdGlvbi5wcm9jZXNzKGN0eCwgJ3NoYXJwZW4sNjAnLnNwbGl0KCcsJykpO1xuICBjb25zdCB7IGluZm8gfSA9IGF3YWl0IGN0eC5pbWFnZS50b0J1ZmZlcih7IHJlc29sdmVXaXRoT2JqZWN0OiB0cnVlIH0pO1xuXG4gIGV4cGVjdChpbmZvLmZvcm1hdCkudG9CZShzaGFycC5mb3JtYXQuanBlZy5pZCk7XG59KTsiXX0=