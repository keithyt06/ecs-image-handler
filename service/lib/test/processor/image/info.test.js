"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const processor_1 = require("../../../src/processor");
const info_1 = require("../../../src/processor/image/info");
const utils_1 = require("./utils");
test('info action validate', () => {
    const action = new info_1.InfoAction();
    expect(() => {
        action.validate('info,-1'.split(','));
    }).toThrowError(/Info param error/);
    expect(() => {
        action.validate('infox'.split(','));
    }).toThrowError(/Info param error/);
    expect(() => {
        action.validate('info'.split(','));
    }).not.toThrowError(/Info param error/);
});
test('info action', async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const action = new info_1.InfoAction();
    await action.process(ctx, 'info'.split(','));
    expect(ctx.features[processor_1.Features.ReturnInfo]).toBeTruthy();
    expect(ctx.info).toEqual({
        FileSize: { value: '21839' },
        Format: { value: 'jpg' },
        ImageHeight: { value: '267' },
        ImageWidth: { value: '400' },
    });
});
test('info action on gif', async () => {
    const ctx = await (0, utils_1.mkctx)('example.gif');
    const action = new info_1.InfoAction();
    await action.process(ctx, 'info'.split(','));
    expect(ctx.features[processor_1.Features.ReturnInfo]).toBeTruthy();
    expect(ctx.info).toEqual({
        FileSize: { value: '21957' },
        Format: { value: 'gif' },
        ImageHeight: { value: '300' },
        ImageWidth: { value: '500' },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mby50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC9wcm9jZXNzb3IvaW1hZ2UvaW5mby50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0RBQWtEO0FBQ2xELDREQUErRDtBQUMvRCxtQ0FBZ0M7QUFFaEMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtJQUNoQyxNQUFNLE1BQU0sR0FBRyxJQUFJLGlCQUFVLEVBQUUsQ0FBQztJQUVoQyxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFFcEMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNWLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBRXBDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDVixNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFDMUMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQzdCLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxhQUFLLEVBQUMsYUFBYSxDQUFDLENBQUM7SUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxpQkFBVSxFQUFFLENBQUM7SUFDaEMsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFN0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsb0JBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3ZELE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3ZCLFFBQVEsRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUU7UUFDNUIsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtRQUN4QixXQUFXLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO1FBQzdCLFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7S0FDN0IsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDcEMsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLGFBQUssRUFBQyxhQUFhLENBQUMsQ0FBQztJQUN2QyxNQUFNLE1BQU0sR0FBRyxJQUFJLGlCQUFVLEVBQUUsQ0FBQztJQUNoQyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUU3QyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxvQkFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdkQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDdkIsUUFBUSxFQUFFLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRTtRQUM1QixNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO1FBQ3hCLFdBQVcsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUU7UUFDN0IsVUFBVSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtLQUM3QixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZlYXR1cmVzIH0gZnJvbSAnLi4vLi4vLi4vc3JjL3Byb2Nlc3Nvcic7XG5pbXBvcnQgeyBJbmZvQWN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vc3JjL3Byb2Nlc3Nvci9pbWFnZS9pbmZvJztcbmltcG9ydCB7IG1rY3R4IH0gZnJvbSAnLi91dGlscyc7XG5cbnRlc3QoJ2luZm8gYWN0aW9uIHZhbGlkYXRlJywgKCkgPT4ge1xuICBjb25zdCBhY3Rpb24gPSBuZXcgSW5mb0FjdGlvbigpO1xuXG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgYWN0aW9uLnZhbGlkYXRlKCdpbmZvLC0xJy5zcGxpdCgnLCcpKTtcbiAgfSkudG9UaHJvd0Vycm9yKC9JbmZvIHBhcmFtIGVycm9yLyk7XG5cbiAgZXhwZWN0KCgpID0+IHtcbiAgICBhY3Rpb24udmFsaWRhdGUoJ2luZm94Jy5zcGxpdCgnLCcpKTtcbiAgfSkudG9UaHJvd0Vycm9yKC9JbmZvIHBhcmFtIGVycm9yLyk7XG5cbiAgZXhwZWN0KCgpID0+IHtcbiAgICBhY3Rpb24udmFsaWRhdGUoJ2luZm8nLnNwbGl0KCcsJykpO1xuICB9KS5ub3QudG9UaHJvd0Vycm9yKC9JbmZvIHBhcmFtIGVycm9yLyk7XG59KTtcblxudGVzdCgnaW5mbyBhY3Rpb24nLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGN0eCA9IGF3YWl0IG1rY3R4KCdleGFtcGxlLmpwZycpO1xuICBjb25zdCBhY3Rpb24gPSBuZXcgSW5mb0FjdGlvbigpO1xuICBhd2FpdCBhY3Rpb24ucHJvY2VzcyhjdHgsICdpbmZvJy5zcGxpdCgnLCcpKTtcblxuICBleHBlY3QoY3R4LmZlYXR1cmVzW0ZlYXR1cmVzLlJldHVybkluZm9dKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdChjdHguaW5mbykudG9FcXVhbCh7XG4gICAgRmlsZVNpemU6IHsgdmFsdWU6ICcyMTgzOScgfSxcbiAgICBGb3JtYXQ6IHsgdmFsdWU6ICdqcGcnIH0sXG4gICAgSW1hZ2VIZWlnaHQ6IHsgdmFsdWU6ICcyNjcnIH0sXG4gICAgSW1hZ2VXaWR0aDogeyB2YWx1ZTogJzQwMCcgfSxcbiAgfSk7XG59KTtcblxudGVzdCgnaW5mbyBhY3Rpb24gb24gZ2lmJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjdHggPSBhd2FpdCBta2N0eCgnZXhhbXBsZS5naWYnKTtcbiAgY29uc3QgYWN0aW9uID0gbmV3IEluZm9BY3Rpb24oKTtcbiAgYXdhaXQgYWN0aW9uLnByb2Nlc3MoY3R4LCAnaW5mbycuc3BsaXQoJywnKSk7XG5cbiAgZXhwZWN0KGN0eC5mZWF0dXJlc1tGZWF0dXJlcy5SZXR1cm5JbmZvXSkudG9CZVRydXRoeSgpO1xuICBleHBlY3QoY3R4LmluZm8pLnRvRXF1YWwoe1xuICAgIEZpbGVTaXplOiB7IHZhbHVlOiAnMjE5NTcnIH0sXG4gICAgRm9ybWF0OiB7IHZhbHVlOiAnZ2lmJyB9LFxuICAgIEltYWdlSGVpZ2h0OiB7IHZhbHVlOiAnMzAwJyB9LFxuICAgIEltYWdlV2lkdGg6IHsgdmFsdWU6ICc1MDAnIH0sXG4gIH0pO1xufSk7Il19