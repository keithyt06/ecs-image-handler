"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// import * as sharp from 'sharp';
const threshold_1 = require("../../../src/processor/image/threshold");
const utils_1 = require("./utils");
test(`${threshold_1.ThresholdAction.name} action validate`, () => {
    const action = new threshold_1.ThresholdAction();
    const param = action.validate('threshold,100'.split(','));
    expect(param.threshold).toBe(100);
    expect(() => {
        action.validate('threshold'.split(','));
    }).toThrow(/Invalid/);
    expect(() => {
        action.validate('threshold,-1'.split(','));
    }).toThrow(/Invalid.*greater than zero/);
});
test(`${threshold_1.ThresholdAction.name} beforeProcess mask disabled`, async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg', ['threshold,23000']);
    const action = new threshold_1.ThresholdAction();
    await action.beforeProcess(ctx, 'threshold,23000'.split(','), 0);
    expect(ctx.mask.isDisabled(0)).toBeTruthy();
});
test(`${threshold_1.ThresholdAction.name} beforeProcess mask enabled`, async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg', ['threshold,100']);
    const action = new threshold_1.ThresholdAction();
    await action.beforeProcess(ctx, 'threshold,100'.split(','), 0);
    expect(ctx.mask.isEnabled(0)).toBeTruthy();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyZXNob2xkLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L3Byb2Nlc3Nvci9pbWFnZS90aHJlc2hvbGQudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtDQUFrQztBQUNsQyxzRUFBeUU7QUFDekUsbUNBQWdDO0FBRWhDLElBQUksQ0FBQyxHQUFHLDJCQUFlLENBQUMsSUFBSSxrQkFBa0IsRUFBRSxHQUFHLEVBQUU7SUFDbkQsTUFBTSxNQUFNLEdBQUcsSUFBSSwyQkFBZSxFQUFFLENBQUM7SUFDckMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDMUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbEMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNWLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUV0QixNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLDRCQUE0QixDQUFDLENBQUM7QUFFM0MsQ0FBQyxDQUFDLENBQUM7QUFHSCxJQUFJLENBQUMsR0FBRywyQkFBZSxDQUFDLElBQUksOEJBQThCLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDckUsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLGFBQUssRUFBQyxhQUFhLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7SUFDNUQsTUFBTSxNQUFNLEdBQUcsSUFBSSwyQkFBZSxFQUFFLENBQUM7SUFFckMsTUFBTSxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDakUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDOUMsQ0FBQyxDQUFDLENBQUM7QUFHSCxJQUFJLENBQUMsR0FBRywyQkFBZSxDQUFDLElBQUksNkJBQTZCLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDcEUsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLGFBQUssRUFBQyxhQUFhLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0lBQzFELE1BQU0sTUFBTSxHQUFHLElBQUksMkJBQWUsRUFBRSxDQUFDO0lBRXJDLE1BQU0sTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsZUFBZSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvRCxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztBQUM3QyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCAqIGFzIHNoYXJwIGZyb20gJ3NoYXJwJztcbmltcG9ydCB7IFRocmVzaG9sZEFjdGlvbiB9IGZyb20gJy4uLy4uLy4uL3NyYy9wcm9jZXNzb3IvaW1hZ2UvdGhyZXNob2xkJztcbmltcG9ydCB7IG1rY3R4IH0gZnJvbSAnLi91dGlscyc7XG5cbnRlc3QoYCR7VGhyZXNob2xkQWN0aW9uLm5hbWV9IGFjdGlvbiB2YWxpZGF0ZWAsICgpID0+IHtcbiAgY29uc3QgYWN0aW9uID0gbmV3IFRocmVzaG9sZEFjdGlvbigpO1xuICBjb25zdCBwYXJhbSA9IGFjdGlvbi52YWxpZGF0ZSgndGhyZXNob2xkLDEwMCcuc3BsaXQoJywnKSk7XG4gIGV4cGVjdChwYXJhbS50aHJlc2hvbGQpLnRvQmUoMTAwKTtcblxuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgndGhyZXNob2xkJy5zcGxpdCgnLCcpKTtcbiAgfSkudG9UaHJvdygvSW52YWxpZC8pO1xuXG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgYWN0aW9uLnZhbGlkYXRlKCd0aHJlc2hvbGQsLTEnLnNwbGl0KCcsJykpO1xuICB9KS50b1Rocm93KC9JbnZhbGlkLipncmVhdGVyIHRoYW4gemVyby8pO1xuXG59KTtcblxuXG50ZXN0KGAke1RocmVzaG9sZEFjdGlvbi5uYW1lfSBiZWZvcmVQcm9jZXNzIG1hc2sgZGlzYWJsZWRgLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGN0eCA9IGF3YWl0IG1rY3R4KCdleGFtcGxlLmpwZycsIFsndGhyZXNob2xkLDIzMDAwJ10pO1xuICBjb25zdCBhY3Rpb24gPSBuZXcgVGhyZXNob2xkQWN0aW9uKCk7XG5cbiAgYXdhaXQgYWN0aW9uLmJlZm9yZVByb2Nlc3MoY3R4LCAndGhyZXNob2xkLDIzMDAwJy5zcGxpdCgnLCcpLCAwKTtcbiAgZXhwZWN0KGN0eC5tYXNrLmlzRGlzYWJsZWQoMCkpLnRvQmVUcnV0aHkoKTtcbn0pO1xuXG5cbnRlc3QoYCR7VGhyZXNob2xkQWN0aW9uLm5hbWV9IGJlZm9yZVByb2Nlc3MgbWFzayBlbmFibGVkYCwgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjdHggPSBhd2FpdCBta2N0eCgnZXhhbXBsZS5qcGcnLCBbJ3RocmVzaG9sZCwxMDAnXSk7XG4gIGNvbnN0IGFjdGlvbiA9IG5ldyBUaHJlc2hvbGRBY3Rpb24oKTtcblxuICBhd2FpdCBhY3Rpb24uYmVmb3JlUHJvY2VzcyhjdHgsICd0aHJlc2hvbGQsMTAwJy5zcGxpdCgnLCcpLCAwKTtcbiAgZXhwZWN0KGN0eC5tYXNrLmlzRW5hYmxlZCgwKSkudG9CZVRydXRoeSgpO1xufSk7XG4iXX0=