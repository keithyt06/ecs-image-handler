"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sharp = require("sharp");
const rotate_1 = require("../../../src/processor/image/rotate");
const utils_1 = require("./utils");
test('quality action validate', () => {
    const action = new rotate_1.RotateAction();
    const param1 = action.validate('rotate,90'.split(','));
    expect(param1).toEqual({
        degree: 90,
    });
    expect(() => {
        action.validate('rotate'.split(','));
    }).toThrowError(/Rotate param error, e.g: rotate,90/);
    expect(() => {
        action.validate('rotate,33,abc'.split(','));
    }).toThrowError(/Rotate param error, e.g: rotate,90/);
    expect(() => {
        action.validate('rotate,abc'.split(','));
    }).toThrowError(/Rotate must be between 0 and 360/);
    expect(() => {
        action.validate('rotate,361'.split(','));
    }).toThrowError(/Rotate must be between 0 and 360/);
    expect(() => {
        action.validate('rotate,-1'.split(','));
    }).toThrowError(/Rotate must be between 0 and 360/);
});
test('quality action', async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const action = new rotate_1.RotateAction();
    await action.process(ctx, 'interlace,1'.split(','));
    const { info } = await ctx.image.toBuffer({ resolveWithObject: true });
    expect(info.format).toBe(sharp.format.jpeg.id);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm90YXRlLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L3Byb2Nlc3Nvci9pbWFnZS9yb3RhdGUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUErQjtBQUMvQixnRUFBbUU7QUFDbkUsbUNBQWdDO0FBRWhDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7SUFDbkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxxQkFBWSxFQUFFLENBQUM7SUFDbEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNyQixNQUFNLEVBQUUsRUFBRTtLQUNYLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDVixNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUN2QyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsb0NBQW9DLENBQUMsQ0FBQztJQUd0RCxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLG9DQUFvQyxDQUFDLENBQUM7SUFFdEQsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNWLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0lBQ3BELE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDVixNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsa0NBQWtDLENBQUMsQ0FBQztJQUNwRCxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLGtDQUFrQyxDQUFDLENBQUM7QUFFdEQsQ0FBQyxDQUFDLENBQUM7QUFHSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDaEMsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLGFBQUssRUFBQyxhQUFhLENBQUMsQ0FBQztJQUN2QyxNQUFNLE1BQU0sR0FBRyxJQUFJLHFCQUFZLEVBQUUsQ0FBQztJQUNsQyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdkUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzaGFycCBmcm9tICdzaGFycCc7XG5pbXBvcnQgeyBSb3RhdGVBY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9zcmMvcHJvY2Vzc29yL2ltYWdlL3JvdGF0ZSc7XG5pbXBvcnQgeyBta2N0eCB9IGZyb20gJy4vdXRpbHMnO1xuXG50ZXN0KCdxdWFsaXR5IGFjdGlvbiB2YWxpZGF0ZScsICgpID0+IHtcbiAgY29uc3QgYWN0aW9uID0gbmV3IFJvdGF0ZUFjdGlvbigpO1xuICBjb25zdCBwYXJhbTEgPSBhY3Rpb24udmFsaWRhdGUoJ3JvdGF0ZSw5MCcuc3BsaXQoJywnKSk7XG4gIGV4cGVjdChwYXJhbTEpLnRvRXF1YWwoe1xuICAgIGRlZ3JlZTogOTAsXG4gIH0pO1xuXG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgYWN0aW9uLnZhbGlkYXRlKCdyb3RhdGUnLnNwbGl0KCcsJykpO1xuICB9KS50b1Rocm93RXJyb3IoL1JvdGF0ZSBwYXJhbSBlcnJvciwgZS5nOiByb3RhdGUsOTAvKTtcblxuXG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgYWN0aW9uLnZhbGlkYXRlKCdyb3RhdGUsMzMsYWJjJy5zcGxpdCgnLCcpKTtcbiAgfSkudG9UaHJvd0Vycm9yKC9Sb3RhdGUgcGFyYW0gZXJyb3IsIGUuZzogcm90YXRlLDkwLyk7XG5cbiAgZXhwZWN0KCgpID0+IHtcbiAgICBhY3Rpb24udmFsaWRhdGUoJ3JvdGF0ZSxhYmMnLnNwbGl0KCcsJykpO1xuICB9KS50b1Rocm93RXJyb3IoL1JvdGF0ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMzYwLyk7XG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgYWN0aW9uLnZhbGlkYXRlKCdyb3RhdGUsMzYxJy5zcGxpdCgnLCcpKTtcbiAgfSkudG9UaHJvd0Vycm9yKC9Sb3RhdGUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDM2MC8pO1xuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgncm90YXRlLC0xJy5zcGxpdCgnLCcpKTtcbiAgfSkudG9UaHJvd0Vycm9yKC9Sb3RhdGUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDM2MC8pO1xuXG59KTtcblxuXG50ZXN0KCdxdWFsaXR5IGFjdGlvbicsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgY3R4ID0gYXdhaXQgbWtjdHgoJ2V4YW1wbGUuanBnJyk7XG4gIGNvbnN0IGFjdGlvbiA9IG5ldyBSb3RhdGVBY3Rpb24oKTtcbiAgYXdhaXQgYWN0aW9uLnByb2Nlc3MoY3R4LCAnaW50ZXJsYWNlLDEnLnNwbGl0KCcsJykpO1xuICBjb25zdCB7IGluZm8gfSA9IGF3YWl0IGN0eC5pbWFnZS50b0J1ZmZlcih7IHJlc29sdmVXaXRoT2JqZWN0OiB0cnVlIH0pO1xuICBleHBlY3QoaW5mby5mb3JtYXQpLnRvQmUoc2hhcnAuZm9ybWF0LmpwZWcuaWQpO1xufSk7XG4iXX0=