"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sharp = require("sharp");
const blur_1 = require("../../../src/processor/image/blur");
const utils_1 = require("./utils");
test('quality action validate', () => {
    const action = new blur_1.BlurAction();
    const param1 = action.validate('blur,r_3,s_2'.split(','));
    expect(param1).toEqual({
        r: 3,
        s: 2,
    });
    expect(() => {
        action.validate('blur'.split(','));
    }).toThrowError(/blur param error, e.g: blur,r_3,s_2/);
    expect(() => {
        action.validate('blur,xx'.split(','));
    }).toThrowError(/Unkown param/);
    expect(() => {
        action.validate('blur,r_-1'.split(','));
    }).toThrowError(/Blur param 'r' must be between 0 and 50/);
    expect(() => {
        action.validate('blur,s_51'.split(','));
    }).toThrowError(/Blur param 's' must be between 0 and 50/);
    expect(() => {
        action.validate('blur,s_1111'.split(','));
    }).toThrowError(/Blur param 's' must be between 0 and 50/);
});
test('quality action', async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const action = new blur_1.BlurAction();
    await action.process(ctx, 'blur,r_5,s_2'.split(','));
    const { info } = await ctx.image.toBuffer({ resolveWithObject: true });
    expect(info.format).toBe(sharp.format.jpeg.id);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmx1ci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC9wcm9jZXNzb3IvaW1hZ2UvYmx1ci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQStCO0FBQy9CLDREQUErRDtBQUMvRCxtQ0FBZ0M7QUFFaEMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUNuQyxNQUFNLE1BQU0sR0FBRyxJQUFJLGlCQUFVLEVBQUUsQ0FBQztJQUNoQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUUxRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3JCLENBQUMsRUFBRSxDQUFDO1FBQ0osQ0FBQyxFQUFFLENBQUM7S0FDTCxDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLHFDQUFxQyxDQUFDLENBQUM7SUFDdkQsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNWLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoQyxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLHlDQUF5QyxDQUFDLENBQUM7SUFDM0QsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNWLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO0lBQzNELE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDVixNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMseUNBQXlDLENBQUMsQ0FBQztBQUM3RCxDQUFDLENBQUMsQ0FBQztBQUdILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNoQyxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUEsYUFBSyxFQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksaUJBQVUsRUFBRSxDQUFDO0lBQ2hDLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUV2RSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqRCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHNoYXJwIGZyb20gJ3NoYXJwJztcbmltcG9ydCB7IEJsdXJBY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9zcmMvcHJvY2Vzc29yL2ltYWdlL2JsdXInO1xuaW1wb3J0IHsgbWtjdHggfSBmcm9tICcuL3V0aWxzJztcblxudGVzdCgncXVhbGl0eSBhY3Rpb24gdmFsaWRhdGUnLCAoKSA9PiB7XG4gIGNvbnN0IGFjdGlvbiA9IG5ldyBCbHVyQWN0aW9uKCk7XG4gIGNvbnN0IHBhcmFtMSA9IGFjdGlvbi52YWxpZGF0ZSgnYmx1cixyXzMsc18yJy5zcGxpdCgnLCcpKTtcblxuICBleHBlY3QocGFyYW0xKS50b0VxdWFsKHtcbiAgICByOiAzLFxuICAgIHM6IDIsXG4gIH0pO1xuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgnYmx1cicuc3BsaXQoJywnKSk7XG4gIH0pLnRvVGhyb3dFcnJvcigvYmx1ciBwYXJhbSBlcnJvciwgZS5nOiBibHVyLHJfMyxzXzIvKTtcbiAgZXhwZWN0KCgpID0+IHtcbiAgICBhY3Rpb24udmFsaWRhdGUoJ2JsdXIseHgnLnNwbGl0KCcsJykpO1xuICB9KS50b1Rocm93RXJyb3IoL1Vua293biBwYXJhbS8pO1xuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgnYmx1cixyXy0xJy5zcGxpdCgnLCcpKTtcbiAgfSkudG9UaHJvd0Vycm9yKC9CbHVyIHBhcmFtICdyJyBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNTAvKTtcbiAgZXhwZWN0KCgpID0+IHtcbiAgICBhY3Rpb24udmFsaWRhdGUoJ2JsdXIsc181MScuc3BsaXQoJywnKSk7XG4gIH0pLnRvVGhyb3dFcnJvcigvQmx1ciBwYXJhbSAncycgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDUwLyk7XG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgYWN0aW9uLnZhbGlkYXRlKCdibHVyLHNfMTExMScuc3BsaXQoJywnKSk7XG4gIH0pLnRvVGhyb3dFcnJvcigvQmx1ciBwYXJhbSAncycgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDUwLyk7XG59KTtcblxuXG50ZXN0KCdxdWFsaXR5IGFjdGlvbicsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgY3R4ID0gYXdhaXQgbWtjdHgoJ2V4YW1wbGUuanBnJyk7XG4gIGNvbnN0IGFjdGlvbiA9IG5ldyBCbHVyQWN0aW9uKCk7XG4gIGF3YWl0IGFjdGlvbi5wcm9jZXNzKGN0eCwgJ2JsdXIscl81LHNfMicuc3BsaXQoJywnKSk7XG4gIGNvbnN0IHsgaW5mbyB9ID0gYXdhaXQgY3R4LmltYWdlLnRvQnVmZmVyKHsgcmVzb2x2ZVdpdGhPYmplY3Q6IHRydWUgfSk7XG5cbiAgZXhwZWN0KGluZm8uZm9ybWF0KS50b0JlKHNoYXJwLmZvcm1hdC5qcGVnLmlkKTtcbn0pOyJdfQ==