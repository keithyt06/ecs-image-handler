"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sharp = require("sharp");
const format_1 = require("../../../src/processor/image/format");
const jpeg = require("../../../src/processor/image/jpeg");
const quality_1 = require("../../../src/processor/image/quality");
const utils_1 = require("./utils");
test('quality action validate', () => {
    const action = new quality_1.QualityAction();
    const param1 = action.validate('quality,q_99,Q_77,,'.split(','));
    expect(param1).toEqual({
        q: 99,
        Q: 77,
    });
    expect(() => {
        action.validate('quality,xx'.split(','));
    }).toThrowError(/Unkown param/);
    expect(() => {
        action.validate('quality,q_0'.split(','));
    }).toThrowError(/Quality must be between 1 and 100/);
    expect(() => {
        action.validate('quality,q_-1'.split(','));
    }).toThrowError(/Quality must be between 1 and 100/);
    expect(() => {
        action.validate('quality,q_1111'.split(','));
    }).toThrowError(/Quality must be between 1 and 100/);
});
test('absolute quality action', async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const action = new quality_1.QualityAction();
    await action.process(ctx, 'quality,Q_1'.split(','));
    const { info } = await ctx.image.toBuffer({ resolveWithObject: true });
    expect(info.format).toBe(sharp.format.jpeg.id);
});
test('relative quality action', async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const action = new quality_1.QualityAction();
    await action.process(ctx, 'quality,q_50'.split(','));
    const { data, info } = await ctx.image.toBuffer({ resolveWithObject: true });
    expect(info.format).toBe(sharp.format.jpeg.id);
    expect(jpeg.decode(data).quality).toBe(40);
});
test('format to webp before quality action', async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const formatAction = new format_1.FormatAction();
    await formatAction.process(ctx, 'format,webp'.split(','));
    const qualityAction = new quality_1.QualityAction();
    await qualityAction.process(ctx, 'quality,q_50'.split(','));
    const { info } = await ctx.image.toBuffer({ resolveWithObject: true });
    expect(info.format).toBe(sharp.format.webp.id);
});
test('estimate image quality', async () => {
    const buffer = (await utils_1.fixtureStore.get('example.jpg')).buffer;
    const quality = jpeg.decode(buffer).quality;
    expect(quality).toBe(82);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVhbGl0eS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC9wcm9jZXNzb3IvaW1hZ2UvcXVhbGl0eS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQStCO0FBQy9CLGdFQUFtRTtBQUNuRSwwREFBMEQ7QUFDMUQsa0VBQXFFO0FBQ3JFLG1DQUE4QztBQUU5QyxJQUFJLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO0lBQ25DLE1BQU0sTUFBTSxHQUFHLElBQUksdUJBQWEsRUFBRSxDQUFDO0lBQ25DLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFakUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNyQixDQUFDLEVBQUUsRUFBRTtRQUNMLENBQUMsRUFBRSxFQUFFO0tBQ04sQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNWLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNoQyxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLG1DQUFtQyxDQUFDLENBQUM7SUFDckQsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNWLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDVixNQUFNLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0FBQ3ZELENBQUMsQ0FBQyxDQUFDO0FBR0gsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3pDLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxhQUFLLEVBQUMsYUFBYSxDQUFDLENBQUM7SUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSx1QkFBYSxFQUFFLENBQUM7SUFDbkMsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxhQUFhLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXZFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2pELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3pDLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxhQUFLLEVBQUMsYUFBYSxDQUFDLENBQUM7SUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSx1QkFBYSxFQUFFLENBQUM7SUFDbkMsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDckQsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUU3RSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUvQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDN0MsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsc0NBQXNDLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDdEQsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLGFBQUssRUFBQyxhQUFhLENBQUMsQ0FBQztJQUN2QyxNQUFNLFlBQVksR0FBRyxJQUFJLHFCQUFZLEVBQUUsQ0FBQztJQUN4QyxNQUFNLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMxRCxNQUFNLGFBQWEsR0FBRyxJQUFJLHVCQUFhLEVBQUUsQ0FBQztJQUMxQyxNQUFNLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLGNBQWMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM1RCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdkUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDeEMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxNQUFNLG9CQUFZLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQzlELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO0lBRTVDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzaGFycCBmcm9tICdzaGFycCc7XG5pbXBvcnQgeyBGb3JtYXRBY3Rpb24gfSBmcm9tICcuLi8uLi8uLi9zcmMvcHJvY2Vzc29yL2ltYWdlL2Zvcm1hdCc7XG5pbXBvcnQgKiBhcyBqcGVnIGZyb20gJy4uLy4uLy4uL3NyYy9wcm9jZXNzb3IvaW1hZ2UvanBlZyc7XG5pbXBvcnQgeyBRdWFsaXR5QWN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vc3JjL3Byb2Nlc3Nvci9pbWFnZS9xdWFsaXR5JztcbmltcG9ydCB7IGZpeHR1cmVTdG9yZSwgbWtjdHggfSBmcm9tICcuL3V0aWxzJztcblxudGVzdCgncXVhbGl0eSBhY3Rpb24gdmFsaWRhdGUnLCAoKSA9PiB7XG4gIGNvbnN0IGFjdGlvbiA9IG5ldyBRdWFsaXR5QWN0aW9uKCk7XG4gIGNvbnN0IHBhcmFtMSA9IGFjdGlvbi52YWxpZGF0ZSgncXVhbGl0eSxxXzk5LFFfNzcsLCcuc3BsaXQoJywnKSk7XG5cbiAgZXhwZWN0KHBhcmFtMSkudG9FcXVhbCh7XG4gICAgcTogOTksXG4gICAgUTogNzcsXG4gIH0pO1xuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgncXVhbGl0eSx4eCcuc3BsaXQoJywnKSk7XG4gIH0pLnRvVGhyb3dFcnJvcigvVW5rb3duIHBhcmFtLyk7XG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgYWN0aW9uLnZhbGlkYXRlKCdxdWFsaXR5LHFfMCcuc3BsaXQoJywnKSk7XG4gIH0pLnRvVGhyb3dFcnJvcigvUXVhbGl0eSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgMTAwLyk7XG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgYWN0aW9uLnZhbGlkYXRlKCdxdWFsaXR5LHFfLTEnLnNwbGl0KCcsJykpO1xuICB9KS50b1Rocm93RXJyb3IoL1F1YWxpdHkgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwMC8pO1xuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgncXVhbGl0eSxxXzExMTEnLnNwbGl0KCcsJykpO1xuICB9KS50b1Rocm93RXJyb3IoL1F1YWxpdHkgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwMC8pO1xufSk7XG5cblxudGVzdCgnYWJzb2x1dGUgcXVhbGl0eSBhY3Rpb24nLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGN0eCA9IGF3YWl0IG1rY3R4KCdleGFtcGxlLmpwZycpO1xuICBjb25zdCBhY3Rpb24gPSBuZXcgUXVhbGl0eUFjdGlvbigpO1xuICBhd2FpdCBhY3Rpb24ucHJvY2VzcyhjdHgsICdxdWFsaXR5LFFfMScuc3BsaXQoJywnKSk7XG4gIGNvbnN0IHsgaW5mbyB9ID0gYXdhaXQgY3R4LmltYWdlLnRvQnVmZmVyKHsgcmVzb2x2ZVdpdGhPYmplY3Q6IHRydWUgfSk7XG5cbiAgZXhwZWN0KGluZm8uZm9ybWF0KS50b0JlKHNoYXJwLmZvcm1hdC5qcGVnLmlkKTtcbn0pO1xuXG50ZXN0KCdyZWxhdGl2ZSBxdWFsaXR5IGFjdGlvbicsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgY3R4ID0gYXdhaXQgbWtjdHgoJ2V4YW1wbGUuanBnJyk7XG4gIGNvbnN0IGFjdGlvbiA9IG5ldyBRdWFsaXR5QWN0aW9uKCk7XG4gIGF3YWl0IGFjdGlvbi5wcm9jZXNzKGN0eCwgJ3F1YWxpdHkscV81MCcuc3BsaXQoJywnKSk7XG4gIGNvbnN0IHsgZGF0YSwgaW5mbyB9ID0gYXdhaXQgY3R4LmltYWdlLnRvQnVmZmVyKHsgcmVzb2x2ZVdpdGhPYmplY3Q6IHRydWUgfSk7XG5cbiAgZXhwZWN0KGluZm8uZm9ybWF0KS50b0JlKHNoYXJwLmZvcm1hdC5qcGVnLmlkKTtcblxuICBleHBlY3QoanBlZy5kZWNvZGUoZGF0YSkucXVhbGl0eSkudG9CZSg0MCk7XG59KTtcblxudGVzdCgnZm9ybWF0IHRvIHdlYnAgYmVmb3JlIHF1YWxpdHkgYWN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjdHggPSBhd2FpdCBta2N0eCgnZXhhbXBsZS5qcGcnKTtcbiAgY29uc3QgZm9ybWF0QWN0aW9uID0gbmV3IEZvcm1hdEFjdGlvbigpO1xuICBhd2FpdCBmb3JtYXRBY3Rpb24ucHJvY2VzcyhjdHgsICdmb3JtYXQsd2VicCcuc3BsaXQoJywnKSk7XG4gIGNvbnN0IHF1YWxpdHlBY3Rpb24gPSBuZXcgUXVhbGl0eUFjdGlvbigpO1xuICBhd2FpdCBxdWFsaXR5QWN0aW9uLnByb2Nlc3MoY3R4LCAncXVhbGl0eSxxXzUwJy5zcGxpdCgnLCcpKTtcbiAgY29uc3QgeyBpbmZvIH0gPSBhd2FpdCBjdHguaW1hZ2UudG9CdWZmZXIoeyByZXNvbHZlV2l0aE9iamVjdDogdHJ1ZSB9KTtcbiAgZXhwZWN0KGluZm8uZm9ybWF0KS50b0JlKHNoYXJwLmZvcm1hdC53ZWJwLmlkKTtcbn0pO1xuXG50ZXN0KCdlc3RpbWF0ZSBpbWFnZSBxdWFsaXR5JywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBidWZmZXIgPSAoYXdhaXQgZml4dHVyZVN0b3JlLmdldCgnZXhhbXBsZS5qcGcnKSkuYnVmZmVyO1xuICBjb25zdCBxdWFsaXR5ID0ganBlZy5kZWNvZGUoYnVmZmVyKS5xdWFsaXR5O1xuXG4gIGV4cGVjdChxdWFsaXR5KS50b0JlKDgyKTtcbn0pOyJdfQ==