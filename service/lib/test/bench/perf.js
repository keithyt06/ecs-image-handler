"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const Benchmark = require("benchmark");
const sharp = require("sharp");
const imagemagick_1 = require("../../src/imagemagick");
const utils_1 = require("../processor/image/utils");
sharp.simd(true);
sharp.cache(false);
sharp.concurrency(os.cpus().length);
const suite = new Benchmark.Suite('sharp vs imagemagick');
suite
    .add('sharp', {
    defer: true,
    fn: async (deferred) => {
        const image = sharp((await utils_1.fixtureStore.get('example.jpg')).buffer);
        image
            .resize(200, 200, { fit: 'inside' })
            .blur(3)
            .jpeg({ quality: 80 });
        await image.toBuffer();
        deferred.resolve();
    },
})
    .add('imagemagick', {
    defer: true,
    fn: async (deferred) => {
        const buffer = (await utils_1.fixtureStore.get('example.jpg')).buffer;
        await (0, imagemagick_1.convert)(buffer, [
            '-resize', '200x200',
            '-blur', '3x3',
            '-quality', '80',
        ]);
        deferred.resolve();
    },
})
    .on('complete', () => {
    suite.each((each) => {
        console.log(each.name, precision(each.stats.mean * 1000) + ' ms', precision(each.hz) + ' ops/sec', each.stats.sample.length + ' samples');
    });
    console.log('Fastest is ' + suite.filter('fastest').map('name'));
})
    .run({ async: true });
function precision(v) {
    return Math.round(v * 100) / 100;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYmVuY2gvcGVyZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUF5QjtBQUN6Qix1Q0FBdUM7QUFDdkMsK0JBQStCO0FBQy9CLHVEQUFnRDtBQUNoRCxvREFBd0Q7QUFFeEQsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNqQixLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25CLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRXBDLE1BQU0sS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0FBRTFELEtBQUs7S0FDRixHQUFHLENBQUMsT0FBTyxFQUFFO0lBQ1osS0FBSyxFQUFFLElBQUk7SUFDWCxFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQWEsRUFBRSxFQUFFO1FBQzFCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLE1BQU0sb0JBQVksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwRSxLQUFLO2FBQ0YsTUFBTSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLENBQUM7YUFDbkMsSUFBSSxDQUFDLENBQUMsQ0FBQzthQUNQLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXpCLE1BQU0sS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRXZCLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNyQixDQUFDO0NBQ0YsQ0FBQztLQUNELEdBQUcsQ0FBQyxhQUFhLEVBQUU7SUFDbEIsS0FBSyxFQUFFLElBQUk7SUFDWCxFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQWEsRUFBRSxFQUFFO1FBQzFCLE1BQU0sTUFBTSxHQUFHLENBQUMsTUFBTSxvQkFBWSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUU5RCxNQUFNLElBQUEscUJBQU8sRUFBQyxNQUFNLEVBQUU7WUFDcEIsU0FBUyxFQUFFLFNBQVM7WUFDcEIsT0FBTyxFQUFFLEtBQUs7WUFDZCxVQUFVLEVBQUUsSUFBSTtTQUNqQixDQUFDLENBQUM7UUFFSCxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDckIsQ0FBQztDQUNGLENBQUM7S0FDRCxFQUFFLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtJQUNuQixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBZSxFQUFFLEVBQUU7UUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUNuQixTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsS0FBSyxFQUN6QyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsRUFDL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNuRSxDQUFDLENBQUM7S0FDRCxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUd4QixTQUFTLFNBQVMsQ0FBQyxDQUFTO0lBQzFCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQ25DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7XG5pbXBvcnQgKiBhcyBCZW5jaG1hcmsgZnJvbSAnYmVuY2htYXJrJztcbmltcG9ydCAqIGFzIHNoYXJwIGZyb20gJ3NoYXJwJztcbmltcG9ydCB7IGNvbnZlcnQgfSBmcm9tICcuLi8uLi9zcmMvaW1hZ2VtYWdpY2snO1xuaW1wb3J0IHsgZml4dHVyZVN0b3JlIH0gZnJvbSAnLi4vcHJvY2Vzc29yL2ltYWdlL3V0aWxzJztcblxuc2hhcnAuc2ltZCh0cnVlKTtcbnNoYXJwLmNhY2hlKGZhbHNlKTtcbnNoYXJwLmNvbmN1cnJlbmN5KG9zLmNwdXMoKS5sZW5ndGgpO1xuXG5jb25zdCBzdWl0ZSA9IG5ldyBCZW5jaG1hcmsuU3VpdGUoJ3NoYXJwIHZzIGltYWdlbWFnaWNrJyk7XG5cbnN1aXRlXG4gIC5hZGQoJ3NoYXJwJywge1xuICAgIGRlZmVyOiB0cnVlLFxuICAgIGZuOiBhc3luYyAoZGVmZXJyZWQ6IGFueSkgPT4ge1xuICAgICAgY29uc3QgaW1hZ2UgPSBzaGFycCgoYXdhaXQgZml4dHVyZVN0b3JlLmdldCgnZXhhbXBsZS5qcGcnKSkuYnVmZmVyKTtcbiAgICAgIGltYWdlXG4gICAgICAgIC5yZXNpemUoMjAwLCAyMDAsIHsgZml0OiAnaW5zaWRlJyB9KVxuICAgICAgICAuYmx1cigzKVxuICAgICAgICAuanBlZyh7IHF1YWxpdHk6IDgwIH0pO1xuXG4gICAgICBhd2FpdCBpbWFnZS50b0J1ZmZlcigpO1xuXG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgfSxcbiAgfSlcbiAgLmFkZCgnaW1hZ2VtYWdpY2snLCB7XG4gICAgZGVmZXI6IHRydWUsXG4gICAgZm46IGFzeW5jIChkZWZlcnJlZDogYW55KSA9PiB7XG4gICAgICBjb25zdCBidWZmZXIgPSAoYXdhaXQgZml4dHVyZVN0b3JlLmdldCgnZXhhbXBsZS5qcGcnKSkuYnVmZmVyO1xuXG4gICAgICBhd2FpdCBjb252ZXJ0KGJ1ZmZlciwgW1xuICAgICAgICAnLXJlc2l6ZScsICcyMDB4MjAwJyxcbiAgICAgICAgJy1ibHVyJywgJzN4MycsXG4gICAgICAgICctcXVhbGl0eScsICc4MCcsXG4gICAgICBdKTtcblxuICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgIH0sXG4gIH0pXG4gIC5vbignY29tcGxldGUnLCAoKSA9PiB7XG4gICAgc3VpdGUuZWFjaCgoZWFjaDogQmVuY2htYXJrKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhlYWNoLm5hbWUsXG4gICAgICAgIHByZWNpc2lvbihlYWNoLnN0YXRzLm1lYW4gKiAxMDAwKSArICcgbXMnLFxuICAgICAgICBwcmVjaXNpb24oZWFjaC5oeikgKyAnIG9wcy9zZWMnLFxuICAgICAgICBlYWNoLnN0YXRzLnNhbXBsZS5sZW5ndGggKyAnIHNhbXBsZXMnKTtcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZygnRmFzdGVzdCBpcyAnICsgc3VpdGUuZmlsdGVyKCdmYXN0ZXN0JykubWFwKCduYW1lJykpO1xuICB9KVxuICAucnVuKHsgYXN5bmM6IHRydWUgfSk7XG5cblxuZnVuY3Rpb24gcHJlY2lzaW9uKHY6IG51bWJlcikge1xuICByZXR1cm4gTWF0aC5yb3VuZCh2ICogMTAwKSAvIDEwMDtcbn0iXX0=