"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sharp = require("sharp");
const grey_1 = require("../../../src/processor/image/grey");
const utils_1 = require("./utils");
test('quality action validate', () => {
    const action = new grey_1.GreyAction();
    const param1 = action.validate('grey,1'.split(','));
    expect(param1).toEqual({
        grey: true,
    });
    expect(() => {
        action.validate('grey'.split(','));
    }).toThrowError(/Grey param error, e.g: grey,1/);
    expect(() => {
        action.validate('grey,xx,22'.split(','));
    }).toThrowError(/Grey param error, e.g: grey,1/);
    expect(() => {
        action.validate('grey,ab'.split(','));
    }).toThrowError(/Grey must be 0 or 1/);
    expect(() => {
        action.validate('grey,-1'.split(','));
    }).toThrowError(/Grey must be 0 or 1/);
});
test('quality action', async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const action = new grey_1.GreyAction();
    await action.process(ctx, 'grey,1'.split(','));
    const { info } = await ctx.image.toBuffer({ resolveWithObject: true });
    expect(info.format).toBe(sharp.format.jpeg.id);
});
test('quality action', async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const action = new grey_1.GreyAction();
    await action.process(ctx, 'grey,0'.split(','));
    const { info } = await ctx.image.toBuffer({ resolveWithObject: true });
    expect(info.format).toBe(sharp.format.jpeg.id);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JleS50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdC9wcm9jZXNzb3IvaW1hZ2UvZ3JleS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQStCO0FBQy9CLDREQUErRDtBQUMvRCxtQ0FBZ0M7QUFFaEMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUNuQyxNQUFNLE1BQU0sR0FBRyxJQUFJLGlCQUFVLEVBQUUsQ0FBQztJQUNoQyxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ3JCLElBQUksRUFBRSxJQUFJO0tBQ1gsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNWLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0lBRWpELE1BQU0sQ0FBQyxHQUFHLEVBQUU7UUFDVixNQUFNLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMzQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsK0JBQStCLENBQUMsQ0FBQztJQUVqRCxNQUFNLENBQUMsR0FBRyxFQUFFO1FBQ1YsTUFBTSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFFdkMsTUFBTSxDQUFDLEdBQUcsRUFBRTtRQUNWLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3hDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBR3pDLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ2hDLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxhQUFLLEVBQUMsYUFBYSxDQUFDLENBQUM7SUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxpQkFBVSxFQUFFLENBQUM7SUFDaEMsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0MsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXZFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2pELENBQUMsQ0FBQyxDQUFDO0FBR0gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ2hDLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxhQUFLLEVBQUMsYUFBYSxDQUFDLENBQUM7SUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSxpQkFBVSxFQUFFLENBQUM7SUFDaEMsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDL0MsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXZFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2pELENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc2hhcnAgZnJvbSAnc2hhcnAnO1xuaW1wb3J0IHsgR3JleUFjdGlvbiB9IGZyb20gJy4uLy4uLy4uL3NyYy9wcm9jZXNzb3IvaW1hZ2UvZ3JleSc7XG5pbXBvcnQgeyBta2N0eCB9IGZyb20gJy4vdXRpbHMnO1xuXG50ZXN0KCdxdWFsaXR5IGFjdGlvbiB2YWxpZGF0ZScsICgpID0+IHtcbiAgY29uc3QgYWN0aW9uID0gbmV3IEdyZXlBY3Rpb24oKTtcbiAgY29uc3QgcGFyYW0xID0gYWN0aW9uLnZhbGlkYXRlKCdncmV5LDEnLnNwbGl0KCcsJykpO1xuICBleHBlY3QocGFyYW0xKS50b0VxdWFsKHtcbiAgICBncmV5OiB0cnVlLFxuICB9KTtcblxuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgnZ3JleScuc3BsaXQoJywnKSk7XG4gIH0pLnRvVGhyb3dFcnJvcigvR3JleSBwYXJhbSBlcnJvciwgZS5nOiBncmV5LDEvKTtcblxuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgnZ3JleSx4eCwyMicuc3BsaXQoJywnKSk7XG4gIH0pLnRvVGhyb3dFcnJvcigvR3JleSBwYXJhbSBlcnJvciwgZS5nOiBncmV5LDEvKTtcblxuICBleHBlY3QoKCkgPT4ge1xuICAgIGFjdGlvbi52YWxpZGF0ZSgnZ3JleSxhYicuc3BsaXQoJywnKSk7XG4gIH0pLnRvVGhyb3dFcnJvcigvR3JleSBtdXN0IGJlIDAgb3IgMS8pO1xuXG4gIGV4cGVjdCgoKSA9PiB7XG4gICAgYWN0aW9uLnZhbGlkYXRlKCdncmV5LC0xJy5zcGxpdCgnLCcpKTtcbiAgfSkudG9UaHJvd0Vycm9yKC9HcmV5IG11c3QgYmUgMCBvciAxLyk7XG5cblxufSk7XG5cbnRlc3QoJ3F1YWxpdHkgYWN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjdHggPSBhd2FpdCBta2N0eCgnZXhhbXBsZS5qcGcnKTtcbiAgY29uc3QgYWN0aW9uID0gbmV3IEdyZXlBY3Rpb24oKTtcbiAgYXdhaXQgYWN0aW9uLnByb2Nlc3MoY3R4LCAnZ3JleSwxJy5zcGxpdCgnLCcpKTtcbiAgY29uc3QgeyBpbmZvIH0gPSBhd2FpdCBjdHguaW1hZ2UudG9CdWZmZXIoeyByZXNvbHZlV2l0aE9iamVjdDogdHJ1ZSB9KTtcblxuICBleHBlY3QoaW5mby5mb3JtYXQpLnRvQmUoc2hhcnAuZm9ybWF0LmpwZWcuaWQpO1xufSk7XG5cblxudGVzdCgncXVhbGl0eSBhY3Rpb24nLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGN0eCA9IGF3YWl0IG1rY3R4KCdleGFtcGxlLmpwZycpO1xuICBjb25zdCBhY3Rpb24gPSBuZXcgR3JleUFjdGlvbigpO1xuICBhd2FpdCBhY3Rpb24ucHJvY2VzcyhjdHgsICdncmV5LDAnLnNwbGl0KCcsJykpO1xuICBjb25zdCB7IGluZm8gfSA9IGF3YWl0IGN0eC5pbWFnZS50b0J1ZmZlcih7IHJlc29sdmVXaXRoT2JqZWN0OiB0cnVlIH0pO1xuXG4gIGV4cGVjdChpbmZvLmZvcm1hdCkudG9CZShzaGFycC5mb3JtYXQuanBlZy5pZCk7XG59KTsiXX0=