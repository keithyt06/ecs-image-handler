"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const sharp = require("sharp");
function debug(lruCache) {
    const ret = {
        os: {
            arch: os.arch(),
            cpus: os.cpus().length,
            loadavg: os.loadavg(),
        },
        memory: {
            stats: `free: ${formatBytes(os.freemem())}, total: ${formatBytes(os.totalmem())}, usage ${((os.totalmem() - os.freemem()) / os.totalmem() * 100).toFixed(2)} %`,
            free: os.freemem(),
            total: os.totalmem(),
            usage: process.memoryUsage(),
        },
        resource: {
            usage: process.resourceUsage(),
        },
        sharp: {
            cache: sharp.cache(),
            simd: sharp.simd(),
            counters: sharp.counters(),
            concurrency: sharp.concurrency(),
            versions: sharp.versions,
        },
    };
    if (lruCache) {
        ret.lruCache = {
            keys: lruCache.size,
            sizeMB: Math.round(b2mb(lruCache.calculatedSize) * 100) / 100,
            ttlSec: Math.round(lruCache.ttl / 1000),
        };
    }
    return ret;
}
exports.default = debug;
function b2mb(v) {
    return v / 1048576;
}
function formatBytes(bytes) {
    const units = ['B', 'KB', 'MB', 'GB', 'TB'];
    let i = 0;
    for (; bytes >= 1024 && i < units.length - 1; i++) {
        bytes /= 1024;
    }
    return `${bytes.toFixed(2)} ${units[i]}`;
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVidWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBeUI7QUFFekIsK0JBQStCO0FBNEQvQixTQUF3QixLQUFLLENBQUMsUUFBd0M7SUFDcEUsTUFBTSxHQUFHLEdBQWU7UUFDdEIsRUFBRSxFQUFFO1lBQ0YsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEVBQUU7WUFDZixJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU07WUFDdEIsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUU7U0FDdEI7UUFDRCxNQUFNLEVBQUU7WUFDTixLQUFLLEVBQUUsU0FBUyxXQUFXLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLFlBQVksV0FBVyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSTtZQUMvSixJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRTtZQUNsQixLQUFLLEVBQUUsRUFBRSxDQUFDLFFBQVEsRUFBRTtZQUNwQixLQUFLLEVBQUUsT0FBTyxDQUFDLFdBQVcsRUFBRTtTQUM3QjtRQUNELFFBQVEsRUFBRTtZQUNSLEtBQUssRUFBRSxPQUFPLENBQUMsYUFBYSxFQUFFO1NBQy9CO1FBQ0QsS0FBSyxFQUFFO1lBQ0wsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDcEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDbEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUU7WUFDMUIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUU7WUFDaEMsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRO1NBQ3pCO0tBQ0YsQ0FBQztJQUNGLElBQUksUUFBUSxFQUFFO1FBQ1osR0FBRyxDQUFDLFFBQVEsR0FBRztZQUNiLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSTtZQUNuQixNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUc7WUFDN0QsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7U0FDeEMsQ0FBQztLQUNIO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBaENELHdCQWdDQztBQUVELFNBQVMsSUFBSSxDQUFDLENBQVM7SUFDckIsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDO0FBQ3JCLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxLQUFhO0lBQ2hDLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNWLE9BQU8sS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakQsS0FBSyxJQUFJLElBQUksQ0FBQztLQUNmO0lBQ0QsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDM0MsQ0FBQztBQUFBLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7XG5pbXBvcnQgeyBMUlVDYWNoZSB9IGZyb20gJ2xydS1jYWNoZSc7XG5pbXBvcnQgKiBhcyBzaGFycCBmcm9tICdzaGFycCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNoYXJwSW5mbyB7XG4gIGNhY2hlOiBzaGFycC5DYWNoZVJlc3VsdDtcbiAgc2ltZDogYm9vbGVhbjtcbiAgY291bnRlcnM6IHNoYXJwLlNoYXJwQ291bnRlcnM7XG4gIGNvbmN1cnJlbmN5OiBudW1iZXI7XG4gIHZlcnNpb25zOiB7XG4gICAgdmlwczogc3RyaW5nO1xuICAgIGNhaXJvPzogc3RyaW5nO1xuICAgIGNyb2NvPzogc3RyaW5nO1xuICAgIGV4aWY/OiBzdHJpbmc7XG4gICAgZXhwYXQ/OiBzdHJpbmc7XG4gICAgZmZpPzogc3RyaW5nO1xuICAgIGZvbnRjb25maWc/OiBzdHJpbmc7XG4gICAgZnJlZXR5cGU/OiBzdHJpbmc7XG4gICAgZ2RrcGl4YnVmPzogc3RyaW5nO1xuICAgIGdpZj86IHN0cmluZztcbiAgICBnbGliPzogc3RyaW5nO1xuICAgIGdzZj86IHN0cmluZztcbiAgICBoYXJmYnV6ej86IHN0cmluZztcbiAgICBqcGVnPzogc3RyaW5nO1xuICAgIGxjbXM/OiBzdHJpbmc7XG4gICAgb3JjPzogc3RyaW5nO1xuICAgIHBhbmdvPzogc3RyaW5nO1xuICAgIHBpeG1hbj86IHN0cmluZztcbiAgICBwbmc/OiBzdHJpbmc7XG4gICAgc3ZnPzogc3RyaW5nO1xuICAgIHRpZmY/OiBzdHJpbmc7XG4gICAgd2VicD86IHN0cmluZztcbiAgICBhdmlmPzogc3RyaW5nO1xuICAgIGhlaWY/OiBzdHJpbmc7XG4gICAgeG1sPzogc3RyaW5nO1xuICAgIHpsaWI/OiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURlYnVnSW5mbyB7XG4gIG9zOiB7XG4gICAgYXJjaDogc3RyaW5nO1xuICAgIGNwdXM6IG51bWJlcjtcbiAgICBsb2FkYXZnOiBudW1iZXJbXTtcbiAgfTtcbiAgbWVtb3J5OiB7XG4gICAgc3RhdHM6IHN0cmluZztcbiAgICBmcmVlOiBudW1iZXI7XG4gICAgdG90YWw6IG51bWJlcjtcbiAgICB1c2FnZTogTm9kZUpTLk1lbW9yeVVzYWdlO1xuICB9O1xuICByZXNvdXJjZToge1xuICAgIHVzYWdlOiBOb2RlSlMuUmVzb3VyY2VVc2FnZTtcbiAgfTtcbiAgbHJ1Q2FjaGU/OiB7XG4gICAga2V5czogbnVtYmVyO1xuICAgIHNpemVNQjogbnVtYmVyO1xuICAgIHR0bFNlYzogbnVtYmVyO1xuICB9O1xuICBzaGFycDogSVNoYXJwSW5mbztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVidWcobHJ1Q2FjaGU/OiBMUlVDYWNoZTxzdHJpbmcsIENhY2hlT2JqZWN0Pik6IElEZWJ1Z0luZm8ge1xuICBjb25zdCByZXQ6IElEZWJ1Z0luZm8gPSB7XG4gICAgb3M6IHtcbiAgICAgIGFyY2g6IG9zLmFyY2goKSxcbiAgICAgIGNwdXM6IG9zLmNwdXMoKS5sZW5ndGgsXG4gICAgICBsb2FkYXZnOiBvcy5sb2FkYXZnKCksXG4gICAgfSxcbiAgICBtZW1vcnk6IHtcbiAgICAgIHN0YXRzOiBgZnJlZTogJHtmb3JtYXRCeXRlcyhvcy5mcmVlbWVtKCkpfSwgdG90YWw6ICR7Zm9ybWF0Qnl0ZXMob3MudG90YWxtZW0oKSl9LCB1c2FnZSAkeygob3MudG90YWxtZW0oKSAtIG9zLmZyZWVtZW0oKSkgLyBvcy50b3RhbG1lbSgpICogMTAwKS50b0ZpeGVkKDIpfSAlYCxcbiAgICAgIGZyZWU6IG9zLmZyZWVtZW0oKSxcbiAgICAgIHRvdGFsOiBvcy50b3RhbG1lbSgpLFxuICAgICAgdXNhZ2U6IHByb2Nlc3MubWVtb3J5VXNhZ2UoKSxcbiAgICB9LFxuICAgIHJlc291cmNlOiB7XG4gICAgICB1c2FnZTogcHJvY2Vzcy5yZXNvdXJjZVVzYWdlKCksXG4gICAgfSxcbiAgICBzaGFycDoge1xuICAgICAgY2FjaGU6IHNoYXJwLmNhY2hlKCksXG4gICAgICBzaW1kOiBzaGFycC5zaW1kKCksXG4gICAgICBjb3VudGVyczogc2hhcnAuY291bnRlcnMoKSxcbiAgICAgIGNvbmN1cnJlbmN5OiBzaGFycC5jb25jdXJyZW5jeSgpLFxuICAgICAgdmVyc2lvbnM6IHNoYXJwLnZlcnNpb25zLFxuICAgIH0sXG4gIH07XG4gIGlmIChscnVDYWNoZSkge1xuICAgIHJldC5scnVDYWNoZSA9IHtcbiAgICAgIGtleXM6IGxydUNhY2hlLnNpemUsXG4gICAgICBzaXplTUI6IE1hdGgucm91bmQoYjJtYihscnVDYWNoZS5jYWxjdWxhdGVkU2l6ZSkgKiAxMDApIC8gMTAwLFxuICAgICAgdHRsU2VjOiBNYXRoLnJvdW5kKGxydUNhY2hlLnR0bCAvIDEwMDApLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gYjJtYih2OiBudW1iZXIpIHtcbiAgcmV0dXJuIHYgLyAxMDQ4NTc2O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRCeXRlcyhieXRlczogbnVtYmVyKSB7XG4gIGNvbnN0IHVuaXRzID0gWydCJywgJ0tCJywgJ01CJywgJ0dCJywgJ1RCJ107XG4gIGxldCBpID0gMDtcbiAgZm9yICg7IGJ5dGVzID49IDEwMjQgJiYgaSA8IHVuaXRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIGJ5dGVzIC89IDEwMjQ7XG4gIH1cbiAgcmV0dXJuIGAke2J5dGVzLnRvRml4ZWQoMil9ICR7dW5pdHNbaV19YDtcbn07XG4iXX0=