"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemKVStore = exports.DynamoDBStore = exports.SharpBufferStore = exports.NullStore = exports.S3Store = exports.LocalStore = void 0;
const fs = require("fs");
const path = require("path");
const DynamoDB = require("aws-sdk/clients/dynamodb");
const S3 = require("aws-sdk/clients/s3");
const config_1 = require("./config");
;
/**
 * A local file system based store.
 */
class LocalStore {
    constructor(root = '') {
        this.root = root;
    }
    async get(p, _) {
        p = path.join(this.root, p);
        return {
            buffer: await fs.promises.readFile(p),
            type: filetype(p),
            headers: {
                'Etag': 'fake-etag',
                'Last-Modified': 'Wed, 21 Oct 2014 07:28:00 GMT',
                'Cache-Control': 'max-age',
            },
        };
    }
    async url(p) {
        return Promise.resolve(path.join(this.root, p));
    }
}
exports.LocalStore = LocalStore;
/**
 * S3 based store.
 */
class S3Store {
    constructor(bucket) {
        this.bucket = bucket;
        this._s3 = new S3({ region: config_1.default.region });
    }
    async get(p, beforeGetFunc) {
        var _a;
        beforeGetFunc === null || beforeGetFunc === void 0 ? void 0 : beforeGetFunc();
        const res = await this._s3.getObject({
            Bucket: this.bucket,
            Key: p,
        }).promise();
        if (Buffer.isBuffer(res.Body)) {
            const headers = {};
            if (res.ETag) {
                headers.Etag = res.ETag;
            }
            if (res.LastModified) {
                headers['Last-Modified'] = res.LastModified;
            }
            if (res.CacheControl) {
                headers['Cache-Control'] = res.CacheControl;
            }
            return {
                buffer: res.Body,
                type: (_a = res.ContentType) !== null && _a !== void 0 ? _a : '',
                headers,
            };
        }
        ;
        throw new Error('S3 response body is not a Buffer type');
    }
    async url(p) {
        return this._s3.getSignedUrlPromise('getObject', {
            Bucket: this.bucket,
            Key: p,
            Expires: 1200,
        });
    }
}
exports.S3Store = S3Store;
/**
 * A fake store. Only for unit test.
 */
class NullStore {
    url(_) {
        throw new Error('Method not implemented.');
    }
    async get(p, _) {
        return Promise.resolve({
            buffer: Buffer.from(p),
            type: '',
            headers: {},
        });
    }
}
exports.NullStore = NullStore;
/**
 * A sharp image store. Only for unit test.
 */
class SharpBufferStore {
    constructor(image) {
        this.image = image;
    }
    url(_) {
        throw new Error('Method not implemented.');
    }
    async get(_, __) {
        const { data, info } = await this.image.toBuffer({ resolveWithObject: true });
        return { buffer: data, type: info.format, headers: {} };
    }
}
exports.SharpBufferStore = SharpBufferStore;
class DynamoDBStore {
    constructor(tableName) {
        this.tableName = tableName;
        this._ddb = new DynamoDB.DocumentClient({ region: config_1.default.region });
    }
    url(_) {
        throw new Error('Method not implemented.');
    }
    async get(key, _) {
        var _a;
        const data = await this._ddb.get({
            TableName: this.tableName,
            Key: { id: key },
        }).promise();
        return (_a = data.Item) !== null && _a !== void 0 ? _a : {};
    }
}
exports.DynamoDBStore = DynamoDBStore;
class MemKVStore {
    constructor(dict) {
        this.dict = dict;
    }
    url(_) {
        throw new Error('Method not implemented.');
    }
    async get(key, _) {
        var _a;
        return Promise.resolve((_a = this.dict[key]) !== null && _a !== void 0 ? _a : {});
    }
}
exports.MemKVStore = MemKVStore;
function filetype(file) {
    return path.extname(file).substring(1);
}
//# sourceMappingURL=data:application/json;base64,