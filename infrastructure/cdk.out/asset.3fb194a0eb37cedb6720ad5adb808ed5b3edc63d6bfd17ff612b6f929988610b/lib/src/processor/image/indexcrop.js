"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexCropAction = void 0;
const sharp = require("sharp");
const __1 = require("..");
const _base_1 = require("./_base");
class IndexCropAction extends _base_1.BaseImageAction {
    constructor() {
        super(...arguments);
        this.name = 'indexcrop';
    }
    validate(params) {
        let opt = { x: 0, y: 0, i: 0 };
        if (params.length < 3) {
            throw new __1.InvalidArgument('IndexCrop param error, e.g: indexcrop,x_100,i_0');
        }
        for (const param of params) {
            if ((this.name === param) || (!param)) {
                continue;
            }
            const [k, v] = param.split('_');
            if (k === 'x') {
                opt.x = Number.parseInt(v, 10);
                if (opt.x < 0) {
                    throw new __1.InvalidArgument('Param error:  x value must be greater than 0');
                }
            }
            else if (k === 'y') {
                opt.y = Number.parseInt(v, 10);
                if (opt.y < 0) {
                    throw new __1.InvalidArgument('Param error:  y value must be greater than 0');
                }
            }
            else if (k === 'i') {
                opt.i = Number.parseInt(v, 10);
            }
            else {
                throw new __1.InvalidArgument(`Unkown param: "${k}"`);
            }
        }
        if (opt.x > 0 && opt.y > 0) {
            throw new __1.InvalidArgument('Param error:  Cannot enter x and y at the same time');
        }
        return opt;
    }
    async process(ctx, params) {
        const opt = this.validate(params);
        let x = 0;
        let y = 0;
        let w = 0;
        let h = 0;
        let needCrop = true;
        const metadata = await sharp(await ctx.image.toBuffer()).metadata();
        if (metadata.height === undefined || metadata.width === undefined) {
            throw new __1.InvalidArgument('Incorrect image format');
        }
        if (metadata.height === undefined || metadata.width === undefined) {
            throw new __1.InvalidArgument('Incorrect image format');
        }
        h = metadata.height;
        w = metadata.width;
        if (opt.x > 0) {
            if (opt.x > metadata.width) {
                needCrop = false;
                return;
            }
            const count = Math.floor(metadata.width / opt.x);
            if (opt.i + 1 > count) {
                needCrop = false;
                return;
            }
            x = opt.i * opt.x;
            w = opt.x;
        }
        else if (opt.y > 0) {
            if (opt.y > metadata.height) {
                needCrop = false;
                return;
            }
            const count = Math.floor(metadata.height / opt.y);
            if (opt.i + 1 > count) {
                needCrop = false;
                return;
            }
            y = opt.i * opt.y;
            h = opt.y;
        }
        if (needCrop) {
            ctx.image = sharp(await ctx.image.extract({
                left: x,
                top: y,
                width: w,
                height: h,
            }).toBuffer(), { animated: true });
        }
    }
}
exports.IndexCropAction = IndexCropAction;
//# sourceMappingURL=data:application/json;base64,