"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlurAction = void 0;
const __1 = require("..");
const is = require("../../is");
const _base_1 = require("./_base");
class BlurAction extends _base_1.BaseImageAction {
    constructor() {
        super(...arguments);
        this.name = 'blur';
    }
    validate(params) {
        let opt = { r: 0, s: 0 };
        if (params.length < 2) {
            throw new __1.InvalidArgument('blur param error, e.g: blur,r_3,s_2');
        }
        for (const param of params) {
            if ((this.name === param) || (!param)) {
                continue;
            }
            const [k, v] = param.split('_');
            if (k === 'r') {
                const r = Number.parseInt(v, 10);
                if (is.inRange(r, 1, 50)) {
                    opt.r = r;
                }
                else {
                    throw new __1.InvalidArgument('Blur param \'r\' must be between 0 and 50');
                }
            }
            else if (k === 's') {
                const s = Number.parseInt(v, 10);
                if (is.inRange(s, 1, 50)) {
                    opt.s = s;
                }
                else {
                    throw new __1.InvalidArgument('Blur param \'s\' must be between 0 and 50');
                }
            }
            else {
                throw new __1.InvalidArgument(`Unkown param: "${k}"`);
            }
        }
        return opt;
    }
    async process(ctx, params) {
        const opt = this.validate(params);
        const a = -0.0057;
        const b = 1.1787;
        const c = -0.0694;
        const sigma = a * opt.s * opt.s + b * opt.s + c;
        const sqrtln01 = 1.51743; // Sqrt(-ln(0.1))
        const max_x = Math.floor(sigma * sqrtln01);
        const max_n = 2 * Math.max(max_x - 1, 0) + 1; // The max gauss kernel size
        const n = 2 * opt.r + 1; // The given gauss kernel size
        if ((n < max_n) && (n <= 51)) { // It will be really slow if n > 51
            console.log('Use manual blur');
            ctx.image.convolve({
                width: n,
                height: n,
                kernel: gaussmat(n, sigma),
            });
        }
        else {
            console.log('Use built-in blur');
            ctx.image.blur(sigma);
        }
    }
}
exports.BlurAction = BlurAction;
function gaussmat(n, sigma) {
    if (n % 2 === 0) {
        throw new Error('gaussmat kernel size must be odd');
    }
    const mat = new Array(n * n);
    for (let y = 0; y < n; y++) {
        for (let x = 0; x < n; x++) {
            // eslint-disable-next-line no-bitwise
            let xo = x - (n >> 1);
            // eslint-disable-next-line no-bitwise
            let yo = y - (n >> 1);
            const distance = xo * xo + yo * yo;
            const v = Math.exp(-distance / (sigma * sigma));
            mat[y * n + x] = v;
        }
    }
    return mat;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmx1ci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9wcm9jZXNzb3IvaW1hZ2UvYmx1ci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSwwQkFBNEQ7QUFDNUQsK0JBQStCO0FBQy9CLG1DQUEwQztBQU8xQyxNQUFhLFVBQVcsU0FBUSx1QkFBZTtJQUEvQzs7UUFDa0IsU0FBSSxHQUFXLE1BQU0sQ0FBQztJQTZEeEMsQ0FBQztJQTNEUSxRQUFRLENBQUMsTUFBZ0I7UUFDOUIsSUFBSSxHQUFHLEdBQWEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUVuQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JCLE1BQU0sSUFBSSxtQkFBZSxDQUFDLHFDQUFxQyxDQUFDLENBQUM7U0FDbEU7UUFFRCxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRTtZQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JDLFNBQVM7YUFDVjtZQUNELE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUU7Z0JBQ2IsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ2pDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO29CQUN4QixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDWDtxQkFBTTtvQkFDTCxNQUFNLElBQUksbUJBQWUsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO2lCQUN4RTthQUNGO2lCQUFNLElB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QUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3RCLE1BQU0sUUFBUSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztZQUNuQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxHQUFHLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDaEQsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BCO0tBQ0Y7SUFDRCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJSW1hZ2VDb250ZXh0IH0gZnJvbSAnLic7XG5pbXBvcnQgeyBJQWN0aW9uT3B0cywgUmVhZE9ubHksIEludmFsaWRBcmd1bWVudCB9IGZyb20gJy4uJztcbmltcG9ydCAqIGFzIGlzIGZyb20gJy4uLy4uL2lzJztcbmltcG9ydCB7IEJhc2VJbWFnZUFjdGlvbiB9IGZyb20gJy4vX2Jhc2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJsdXJPcHRzIGV4dGVuZHMgSUFjdGlvbk9wdHMge1xuICByOiBudW1iZXI7XG4gIHM6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEJsdXJBY3Rpb24gZXh0ZW5kcyBCYXNlSW1hZ2VBY3Rpb24ge1xuICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nID0gJ2JsdXInO1xuXG4gIHB1YmxpYyB2YWxpZGF0ZShwYXJhbXM6IHN0cmluZ1tdKTogUmVhZE9ubHk8Qmx1ck9wdHM+IHtcbiAgICBsZXQgb3B0OiBCbHVyT3B0cyA9IHsgcjogMCwgczogMCB9O1xuXG4gICAgaWYgKHBhcmFtcy5sZW5ndGggPCAyKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50KCdibHVyIHBhcmFtIGVycm9yLCBlLmc6IGJsdXIscl8zLHNfMicpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgcGFyYW0gb2YgcGFyYW1zKSB7XG4gICAgICBpZiAoKHRoaXMubmFtZSA9PT0gcGFyYW0pIHx8ICghcGFyYW0pKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgW2ssIHZdID0gcGFyYW0uc3BsaXQoJ18nKTtcbiAgICAgIGlmIChrID09PSAncicpIHtcbiAgICAgICAgY29uc3QgciA9IE51bWJlci5wYXJzZUludCh2LCAxMCk7XG4gICAgICAgIGlmIChpcy5pblJhbmdlKHIsIDEsIDUwKSkge1xuICAgICAgICAgIG9wdC5yID0gcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50KCdCbHVyIHBhcmFtIFxcJ3JcXCcgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDUwJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoayA9PT0gJ3MnKSB7XG4gICAgICAgIGNvbnN0IHMgPSBOdW1iZXIucGFyc2VJbnQodiwgMTApO1xuICAgICAgICBpZiAoaXMuaW5SYW5nZShzLCAxLCA1MCkpIHtcbiAgICAgICAgICBvcHQucyA9IHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudCgnQmx1ciBwYXJhbSBcXCdzXFwnIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA1MCcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50KGBVbmtvd24gcGFyYW06IFwiJHtrfVwiYCk7XG4gICAgICB9XG5cbiAgICB9XG4gICAgcmV0dXJuIG9wdDtcbiAgfVxuXG5cbiAgcHVibGljIGFzeW5jIHByb2Nlc3MoY3R4OiBJSW1hZ2VDb250ZXh0LCBwYXJhbXM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3Qgb3B0ID0gdGhpcy52YWxpZGF0ZShwYXJhbXMpO1xuICAgIGNvbnN0IGEgPSAtMC4wMDU3O1xuICAgIGNvbnN0IGIgPSAxLjE3ODc7XG4gICAgY29uc3QgYyA9IC0wLjA2OTQ7XG4gICAgY29uc3Qgc2lnbWEgPSBhICogb3B0LnMgKiBvcHQucyArIGIgKiBvcHQucyArIGM7XG5cbiAgICBjb25zdCBzcXJ0bG4wMSA9IDEuNTE3NDM7IC8vIFNxcnQoLWxuKDAuMSkpXG4gICAgY29uc3QgbWF4X3ggPSBNYXRoLmZsb29yKHNpZ21hICogc3FydGxuMDEpO1xuICAgIGNvbnN0IG1heF9uID0gMiAqIE1hdGgubWF4KG1heF94IC0gMSwgMCkgKyAxOyAvLyBUaGUgbWF4IGdhdXNzIGtlcm5lbCBzaXplXG4gICAgY29uc3QgbiA9IDIgKiBvcHQuciArIDE7IC8vIFRoZSBnaXZlbiBnYXVzcyBrZXJuZWwgc2l6ZVxuXG4gICAgaWYgKChuIDwgbWF4X24pICYmIChuIDw9IDUxKSkgeyAvLyBJdCB3aWxsIGJlIHJlYWxseSBzbG93IGlmIG4gPiA1MVxuICAgICAgY29uc29sZS5sb2coJ1VzZSBtYW51YWwgYmx1cicpO1xuICAgICAgY3R4LmltYWdlLmNvbnZvbHZlKHtcbiAgICAgICAgd2lkdGg6IG4sXG4gICAgICAgIGhlaWdodDogbixcbiAgICAgICAga2VybmVsOiBnYXVzc21hdChuLCBzaWdtYSksXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coJ1VzZSBidWlsdC1pbiBibHVyJyk7XG4gICAgICBjdHguaW1hZ2UuYmx1cihzaWdtYSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdhdXNzbWF0KG46IG51bWJlciwgc2lnbWE6IG51bWJlcik6IEFycmF5TGlrZTxudW1iZXI+IHtcbiAgaWYgKG4gJSAyID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdnYXVzc21hdCBrZXJuZWwgc2l6ZSBtdXN0IGJlIG9kZCcpO1xuICB9XG4gIGNvbnN0IG1hdCA9IG5ldyBBcnJheTxudW1iZXI+KG4gKiBuKTtcbiAgZm9yIChsZXQgeSA9IDA7IHkgPCBuOyB5KyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IG47IHgrKykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgIGxldCB4byA9IHggLSAobiA+PiAxKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICBsZXQgeW8gPSB5IC0gKG4gPj4gMSk7XG4gICAgICBjb25zdCBkaXN0YW5jZSA9IHhvICogeG8gKyB5byAqIHlvO1xuICAgICAgY29uc3QgdiA9IE1hdGguZXhwKC1kaXN0YW5jZSAvIChzaWdtYSAqIHNpZ21hKSk7XG4gICAgICBtYXRbeSAqIG4gKyB4XSA9IHY7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXQ7XG59Il19