"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageProcessor = void 0;
const sharp = require("sharp");
const processor_1 = require("../../processor");
const _base_1 = require("./_base");
const auto_orient_1 = require("./auto-orient");
const blur_1 = require("./blur");
const bright_1 = require("./bright");
const cgif_1 = require("./cgif");
const circle_1 = require("./circle");
const contrast_1 = require("./contrast");
const crop_1 = require("./crop");
const format_1 = require("./format");
const grey_1 = require("./grey");
const indexcrop_1 = require("./indexcrop");
const info_1 = require("./info");
const interlace_1 = require("./interlace");
const quality_1 = require("./quality");
const resize_1 = require("./resize");
const rotate_1 = require("./rotate");
const rounded_corners_1 = require("./rounded-corners");
const sharpen_1 = require("./sharpen");
const strip_metadata_1 = require("./strip-metadata");
const threshold_1 = require("./threshold");
const watermark_1 = require("./watermark");
const MB = 1024 * 1024;
class ImageProcessor {
    constructor() {
        this._actions = {};
        this._maxGifSizeMB = 5;
        this._maxGifPages = 100;
        this.name = 'image';
    }
    static getInstance() {
        if (!ImageProcessor._instance) {
            ImageProcessor._instance = new ImageProcessor();
        }
        return ImageProcessor._instance;
    }
    setMaxGifSizeMB(value) {
        if (value > 0) {
            this._maxGifSizeMB = value;
        }
        else {
            console.warn(`Max gif size must > 0, but the value is ${value}`);
        }
    }
    setMaxGifPages(value) {
        if (value > 0) {
            this._maxGifPages = value;
        }
        else {
            console.warn(`Max gif pages must > 0, but the value is ${value}`);
        }
    }
    async newContext(uri, actions, bufferStore) {
        const ctx = {
            uri,
            actions,
            mask: new _base_1.ActionMask(actions),
            bufferStore,
            features: {
                [processor_1.Features.AutoOrient]: true,
                [processor_1.Features.ReadAllAnimatedFrames]: true,
            },
            headers: {},
        };
        for (let i = 0; i < actions.length; i++) {
            const action = actions[i];
            if ((this.name === action) || (!action)) {
                continue;
            }
            // "<action-name>,<param-1>,<param-2>,..."
            const params = action.split(',');
            const name = params[0];
            const act = this.action(name);
            if (!act) {
                throw new processor_1.InvalidArgument(`Unkown action: "${name}"`);
            }
            act.beforeNewContext.bind(act)(ctx, params, i);
        }
        const { buffer, headers } = await bufferStore.get(uri);
        let image;
        let metadata;
        if (ctx.features[processor_1.Features.LimitAnimatedFrames] > 0) {
            image = sharp(buffer, { failOnError: false, animated: false });
            metadata = await image.metadata();
            if (!('gif' === metadata.format)) {
                throw new processor_1.InvalidArgument('Format must be Gif');
            }
            if (!(metadata.pages)) {
                throw new processor_1.InvalidArgument('Can\'t read gif\'s pages');
            }
            const pages = Math.min(ctx.features[processor_1.Features.LimitAnimatedFrames], metadata.pages);
            image = sharp(buffer, { failOnError: false, animated: ctx.features[processor_1.Features.ReadAllAnimatedFrames], pages });
            metadata = await image.metadata();
        }
        else {
            image = sharp(buffer, { failOnError: false, animated: ctx.features[processor_1.Features.ReadAllAnimatedFrames] });
            metadata = await image.metadata();
        }
        if ('gif' === metadata.format) {
            image.gif({ effort: 1 }); // https://github.com/lovell/sharp/issues/3176
            if (metadata.size && metadata.size > (this._maxGifSizeMB * MB)) {
                console.log(`Gif processing skipped. The image size exceeds ${this._maxGifSizeMB} MB`);
                ctx.mask.disableAll();
            }
            else if (metadata.pages && metadata.pages > this._maxGifPages) {
                console.log(`Gif processing skipped. The image pages exceeds ${this._maxGifPages}`);
                ctx.mask.disableAll();
            }
        }
        if ('png' === metadata.format && metadata.size && metadata.size > (5 * MB)) {
            image.png({ adaptiveFiltering: true });
        }
        return {
            uri: ctx.uri,
            actions: ctx.actions,
            mask: ctx.mask,
            bufferStore: ctx.bufferStore,
            features: ctx.features,
            headers: Object.assign(ctx.headers, headers),
            metadata,
            image,
        };
    }
    async process(ctx) {
        if (!ctx.image) {
            throw new processor_1.InvalidArgument('Invalid image context! No "image" field.');
        }
        if (!ctx.actions) {
            throw new processor_1.InvalidArgument('Invalid image context! No "actions" field.');
        }
        if (ctx.features[processor_1.Features.AutoOrient]) {
            ctx.image.rotate();
        }
        ctx.mask.forEachAction((action, _, index) => {
            if ((this.name === action) || (!action)) {
                return;
            }
            // "<action-name>,<param-1>,<param-2>,..."
            const params = action.split(',');
            const name = params[0];
            const act = this.action(name);
            if (!act) {
                throw new processor_1.InvalidArgument(`Unkown action: "${name}"`);
            }
            act.beforeProcess.bind(act)(ctx, params, index);
        });
        const enabledActions = ctx.mask.filterEnabledActions();
        const nothing2do = (enabledActions.length === 0) || ((enabledActions.length === 1) && (this.name === enabledActions[0]));
        if (nothing2do && (!ctx.features[processor_1.Features.AutoWebp])) {
            const { buffer } = await ctx.bufferStore.get(ctx.uri);
            return { data: buffer, type: ctx.metadata.format };
        }
        for (const action of enabledActions) {
            if ((this.name === action) || (!action)) {
                continue;
            }
            // "<action-name>,<param-1>,<param-2>,..."
            const params = action.split(',');
            const name = params[0];
            const act = this.action(name);
            if (!act) {
                throw new processor_1.InvalidArgument(`Unkown action: "${name}"`);
            }
            await act.process(ctx, params);
            if (ctx.features[processor_1.Features.ReturnInfo]) {
                break;
            }
        }
        if (ctx.features[processor_1.Features.AutoWebp]) {
            ctx.image.webp();
        }
        if (ctx.features[processor_1.Features.AutoAvif]) {
            ctx.image.avif({ effort: 2, quality: 60 });
        }
        if (ctx.features[processor_1.Features.ReturnInfo]) {
            return { data: ctx.info, type: 'application/json' };
        }
        else {
            const { data, info } = await ctx.image.toBuffer({ resolveWithObject: true });
            return { data: data, type: 'image/' + info.format };
        }
    }
    action(name) {
        return this._actions[name];
    }
    register(...actions) {
        for (const action of actions) {
            if (!this._actions[action.name]) {
                this._actions[action.name] = action;
            }
        }
    }
}
exports.ImageProcessor = ImageProcessor;
// Register actions
ImageProcessor.getInstance().register(new resize_1.ResizeAction(), new quality_1.QualityAction(), new bright_1.BrightAction(), new format_1.FormatAction(), new blur_1.BlurAction(), new rotate_1.RotateAction(), new contrast_1.ContrastAction(), new sharpen_1.SharpenAction(), new interlace_1.InterlaceAction(), new auto_orient_1.AutoOrientAction(), new grey_1.GreyAction(), new crop_1.CropAction(), new circle_1.CircleAction(), new indexcrop_1.IndexCropAction(), new rounded_corners_1.RoundedCornersAction(), new watermark_1.WatermarkAction(), new info_1.InfoAction(), new cgif_1.CgifAction(), new strip_metadata_1.StripMetadataAction(), new threshold_1.ThresholdAction());
//# sourceMappingURL=data:application/json;base64,