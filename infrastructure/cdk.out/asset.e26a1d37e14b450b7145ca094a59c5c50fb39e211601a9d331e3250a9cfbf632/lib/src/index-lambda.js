"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const HttpErrors = require("http-errors");
const config_1 = require("./config");
const debug_1 = require("./debug");
const default_1 = require("./default");
const is = require("./is");
const processor_1 = require("./processor");
exports.handler = WrapError(async (event) => {
    var _a, _b, _c;
    console.log('event:', JSON.stringify(event));
    if (event.rawPath === '/' || event.rawPath === '/ping') {
        return resp(200, 'ok');
    }
    else if (event.rawPath === '/_debug') {
        console.log(JSON.stringify((0, debug_1.default)()));
        return resp(400, 'Please check your server logs for more details!');
    }
    const accept = (_b = (_a = event.headers.Accept) !== null && _a !== void 0 ? _a : event.headers.accept) !== null && _b !== void 0 ? _b : '';
    const autoWebp = config_1.default.autoWebp && accept.includes('image/webp');
    console.log('autoWebp:', autoWebp);
    const bs = getBufferStore(event);
    const { uri, actions } = (0, default_1.parseRequest)(event.rawPath, (_c = event.queryStringParameters) !== null && _c !== void 0 ? _c : {});
    if (actions.length > 1) {
        const processor = (0, default_1.getProcessor)(actions[0]);
        const context = await processor.newContext(uri, actions, bs);
        context.features[processor_1.Features.AutoWebp] = autoWebp;
        const { data, type } = await processor.process(context);
        return resp(200, data, type, context.headers);
    }
    else {
        const { buffer, type, headers } = await bs.get(uri, bypass);
        return resp(200, buffer, type, headers);
    }
});
function bypass() {
    // NOTE: This is intended to tell CloudFront to directly access the s3 object without through API GW.
    throw new HttpErrors[403]('Please visit s3 directly');
}
function resp(code, body, type, headers) {
    const isBase64Encoded = Buffer.isBuffer(body);
    let data = '';
    if (isBase64Encoded) {
        data = body.toString('base64');
    }
    else if (is.string(body)) {
        data = body;
        type = 'text/plain';
    }
    else {
        data = JSON.stringify(body);
        type = 'application/json';
    }
    return {
        isBase64Encoded,
        statusCode: code,
        headers: Object.assign({ 'Content-Type': type !== null && type !== void 0 ? type : 'text/plain' }, headers),
        body: data,
    };
}
function WrapError(fn) {
    return async (event) => {
        var _a, _b;
        try {
            return await fn(event);
        }
        catch (err) {
            console.error(err);
            // ENOENT support
            if (err.code === 'ENOENT') {
                err.status = 404;
                err.message = 'NotFound';
            }
            const statusCode = (_b = (_a = err.statusCode) !== null && _a !== void 0 ? _a : err.status) !== null && _b !== void 0 ? _b : 500;
            const body = {
                status: statusCode,
                name: err.name,
                message: err.message,
            };
            return resp(statusCode, body);
        }
    };
}
const DefaultBufferStore = (0, default_1.bufferStore)();
function getBufferStore(event) {
    const bucket = event.headers['x-bucket'];
    if (bucket) {
        return (0, default_1.bufferStore)(bucket);
    }
    return DefaultBufferStore;
}
//# sourceMappingURL=data:application/json;base64,