"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sharp = require("sharp");
const processor_1 = require("../../../src/processor");
const watermark_1 = require("../../../src/processor/image/watermark");
const utils_1 = require("./utils");
const testText = 'hello 世界 !';
const testImgFile = 'aws_logo.png';
const testTextbuff = Buffer.from(testText, 'utf-8');
const testImgbuff = Buffer.from(testImgFile, 'utf-8');
const base64Text = testTextbuff.toString('base64');
const base64ImgFile = testImgbuff.toString('base64');
const testTextParam = `watermark,text_${base64Text},rotate_25,g_se,t_70,color_ff9966`;
const testImgParam = `watermark,image_${base64ImgFile},rotate_25,g_nw,t_70`;
const testMixedParam = `watermark,image_${base64ImgFile},text_${base64Text},g_nw,t_20,align_2,interval_5,size_14`;
test(testTextParam, async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const action = new watermark_1.WatermarkAction();
    await action.process(ctx, testTextParam.split(','));
    const { info } = await ctx.image.toBuffer({ resolveWithObject: true });
    expect(info.format).toBe(sharp.format.jpeg.id);
});
test(testImgParam, async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const action = new watermark_1.WatermarkAction();
    await action.process(ctx, testImgParam.split(','));
    const { info } = await ctx.image.toBuffer({ resolveWithObject: true });
    expect(info.format).toBe(sharp.format.jpeg.id);
});
test(testMixedParam, async () => {
    const ctx = await (0, utils_1.mkctx)('example.jpg');
    const action = new watermark_1.WatermarkAction();
    await action.process(ctx, testMixedParam.split(','));
    const { info } = await ctx.image.toBuffer({ resolveWithObject: true });
    expect(info.format).toBe(sharp.format.jpeg.id);
});
test(`disable ${processor_1.Features.ReadAllAnimatedFrames}`, async () => {
    const ctx = await (0, utils_1.mkctx)('example.gif');
    const action = new watermark_1.WatermarkAction();
    action.beforeNewContext(ctx, testMixedParam.split(','));
    expect(ctx.features[processor_1.Features.ReadAllAnimatedFrames]).toBe(false);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0ZXJtYXJrLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L3Byb2Nlc3Nvci9pbWFnZS93YXRlcm1hcmsudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLCtCQUErQjtBQUMvQixzREFBa0Q7QUFDbEQsc0VBQXlFO0FBQ3pFLG1DQUFnQztBQUVoQyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUM7QUFDOUIsTUFBTSxXQUFXLEdBQUcsY0FBYyxDQUFDO0FBRW5DLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3BELE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBRXRELE1BQU0sVUFBVSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkQsTUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUVyRCxNQUFNLGFBQWEsR0FBRyxrQkFBa0IsVUFBVSxtQ0FBbUMsQ0FBQztBQUN0RixNQUFNLFlBQVksR0FBRyxtQkFBbUIsYUFBYSxzQkFBc0IsQ0FBQztBQUM1RSxNQUFNLGNBQWMsR0FBRyxtQkFBbUIsYUFBYSxTQUFTLFVBQVUsdUNBQXVDLENBQUM7QUFFbEgsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLElBQUksRUFBRTtJQUM3QixNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUEsYUFBSyxFQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRXZDLE1BQU0sTUFBTSxHQUFHLElBQUksMkJBQWUsRUFBRSxDQUFDO0lBQ3JDLE1BQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRXBELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN2RSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNqRCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDNUIsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLGFBQUssRUFBQyxhQUFhLENBQUMsQ0FBQztJQUV2QyxNQUFNLE1BQU0sR0FBRyxJQUFJLDJCQUFlLEVBQUUsQ0FBQztJQUNyQyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUVuRCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDdkUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQzlCLE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxhQUFLLEVBQUMsYUFBYSxDQUFDLENBQUM7SUFFdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSwyQkFBZSxFQUFFLENBQUM7SUFDckMsTUFBTSxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFckQsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2pELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLFdBQVcsb0JBQVEsQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQzNELE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBQSxhQUFLLEVBQUMsYUFBYSxDQUFDLENBQUM7SUFDdkMsTUFBTSxNQUFNLEdBQUcsSUFBSSwyQkFBZSxFQUFFLENBQUM7SUFDckMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxjQUFjLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFeEQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsb0JBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ25FLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgc2hhcnAgZnJvbSAnc2hhcnAnO1xuaW1wb3J0IHsgRmVhdHVyZXMgfSBmcm9tICcuLi8uLi8uLi9zcmMvcHJvY2Vzc29yJztcbmltcG9ydCB7IFdhdGVybWFya0FjdGlvbiB9IGZyb20gJy4uLy4uLy4uL3NyYy9wcm9jZXNzb3IvaW1hZ2Uvd2F0ZXJtYXJrJztcbmltcG9ydCB7IG1rY3R4IH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IHRlc3RUZXh0ID0gJ2hlbGxvIOS4lueVjCAhJztcbmNvbnN0IHRlc3RJbWdGaWxlID0gJ2F3c19sb2dvLnBuZyc7XG5cbmNvbnN0IHRlc3RUZXh0YnVmZiA9IEJ1ZmZlci5mcm9tKHRlc3RUZXh0LCAndXRmLTgnKTtcbmNvbnN0IHRlc3RJbWdidWZmID0gQnVmZmVyLmZyb20odGVzdEltZ0ZpbGUsICd1dGYtOCcpO1xuXG5jb25zdCBiYXNlNjRUZXh0ID0gdGVzdFRleHRidWZmLnRvU3RyaW5nKCdiYXNlNjQnKTtcbmNvbnN0IGJhc2U2NEltZ0ZpbGUgPSB0ZXN0SW1nYnVmZi50b1N0cmluZygnYmFzZTY0Jyk7XG5cbmNvbnN0IHRlc3RUZXh0UGFyYW0gPSBgd2F0ZXJtYXJrLHRleHRfJHtiYXNlNjRUZXh0fSxyb3RhdGVfMjUsZ19zZSx0XzcwLGNvbG9yX2ZmOTk2NmA7XG5jb25zdCB0ZXN0SW1nUGFyYW0gPSBgd2F0ZXJtYXJrLGltYWdlXyR7YmFzZTY0SW1nRmlsZX0scm90YXRlXzI1LGdfbncsdF83MGA7XG5jb25zdCB0ZXN0TWl4ZWRQYXJhbSA9IGB3YXRlcm1hcmssaW1hZ2VfJHtiYXNlNjRJbWdGaWxlfSx0ZXh0XyR7YmFzZTY0VGV4dH0sZ19udyx0XzIwLGFsaWduXzIsaW50ZXJ2YWxfNSxzaXplXzE0YDtcblxudGVzdCh0ZXN0VGV4dFBhcmFtLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGN0eCA9IGF3YWl0IG1rY3R4KCdleGFtcGxlLmpwZycpO1xuXG4gIGNvbnN0IGFjdGlvbiA9IG5ldyBXYXRlcm1hcmtBY3Rpb24oKTtcbiAgYXdhaXQgYWN0aW9uLnByb2Nlc3MoY3R4LCB0ZXN0VGV4dFBhcmFtLnNwbGl0KCcsJykpO1xuXG4gIGNvbnN0IHsgaW5mbyB9ID0gYXdhaXQgY3R4LmltYWdlLnRvQnVmZmVyKHsgcmVzb2x2ZVdpdGhPYmplY3Q6IHRydWUgfSk7XG4gIGV4cGVjdChpbmZvLmZvcm1hdCkudG9CZShzaGFycC5mb3JtYXQuanBlZy5pZCk7XG59KTtcblxudGVzdCh0ZXN0SW1nUGFyYW0sIGFzeW5jICgpID0+IHtcbiAgY29uc3QgY3R4ID0gYXdhaXQgbWtjdHgoJ2V4YW1wbGUuanBnJyk7XG5cbiAgY29uc3QgYWN0aW9uID0gbmV3IFdhdGVybWFya0FjdGlvbigpO1xuICBhd2FpdCBhY3Rpb24ucHJvY2VzcyhjdHgsIHRlc3RJbWdQYXJhbS5zcGxpdCgnLCcpKTtcblxuICBjb25zdCB7IGluZm8gfSA9IGF3YWl0IGN0eC5pbWFnZS50b0J1ZmZlcih7IHJlc29sdmVXaXRoT2JqZWN0OiB0cnVlIH0pO1xuICBleHBlY3QoaW5mby5mb3JtYXQpLnRvQmUoc2hhcnAuZm9ybWF0LmpwZWcuaWQpO1xufSk7XG5cbnRlc3QodGVzdE1peGVkUGFyYW0sIGFzeW5jICgpID0+IHtcbiAgY29uc3QgY3R4ID0gYXdhaXQgbWtjdHgoJ2V4YW1wbGUuanBnJyk7XG5cbiAgY29uc3QgYWN0aW9uID0gbmV3IFdhdGVybWFya0FjdGlvbigpO1xuICBhd2FpdCBhY3Rpb24ucHJvY2VzcyhjdHgsIHRlc3RNaXhlZFBhcmFtLnNwbGl0KCcsJykpO1xuXG4gIGNvbnN0IHsgaW5mbyB9ID0gYXdhaXQgY3R4LmltYWdlLnRvQnVmZmVyKHsgcmVzb2x2ZVdpdGhPYmplY3Q6IHRydWUgfSk7XG4gIGV4cGVjdChpbmZvLmZvcm1hdCkudG9CZShzaGFycC5mb3JtYXQuanBlZy5pZCk7XG59KTtcblxudGVzdChgZGlzYWJsZSAke0ZlYXR1cmVzLlJlYWRBbGxBbmltYXRlZEZyYW1lc31gLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGN0eCA9IGF3YWl0IG1rY3R4KCdleGFtcGxlLmdpZicpO1xuICBjb25zdCBhY3Rpb24gPSBuZXcgV2F0ZXJtYXJrQWN0aW9uKCk7XG4gIGFjdGlvbi5iZWZvcmVOZXdDb250ZXh0KGN0eCwgdGVzdE1peGVkUGFyYW0uc3BsaXQoJywnKSk7XG5cbiAgZXhwZWN0KGN0eC5mZWF0dXJlc1tGZWF0dXJlcy5SZWFkQWxsQW5pbWF0ZWRGcmFtZXNdKS50b0JlKGZhbHNlKTtcbn0pOyJdfQ==