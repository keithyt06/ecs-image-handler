"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _base_1 = require("../../../src/processor/image/_base");
test(`${_base_1.ActionMask.name} all enabled by default`, () => {
    const actions = '1 1 1 1 1 1'.split(' ');
    const s = new _base_1.ActionMask(actions);
    expect(s.length).toBe(actions.length);
    expect(s.filterEnabledActions()).toEqual(actions);
});
test(`${_base_1.ActionMask.name} getAction`, () => {
    const actions = '1 2 3 4 5 6'.split(' ');
    const s = new _base_1.ActionMask(actions);
    expect(s.length).toBe(actions.length);
    s.disable(0);
    s.enable(0);
    expect(s.isDisabled(0)).toBeFalsy();
    s.forEachAction((action, enable, index) => {
        expect(s.getAction(index)).toEqual(action);
        expect(s.isEnabled(index)).toBe(enable);
        expect(action).toBe(`${1 + index}`);
    });
});
test(`${_base_1.ActionMask.name} enable/disable`, () => {
    const actions = '1 2 3 4 5 6'.split(' ');
    const s = new _base_1.ActionMask(actions);
    expect(s.length).toBe(actions.length);
    s.disable(0);
    s.disable(1);
    s.disable(2);
    expect(s.filterEnabledActions().length).toBe(3);
    expect(s.filterEnabledActions()).toEqual('4 5 6'.split(' '));
});
test(`${_base_1.ActionMask.name} forEach enable/disable`, () => {
    const actions = '1 2 3 4 5 6'.split(' ');
    const s = new _base_1.ActionMask(actions);
    expect(s.length).toBe(actions.length);
    s.forEachAction((_, enabled, index) => {
        expect(enabled).toBeTruthy();
        s.disable(index);
    });
    expect(s.filterEnabledActions()).toEqual([]);
});
test(`${_base_1.ActionMask.name} index out of range`, () => {
    const actions = '1 2 3 4 5 6'.split(' ');
    const s = new _base_1.ActionMask(actions);
    expect(() => {
        s.enable(-1);
    }).toThrowError(/Index out of range/);
});
test(`${_base_1.split1.name} split`, () => {
    const s = 'text_SG9ZT0xBQkBvZmZjaWFsK0DvvIEjQO-8gSPvvIEj77-l77yBQO-_pe-8gUAj77-l77yB77-l77yBZQ==';
    expect((0, _base_1.split1)(s, '_')).toEqual([
        'text',
        'SG9ZT0xBQkBvZmZjaWFsK0DvvIEjQO-8gSPvvIEj77-l77yBQO-_pe-8gUAj77-l77yB77-l77yBZQ==',
    ]);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiX2Jhc2UudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Rlc3QvcHJvY2Vzc29yL2ltYWdlL19iYXNlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4REFBd0U7QUFFeEUsSUFBSSxDQUFDLEdBQUcsa0JBQVUsQ0FBQyxJQUFJLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUNyRCxNQUFNLE9BQU8sR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sQ0FBQyxHQUFHLElBQUksa0JBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVsQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLEdBQUcsa0JBQVUsQ0FBQyxJQUFJLFlBQVksRUFBRSxHQUFHLEVBQUU7SUFDeEMsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QyxNQUFNLENBQUMsR0FBRyxJQUFJLGtCQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFbEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXRDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDYixDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1osTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUVwQyxDQUFDLENBQUMsYUFBYSxD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Q0FBQyxJQUFBLGNBQU0sRUFBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDN0IsTUFBTTtRQUNOLGtGQUFrRjtLQUNuRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbk1hc2ssIHNwbGl0MSB9IGZyb20gJy4uLy4uLy4uL3NyYy9wcm9jZXNzb3IvaW1hZ2UvX2Jhc2UnO1xuXG50ZXN0KGAke0FjdGlvbk1hc2submFtZX0gYWxsIGVuYWJsZWQgYnkgZGVmYXVsdGAsICgpID0+IHtcbiAgY29uc3QgYWN0aW9ucyA9ICcxIDEgMSAxIDEgMScuc3BsaXQoJyAnKTtcbiAgY29uc3QgcyA9IG5ldyBBY3Rpb25NYXNrKGFjdGlvbnMpO1xuXG4gIGV4cGVjdChzLmxlbmd0aCkudG9CZShhY3Rpb25zLmxlbmd0aCk7XG4gIGV4cGVjdChzLmZpbHRlckVuYWJsZWRBY3Rpb25zKCkpLnRvRXF1YWwoYWN0aW9ucyk7XG59KTtcblxudGVzdChgJHtBY3Rpb25NYXNrLm5hbWV9IGdldEFjdGlvbmAsICgpID0+IHtcbiAgY29uc3QgYWN0aW9ucyA9ICcxIDIgMyA0IDUgNicuc3BsaXQoJyAnKTtcbiAgY29uc3QgcyA9IG5ldyBBY3Rpb25NYXNrKGFjdGlvbnMpO1xuXG4gIGV4cGVjdChzLmxlbmd0aCkudG9CZShhY3Rpb25zLmxlbmd0aCk7XG5cbiAgcy5kaXNhYmxlKDApO1xuICBzLmVuYWJsZSgwKTtcbiAgZXhwZWN0KHMuaXNEaXNhYmxlZCgwKSkudG9CZUZhbHN5KCk7XG5cbiAgcy5mb3JFYWNoQWN0aW9uKChhY3Rpb24sIGVuYWJsZSwgaW5kZXgpID0+IHtcbiAgICBleHBlY3Qocy5nZXRBY3Rpb24oaW5kZXgpKS50b0VxdWFsKGFjdGlvbik7XG4gICAgZXhwZWN0KHMuaXNFbmFibGVkKGluZGV4KSkudG9CZShlbmFibGUpO1xuICAgIGV4cGVjdChhY3Rpb24pLnRvQmUoYCR7MSArIGluZGV4fWApO1xuICB9KTtcbn0pO1xuXG50ZXN0KGAke0FjdGlvbk1hc2submFtZX0gZW5hYmxlL2Rpc2FibGVgLCAoKSA9PiB7XG4gIGNvbnN0IGFjdGlvbnMgPSAnMSAyIDMgNCA1IDYnLnNwbGl0KCcgJyk7XG4gIGNvbnN0IHMgPSBuZXcgQWN0aW9uTWFzayhhY3Rpb25zKTtcblxuICBleHBlY3Qocy5sZW5ndGgpLnRvQmUoYWN0aW9ucy5sZW5ndGgpO1xuICBzLmRpc2FibGUoMCk7XG4gIHMuZGlzYWJsZSgxKTtcbiAgcy5kaXNhYmxlKDIpO1xuICBleHBlY3Qocy5maWx0ZXJFbmFibGVkQWN0aW9ucygpLmxlbmd0aCkudG9CZSgzKTtcbiAgZXhwZWN0KHMuZmlsdGVyRW5hYmxlZEFjdGlvbnMoKSkudG9FcXVhbCgnNCA1IDYnLnNwbGl0KCcgJykpO1xufSk7XG5cbnRlc3QoYCR7QWN0aW9uTWFzay5uYW1lfSBmb3JFYWNoIGVuYWJsZS9kaXNhYmxlYCwgKCkgPT4ge1xuICBjb25zdCBhY3Rpb25zID0gJzEgMiAzIDQgNSA2Jy5zcGxpdCgnICcpO1xuICBjb25zdCBzID0gbmV3IEFjdGlvbk1hc2soYWN0aW9ucyk7XG5cbiAgZXhwZWN0KHMubGVuZ3RoKS50b0JlKGFjdGlvbnMubGVuZ3RoKTtcbiAgcy5mb3JFYWNoQWN0aW9uKChfLCBlbmFibGVkLCBpbmRleCkgPT4ge1xuICAgIGV4cGVjdChlbmFibGVkKS50b0JlVHJ1dGh5KCk7XG4gICAgcy5kaXNhYmxlKGluZGV4KTtcbiAgfSk7XG4gIGV4cGVjdChzLmZpbHRlckVuYWJsZWRBY3Rpb25zKCkpLnRvRXF1YWwoW10pO1xufSk7XG5cbnRlc3QoYCR7QWN0aW9uTWFzay5uYW1lfSBpbmRleCBvdXQgb2YgcmFuZ2VgLCAoKSA9PiB7XG4gIGNvbnN0IGFjdGlvbnMgPSAnMSAyIDMgNCA1IDYnLnNwbGl0KCcgJyk7XG4gIGNvbnN0IHMgPSBuZXcgQWN0aW9uTWFzayhhY3Rpb25zKTtcblxuICBleHBlY3QoKCkgPT4ge1xuICAgIHMuZW5hYmxlKC0xKTtcbiAgfSkudG9UaHJvd0Vycm9yKC9JbmRleCBvdXQgb2YgcmFuZ2UvKTtcbn0pO1xuXG50ZXN0KGAke3NwbGl0MS5uYW1lfSBzcGxpdGAsICgpID0+IHtcbiAgY29uc3QgcyA9ICd0ZXh0X1NHOVpUMHhCUWtCdlptWmphV0ZzSzBEdnZJRWpRTy04Z1NQdnZJRWo3Ny1sNzd5QlFPLV9wZS04Z1VBajc3LWw3N3lCNzctbDc3eUJaUT09JztcbiAgZXhwZWN0KHNwbGl0MShzLCAnXycpKS50b0VxdWFsKFtcbiAgICAndGV4dCcsXG4gICAgJ1NHOVpUMHhCUWtCdlptWmphV0ZzSzBEdnZJRWpRTy04Z1NQdnZJRWo3Ny1sNzd5QlFPLV9wZS04Z1VBajc3LWw3N3lCNzctbDc3eUJaUT09JyxcbiAgXSk7XG59KTtcblxuXG4iXX0=