"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const HttpErrors = require("http-errors");
const store_1 = require("../src/store");
test('local store', async () => {
    const store = new store_1.LocalStore();
    const { buffer } = await store.get(path.join(__dirname, 'fixtures/example.jpg'));
    expect(buffer.length).toBe(21839);
});
test('local store shortcut', async () => {
    const fn = jest.fn();
    const store = new store_1.LocalStore();
    const { buffer } = await store.get(path.join(__dirname, 'fixtures/example.jpg'), fn);
    expect(buffer.length).toBe(21839);
});
test('s3 store shortcut', async () => {
    const bypass = () => {
        // NOTE: This is intended to tell CloudFront to directly access the s3 object without through ECS cluster.
        throw new HttpErrors[403]('Please visit s3 directly');
    };
    const store = new store_1.S3Store('sih-input');
    void expect(store.get('Sample-Small-Image-PNG-file-Download.png', bypass))
        .rejects
        .toThrowError(/Please visit s3/);
    void expect(store.get('Sample-Small-Image-PNG-file-Download.png', bypass))
        .rejects
        .toThrow(HttpErrors.HttpError);
    void expect(store.get('Sample-Small-Image-PNG-file-Download.png', bypass))
        .rejects
        .toThrow(expect.objectContaining({ status: 403 }));
});
test('MemKV Store', async () => {
    const store = new store_1.MemKVStore({
        a: { id: 'a', value: 'a' },
        b: { id: 'b', value: 'b' },
    });
    expect(await store.get('a')).toEqual({ id: 'a', value: 'a' });
    expect(await store.get('123')).toEqual({});
});
test.skip('s3 store', async () => {
    const store = new store_1.S3Store('sih-input');
    const { buffer, type } = await store.get('Sample-Small-Image-PNG-file-Download.png');
    expect(type).toBe('image/png');
    expect(buffer.length).toBe(2678371);
}, 10 * 1000);
test.skip('dynamodb store', async () => {
    const table = 'serverless-new-image-handler-stack-serverlessecrimagehandlerstackStyleTableE94C4297-PTLOYODP1J7E';
    const ddbstore = new store_1.DynamoDBStore(table);
    console.log(await ddbstore.get('hello'));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3Qvc3RvcmUudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3QiwwQ0FBMEM7QUFDMUMsd0NBQThFO0FBRTlFLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDN0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxrQkFBVSxFQUFFLENBQUM7SUFDL0IsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7SUFFakYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEMsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsc0JBQXNCLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDdEMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ3JCLE1BQU0sS0FBSyxHQUFHLElBQUksa0JBQVUsRUFBRSxDQUFDO0lBQy9CLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsc0JBQXNCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVyRixNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQyxDQUFDLENBQUMsQ0FBQztBQUdILElBQUksQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNuQyxNQUFNLE1BQU0sR0FBRyxHQUFHLEVBQUU7UUFDbEIsMEdBQTBHO1FBQzFHLE1BQU0sSUFBSSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUN4RCxDQUFDLENBQUM7SUFDRixNQUFNLEtBQUssR0FBRyxJQUFJLGVBQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUV2QyxLQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLDBDQUEwQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZFLE9BQU87U0FDUCxZQUFZLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNuQyxLQUFLLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLDBDQUEwQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZFLE9BQU87U0FDUCxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2pDLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsMENBQTBDLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDdkUsT0FBTztTQUNQLE9BQU8sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELENBQUMsQ0FBQyxDQUFDO0FBR0gsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLElBQUksRUFBRTtJQUM3QixNQUFNLEtBQUssR0FBRyxJQUFJLGtCQUFVLENBQUM7UUFDM0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO1FBQzFCLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRTtLQUMzQixDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUM5RCxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQyxDQUFDO0FBR0gsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDL0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxlQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsMENBQTBDLENBQUMsQ0FBQztJQUVyRixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQy9CLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3RDLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFHZCxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3JDLE1BQU0sS0FBSyxHQUFHLGtHQUFrRyxDQUFDO0lBQ2pILE1BQU0sUUFBUSxHQUFHLElBQUkscUJBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUUxQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQzNDLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIEh0dHBFcnJvcnMgZnJvbSAnaHR0cC1lcnJvcnMnO1xuaW1wb3J0IHsgRHluYW1vREJTdG9yZSwgTG9jYWxTdG9yZSwgTWVtS1ZTdG9yZSwgUzNTdG9yZSB9IGZyb20gJy4uL3NyYy9zdG9yZSc7XG5cbnRlc3QoJ2xvY2FsIHN0b3JlJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBzdG9yZSA9IG5ldyBMb2NhbFN0b3JlKCk7XG4gIGNvbnN0IHsgYnVmZmVyIH0gPSBhd2FpdCBzdG9yZS5nZXQocGF0aC5qb2luKF9fZGlybmFtZSwgJ2ZpeHR1cmVzL2V4YW1wbGUuanBnJykpO1xuXG4gIGV4cGVjdChidWZmZXIubGVuZ3RoKS50b0JlKDIxODM5KTtcbn0pO1xuXG50ZXN0KCdsb2NhbCBzdG9yZSBzaG9ydGN1dCcsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgZm4gPSBqZXN0LmZuKCk7XG4gIGNvbnN0IHN0b3JlID0gbmV3IExvY2FsU3RvcmUoKTtcbiAgY29uc3QgeyBidWZmZXIgfSA9IGF3YWl0IHN0b3JlLmdldChwYXRoLmpvaW4oX19kaXJuYW1lLCAnZml4dHVyZXMvZXhhbXBsZS5qcGcnKSwgZm4pO1xuXG4gIGV4cGVjdChidWZmZXIubGVuZ3RoKS50b0JlKDIxODM5KTtcbn0pO1xuXG5cbnRlc3QoJ3MzIHN0b3JlIHNob3J0Y3V0JywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBieXBhc3MgPSAoKSA9PiB7XG4gICAgLy8gTk9URTogVGhpcyBpcyBpbnRlbmRlZCB0byB0ZWxsIENsb3VkRnJvbnQgdG8gZGlyZWN0bHkgYWNjZXNzIHRoZSBzMyBvYmplY3Qgd2l0aG91dCB0aHJvdWdoIEVDUyBjbHVzdGVyLlxuICAgIHRocm93IG5ldyBIdHRwRXJyb3JzWzQwM10oJ1BsZWFzZSB2aXNpdCBzMyBkaXJlY3RseScpO1xuICB9O1xuICBjb25zdCBzdG9yZSA9IG5ldyBTM1N0b3JlKCdzaWgtaW5wdXQnKTtcblxuICB2b2lkIGV4cGVjdChzdG9yZS5nZXQoJ1NhbXBsZS1TbWFsbC1JbWFnZS1QTkctZmlsZS1Eb3dubG9hZC5wbmcnLCBieXBhc3MpKVxuICAgIC5yZWplY3RzXG4gICAgLnRvVGhyb3dFcnJvcigvUGxlYXNlIHZpc2l0IHMzLyk7XG4gIHZvaWQgZXhwZWN0KHN0b3JlLmdldCgnU2FtcGxlLVNtYWxsLUltYWdlLVBORy1maWxlLURvd25sb2FkLnBuZycsIGJ5cGFzcykpXG4gICAgLnJlamVjdHNcbiAgICAudG9UaHJvdyhIdHRwRXJyb3JzLkh0dHBFcnJvcik7XG4gIHZvaWQgZXhwZWN0KHN0b3JlLmdldCgnU2FtcGxlLVNtYWxsLUltYWdlLVBORy1maWxlLURvd25sb2FkLnBuZycsIGJ5cGFzcykpXG4gICAgLnJlamVjdHNcbiAgICAudG9UaHJvdyhleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7IHN0YXR1czogNDAzIH0pKTtcbn0pO1xuXG5cbnRlc3QoJ01lbUtWIFN0b3JlJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBzdG9yZSA9IG5ldyBNZW1LVlN0b3JlKHtcbiAgICBhOiB7IGlkOiAnYScsIHZhbHVlOiAnYScgfSxcbiAgICBiOiB7IGlkOiAnYicsIHZhbHVlOiAnYicgfSxcbiAgfSk7XG5cbiAgZXhwZWN0KGF3YWl0IHN0b3JlLmdldCgnYScpKS50b0VxdWFsKHsgaWQ6ICdhJywgdmFsdWU6ICdhJyB9KTtcbiAgZXhwZWN0KGF3YWl0IHN0b3JlLmdldCgnMTIzJykpLnRvRXF1YWwoe30pO1xufSk7XG5cblxudGVzdC5za2lwKCdzMyBzdG9yZScsIGFzeW5jICgpID0+IHtcbiAgY29uc3Qgc3RvcmUgPSBuZXcgUzNTdG9yZSgnc2loLWlucHV0Jyk7XG4gIGNvbnN0IHsgYnVmZmVyLCB0eXBlIH0gPSBhd2FpdCBzdG9yZS5nZXQoJ1NhbXBsZS1TbWFsbC1JbWFnZS1QTkctZmlsZS1Eb3dubG9hZC5wbmcnKTtcblxuICBleHBlY3QodHlwZSkudG9CZSgnaW1hZ2UvcG5nJyk7XG4gIGV4cGVjdChidWZmZXIubGVuZ3RoKS50b0JlKDI2NzgzNzEpO1xufSwgMTAgKiAxMDAwKTtcblxuXG50ZXN0LnNraXAoJ2R5bmFtb2RiIHN0b3JlJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCB0YWJsZSA9ICdzZXJ2ZXJsZXNzLW5ldy1pbWFnZS1oYW5kbGVyLXN0YWNrLXNlcnZlcmxlc3NlY3JpbWFnZWhhbmRsZXJzdGFja1N0eWxlVGFibGVFOTRDNDI5Ny1QVExPWU9EUDFKN0UnO1xuICBjb25zdCBkZGJzdG9yZSA9IG5ldyBEeW5hbW9EQlN0b3JlKHRhYmxlKTtcblxuICBjb25zb2xlLmxvZyhhd2FpdCBkZGJzdG9yZS5nZXQoJ2hlbGxvJykpO1xufSk7Il19