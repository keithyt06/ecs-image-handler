"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const S3 = require("aws-sdk/clients/s3");
const SecretsManager = require("aws-sdk/clients/secretsmanager");
const SSM = require("aws-sdk/clients/ssm");
const HttpErrors = require("http-errors");
const Koa = require("koa"); // http://koajs.cn
const bodyParser = require("koa-bodyparser");
const koaCash = require("koa-cash");
const logger = require("koa-logger");
const Router = require("koa-router");
const lru_cache_1 = require("lru-cache");
const sharp = require("sharp");
const config_1 = require("./config");
const debug_1 = require("./debug");
const default_1 = require("./default");
const is = require("./is");
const processor_1 = require("./processor");
const MB = 1048576;
const ssm = new SSM({ region: config_1.default.region });
const smclient = new SecretsManager({ region: config_1.default.region });
// Initialize buffer stores for all configured buckets
const bufferStores = (0, default_1.getBufferStores)();
const DefaultBufferStore = (0, default_1.bufferStore)();
const app = new Koa();
const router = new Router();
const lruCache = new lru_cache_1.LRUCache({
    max: config_1.default.CACHE_MAX_ITEMS,
    maxSize: config_1.default.CACHE_MAX_SIZE_MB * MB,
    ttl: config_1.default.CACHE_TTL_SEC * 1000,
    sizeCalculation: (value) => {
        return value.body.length;
    },
});
sharp.cache({ items: 1000, files: 200, memory: 2000 });
app.use(logger());
app.use(errorHandler());
app.use(bodyParser());
app.use(koaCash({
    setCachedHeader: true,
    hash(ctx) {
        return ctx.headers['x-bucket'] + ctx.request.url;
    },
    get: (key) => {
        return Promise.resolve(lruCache.get(key));
    },
    set: (key, value) => {
        lruCache.set(key, value);
        return Promise.resolve();
    },
}));
router.post('/images', async (ctx) => {
    console.log('post request body=', ctx.request.body);
    const opt = await validatePostRequest(ctx);
    ctx.path = opt.sourceObject;
    ctx.query['x-oss-process'] = opt.params;
    ctx.headers['x-bucket'] = opt.sourceBucket;
    const { data, type } = await ossprocess(ctx);
    if (type !== 'application/json') {
        // TODO: Do we need to abstract this with IBufferStore?
        const _s3 = new S3({ region: config_1.default.region });
        await _s3.putObject({
            Bucket: opt.targetBucket,
            Key: opt.targetObject,
            ContentType: type,
            Body: data,
        }).promise();
        ctx.body = `saved result to s3://${opt.targetBucket}/${opt.targetObject}`;
    }
});
router.get(['/', '/ping'], async (ctx) => {
    ctx.body = 'ok';
    try {
        await setMaxGifLimit();
    }
    catch (err) {
        console.error(err);
    }
});
router.get(['/debug', '/_debug'], async (ctx) => {
    console.log(JSON.stringify((0, debug_1.default)(lruCache)));
    ctx.status = 400;
    ctx.body = 'Please check your server logs for more details!';
});
router.get('/(.*)', async (ctx) => {
    if (await ctx.cashed())
        return;
    const queue = sharp.counters().queue;
    if (queue > config_1.default.sharpQueueLimit) {
        ctx.body = { message: 'Too many requests, please try again later.' };
        ctx.status = 429;
        return;
    }
    // 检查Accept头是否包含image/avif
    const acceptHeader = ctx.get('Accept') || '';
    const acceptsAvif = acceptHeader.includes('image/avif');
    // 如果客户端支持AVIF并且配置启用了自动AVIF
    if (acceptsAvif && config_1.default.autoAvif) {
        ctx.features = ctx.features || {};
        ctx.features[processor_1.Features.AutoAvif] = true;
    }
    const { data, type, headers } = await ossprocess(ctx, bypass);
    ctx.body = data;
    ctx.type = type;
    ctx.set(headers);
});
app.use(router.routes());
app.use(router.allowedMethods);
app.on('error', (err) => {
    const msg = err.stack || err.toString();
    console.error(`\n${msg.replace(/^/gm, '  ')}\n`);
});
app.listen(config_1.default.port, () => {
    console.log(`Server running on port ${config_1.default.port}`);
    console.log('Config:', JSON.stringify(config_1.default));
});
function errorHandler() {
    return async (ctx, next) => {
        try {
            await next();
        }
        catch (err) {
            // ENOENT support
            if (err.code === 'ENOENT') {
                err.status = 404;
                err.message = 'NotFound';
            }
            ctx.status = err.statusCode || err.status || 500;
            ctx.body = {
                status: err.status,
                name: err.name,
                message: err.message,
            };
            ctx.app.emit('error', err, ctx);
        }
    };
}
function getBufferStore(ctx) {
    const bucket = ctx.headers['x-bucket'];
    if (bucket && typeof bucket === 'string') {
        // Check if we have a store for this bucket
        const store = bufferStores.get(bucket);
        if (store) {
            return store;
        }
        // If the bucket is not in our pre-configured list but is specified in the request,
        // create a new store for it (this allows dynamic bucket access)
        const newStore = (0, default_1.bufferStore)(bucket);
        bufferStores.set(bucket, newStore);
        return newStore;
    }
    return DefaultBufferStore;
}
async function ossprocess(ctx, beforeGetFn) {
    const { uri, actions } = (0, default_1.parseRequest)(ctx.path, ctx.query);
    // 只通过 x-bucket 头选择存储桶，不再解析路径
    const bs = getBufferStore(ctx);
    if (actions.length > 1) {
        const processor = (0, default_1.getProcessor)(actions[0]);
        const context = await processor.newContext(uri, actions, bs);
        // 如果客户端支持AVIF并且配置启用了自动AVIF
        if (ctx.features && ctx.features[processor_1.Features.AutoAvif]) {
            context.features[processor_1.Features.AutoAvif] = true;
        }
        const { data, type } = await processor.process(context);
        return { data, type, headers: context.headers };
    }
    else {
        const { buffer, type, headers } = await bs.get(uri, beforeGetFn);
        return { data: buffer, type: type, headers: headers };
    }
}
async function validatePostRequest(ctx) {
    // Fox edited in 2022/04/25: enhance the security of the post requests
    const authHeader = ctx.get('X-Client-Authorization');
    const secretHeader = await getHeaderFromSecretsManager();
    if (authHeader !== secretHeader) {
        throw new processor_1.InvalidArgument('Invalid post header.');
    }
    const body = ctx.request.body;
    if (!body) {
        throw new processor_1.InvalidArgument('Empty post body.');
    }
    const valid = body.params
        && body.sourceBucket
        && body.sourceObject
        && body.targetBucket
        && body.targetObject;
    if (!valid) {
        throw new processor_1.InvalidArgument('Invalid post body.');
    }
    return {
        params: body.params,
        sourceBucket: body.sourceBucket,
        sourceObject: body.sourceObject,
        targetBucket: body.targetBucket,
        targetObject: body.targetObject,
    };
}
function bypass() {
    // NOTE: This is intended to tell CloudFront to directly access the s3 object.
    throw new HttpErrors[403]('Please visit s3 directly');
}
async function getSecretFromSecretsManager() {
    // Load the AWS SDK
    const secretName = config_1.default.secretName;
    return smclient.getSecretValue({ SecretId: secretName }).promise();
}
async function getHeaderFromSecretsManager() {
    const secret = await getSecretFromSecretsManager();
    const secretString = secret.SecretString;
    const keypair = JSON.parse(secretString);
    return keypair['X-Client-Authorization'];
}
async function setMaxGifLimit() {
    var _a;
    if (config_1.default.configJsonParameterName) {
        const data = await ssm.getParameter({ Name: config_1.default.configJsonParameterName }).promise();
        if (data.Parameter) {
            const configJson = JSON.parse((_a = data.Parameter.Value) !== null && _a !== void 0 ? _a : '{}');
            const maxGifSizeMB = configJson.max_gif_size_mb;
            if (is.number(maxGifSizeMB)) {
                (0, default_1.setMaxGifSizeMB)(maxGifSizeMB);
            }
            const maxGifPages = configJson.max_gif_pages;
            if (is.number(maxGifPages)) {
                (0, default_1.setMaxGifPages)(maxGifPages);
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,