"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CircleAction = void 0;
const sharp = require("sharp");
const __1 = require("..");
const is = require("../../is");
const _base_1 = require("./_base");
class CircleAction extends _base_1.BaseImageAction {
    constructor() {
        super(...arguments);
        this.name = 'circle';
    }
    validate(params) {
        let opt = { r: 1 };
        if (params.length !== 2) {
            throw new __1.InvalidArgument('Circle param error, e.g: circle,r_30');
        }
        for (const param of params) {
            if ((this.name === param) || (!param)) {
                continue;
            }
            const [k, v] = param.split('_');
            if (k === 'r') {
                const r = Number.parseInt(v, 10);
                if (is.inRange(r, 1, 4096)) {
                    opt.r = r;
                }
                else {
                    throw new __1.InvalidArgument('Circle param \'r\' must be between 1 and 4096');
                }
            }
            else {
                throw new __1.InvalidArgument(`Unkown param: "${k}"`);
            }
        }
        return opt;
    }
    async process(ctx, params) {
        var _a;
        const opt = this.validate(params);
        const metadata = await sharp(await ctx.image.toBuffer()).metadata(); // https://github.com/lovell/sharp/issues/2959
        if (!(metadata.width && metadata.height)) {
            throw new __1.InvalidArgument('Can\'t read image\'s width and height');
        }
        const pages = (_a = metadata.pages) !== null && _a !== void 0 ? _a : 1;
        const cx = metadata.width / 2;
        const cy = metadata.height / 2;
        const s = Math.min(metadata.width, metadata.height); // shorter side
        const r = Math.min(opt.r, s / 2); // radius
        const d = Math.min(Math.round(2 * r) + 1, s); // diameter
        const circles = Array.from({ length: pages }, (_, i) => `<circle cx="${r}" cy="${r + i * d}" r="${r}" />`);
        const mask = Buffer.from(`<svg viewBox="0 0 ${d} ${pages * d}">
      ${circles.join('\n')}
    </svg>`);
        const region = {
            left: Math.max(Math.round(cx - r), 0),
            top: Math.max(Math.round(cy - r), 0),
            width: d,
            height: d,
        };
        ctx.image.extract(region).composite([
            { input: mask, blend: 'dest-in' },
        ]);
    }
}
exports.CircleAction = CircleAction;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Byb2Nlc3Nvci9pbWFnZS9jaXJjbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQStCO0FBRS9CLDBCQUE0RDtBQUM1RCwrQkFBK0I7QUFDL0IsbUNBQTBDO0FBTTFDLE1BQWEsWUFBYSxTQUFRLHVCQUFlO0lBQWpEOztRQUNrQixTQUFJLEdBQVcsUUFBUSxDQUFDO0lBOEQxQyxDQUFDO0lBNURRLFFBQVEsQ0FBQyxNQUFnQjtRQUM5QixJQUFJLEdBQUcsR0FBZSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUUvQixJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sSUFBSSxtQkFBZSxDQUFDLHNDQUFzQyxDQUFDLENBQUM7U0FDbkU7UUFFRCxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRTtZQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3JDLFNBQVM7YUFDVjtZQUNELE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUU7Z0JBQ2IsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ2pDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFO29CQUMxQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDWDtxQkFBTTtvQkFDTCxNQUFNLElBQUksbUJBQWUsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO2lCQUM1RTthQUNGO2lCQUFNO2dCQUNMLE1BQU0sSUFBSSxtQkFBZSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ25EO1NBQ0Y7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFHTSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQWtCLEVBQUUsTUFBZ0I7O1FBQ3ZELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyw4Q0FBOEM7UUFDbkgsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDeEMsTUFBTSxJQUFJLG1CQUFlLENBQUMsdUNBQXVDLENBQUMsQ0FBQztTQUNwRTtRQUVELE1BQU0sS0FBSyxHQUFHLE1BQUEsUUFBUSxDQUFDLEtBQUssbUNBQUksQ0FBQyxDQUFDO1FBQ2xDLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxlQUFlO1FBQ3BFLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTO1FBQzNDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVztRQUV6RCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQ3JELGVBQWUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUNsRCxDQUFDO1FBQ0YsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDO1FBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1dBQ2YsQ0FBQyxDQUFDO1FBRVQsTUFBTSxNQUFNLEdBQUc7WUFDYixJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDckMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BDLEtBQUssRUFBRSxDQUFDO1lBQ1IsTUFBTSxFQUFFLENBQUM7U0FDVixDQUFDO1FBRUYsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ2xDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO1NBQ2xDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRjtBQS9ERCxvQ0ErREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBzaGFycCBmcm9tICdzaGFycCc7XG5pbXBvcnQgeyBJSW1hZ2VDb250ZXh0IH0gZnJvbSAnLic7XG5pbXBvcnQgeyBJQWN0aW9uT3B0cywgUmVhZE9ubHksIEludmFsaWRBcmd1bWVudCB9IGZyb20gJy4uJztcbmltcG9ydCAqIGFzIGlzIGZyb20gJy4uLy4uL2lzJztcbmltcG9ydCB7IEJhc2VJbWFnZUFjdGlvbiB9IGZyb20gJy4vX2Jhc2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENpcmNsZU9wdHMgZXh0ZW5kcyBJQWN0aW9uT3B0cyB7XG4gIHI6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIENpcmNsZUFjdGlvbiBleHRlbmRzIEJhc2VJbWFnZUFjdGlvbiB7XG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmcgPSAnY2lyY2xlJztcblxuICBwdWJsaWMgdmFsaWRhdGUocGFyYW1zOiBzdHJpbmdbXSk6IFJlYWRPbmx5PENpcmNsZU9wdHM+IHtcbiAgICBsZXQgb3B0OiBDaXJjbGVPcHRzID0geyByOiAxIH07XG5cbiAgICBpZiAocGFyYW1zLmxlbmd0aCAhPT0gMikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudCgnQ2lyY2xlIHBhcmFtIGVycm9yLCBlLmc6IGNpcmNsZSxyXzMwJyk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBwYXJhbSBvZiBwYXJhbXMpIHtcbiAgICAgIGlmICgodGhpcy5uYW1lID09PSBwYXJhbSkgfHwgKCFwYXJhbSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBbaywgdl0gPSBwYXJhbS5zcGxpdCgnXycpO1xuICAgICAgaWYgKGsgPT09ICdyJykge1xuICAgICAgICBjb25zdCByID0gTnVtYmVyLnBhcnNlSW50KHYsIDEwKTtcbiAgICAgICAgaWYgKGlzLmluUmFuZ2UociwgMSwgNDA5NikpIHtcbiAgICAgICAgICBvcHQuciA9IHI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudCgnQ2lyY2xlIHBhcmFtIFxcJ3JcXCcgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDQwOTYnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudChgVW5rb3duIHBhcmFtOiBcIiR7a31cImApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvcHQ7XG4gIH1cblxuXG4gIHB1YmxpYyBhc3luYyBwcm9jZXNzKGN0eDogSUltYWdlQ29udGV4dCwgcGFyYW1zOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IG9wdCA9IHRoaXMudmFsaWRhdGUocGFyYW1zKTtcbiAgICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IHNoYXJwKGF3YWl0IGN0eC5pbWFnZS50b0J1ZmZlcigpKS5tZXRhZGF0YSgpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vbG92ZWxsL3NoYXJwL2lzc3Vlcy8yOTU5XG4gICAgaWYgKCEobWV0YWRhdGEud2lkdGggJiYgbWV0YWRhdGEuaGVpZ2h0KSkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudCgnQ2FuXFwndCByZWFkIGltYWdlXFwncyB3aWR0aCBhbmQgaGVpZ2h0Jyk7XG4gICAgfVxuXG4gICAgY29uc3QgcGFnZXMgPSBtZXRhZGF0YS5wYWdlcyA/PyAxO1xuICAgIGNvbnN0IGN4ID0gbWV0YWRhdGEud2lkdGggLyAyO1xuICAgIGNvbnN0IGN5ID0gbWV0YWRhdGEuaGVpZ2h0IC8gMjtcbiAgICBjb25zdCBzID0gTWF0aC5taW4obWV0YWRhdGEud2lkdGgsIG1ldGFkYXRhLmhlaWdodCk7IC8vIHNob3J0ZXIgc2lkZVxuICAgIGNvbnN0IHIgPSBNYXRoLm1pbihvcHQuciwgcyAvIDIpOyAvLyByYWRpdXNcbiAgICBjb25zdCBkID0gTWF0aC5taW4oTWF0aC5yb3VuZCgyICogcikgKyAxLCBzKTsgLy8gZGlhbWV0ZXJcblxuICAgIGNvbnN0IGNpcmNsZXMgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBwYWdlcyB9LCAoXywgaSkgPT5cbiAgICAgIGA8Y2lyY2xlIGN4PVwiJHtyfVwiIGN5PVwiJHtyICsgaSAqIGR9XCIgcj1cIiR7cn1cIiAvPmAsXG4gICAgKTtcbiAgICBjb25zdCBtYXNrID0gQnVmZmVyLmZyb20oYDxzdmcgdmlld0JveD1cIjAgMCAke2R9ICR7cGFnZXMgKiBkfVwiPlxuICAgICAgJHtjaXJjbGVzLmpvaW4oJ1xcbicpfVxuICAgIDwvc3ZnPmApO1xuXG4gICAgY29uc3QgcmVnaW9uID0ge1xuICAgICAgbGVmdDogTWF0aC5tYXgoTWF0aC5yb3VuZChjeCAtIHIpLCAwKSxcbiAgICAgIHRvcDogTWF0aC5tYXgoTWF0aC5yb3VuZChjeSAtIHIpLCAwKSxcbiAgICAgIHdpZHRoOiBkLFxuICAgICAgaGVpZ2h0OiBkLFxuICAgIH07XG5cbiAgICBjdHguaW1hZ2UuZXh0cmFjdChyZWdpb24pLmNvbXBvc2l0ZShbXG4gICAgICB7IGlucHV0OiBtYXNrLCBibGVuZDogJ2Rlc3QtaW4nIH0sXG4gICAgXSk7XG4gIH1cbn0iXX0=