"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const url_1 = require("url");
const sharp = require("sharp");
const index_lambda_1 = require("../src/index-lambda");
function URLSearchParams2Obj(param) {
    const o = {};
    for (const [key, value] of param.entries()) {
        o[key] = value;
    }
    return o;
}
function mkevt(p) {
    const u = new url_1.URL(p, 'http://test');
    return {
        version: '2.0',
        routeKey: 'ANY /{proxy+}',
        rawPath: u.pathname,
        rawQueryString: u.search.substring(1),
        cookies: [
            's_fid=********',
        ],
        headers: {
            'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
            'accept-encoding': 'gzip, deflate, br',
            'accept-language': 'en,zh-CN;q=0.9,zh;q=0.8',
            'content-length': '0',
            'host': '********.execute-api.us-west-2.amazonaws.com',
            'sec-ch-ua': '" Not A;Brand";v="99", "Chromium";v="100", "Google Chrome";v="100"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"macOS"',
            'sec-fetch-dest': 'document',
            'sec-fetch-mode': 'navigate',
            'sec-fetch-site': 'none',
            'sec-fetch-user': '?1',
            'upgrade-insecure-requests': '1',
            'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36',
            'x-amzn-trace-id': 'Root=1-625b948f-514240be75d2c50924dcaf42',
            'x-forwarded-for': '127.0.0.1',
            'x-forwarded-port': '443',
            'x-forwarded-proto': 'https',
        },
        queryStringParameters: URLSearchParams2Obj(u.searchParams),
        requestContext: {
            accountId: '********',
            apiId: '********',
            domainName: '********.execute-api.us-west-2.amazonaws.com',
            domainPrefix: '********',
            http: {
                method: 'GET',
                path: u.pathname,
                protocol: 'HTTP/1.1',
                sourceIp: '127.0.0.1',
                userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36',
            },
            requestId: '*****',
            routeKey: 'ANY /{proxy+}',
            stage: '$default',
            time: '17/Apr/2022:04:16:15 +0000',
            timeEpoch: 1650168975606,
        },
        pathParameters: {
            proxy: 'example.jpg',
        },
        isBase64Encoded: false,
    };
}
test('index-lambda.ts example.jpg?x-oss-process=image/resize,w_100/quality,q_50', async () => {
    const res = await (0, index_lambda_1.handler)(mkevt('example.jpg?x-oss-process=image/resize,w_100/quality,q_50'));
    expect(res.isBase64Encoded).toBeTruthy();
    expect(res.statusCode).toBe(200);
    expect(res.headers['Content-Type']).toBe('image/jpeg');
    expect(res.headers['Last-Modified']).toBe('Wed, 21 Oct 2014 07:28:00 GMT');
    expect(res.headers['Cache-Control']).toBe('max-age');
    const metadata = await sharp(Buffer.from(res.body, 'base64')).metadata();
    expect(metadata.width).toBe(100);
    expect(metadata.height).toBe(67);
    expect(metadata.size).toBe(1352);
    expect(metadata.format).toBe('jpeg');
});
test('index-lambda.ts example.gif?x-oss-process=image/resize,w_100/quality,q_50', async () => {
    const res = await (0, index_lambda_1.handler)(mkevt('example.gif?x-oss-process=image/resize,w_100/quality,q_50'));
    expect(res.isBase64Encoded).toBeTruthy();
    expect(res.statusCode).toBe(200);
    expect(res.headers['Content-Type']).toBe('image/gif');
    const metadata = await sharp(Buffer.from(res.body, 'base64')).metadata();
    expect(metadata.width).toBe(100);
    expect(metadata.height).toBe(60);
    expect(metadata.size).toBe(3544);
    expect(metadata.format).toBe('gif');
    expect(metadata.pages).toBe(3);
});
test('index-lambda.ts example.gif?x-oss-process=image/format,png', async () => {
    const res = await (0, index_lambda_1.handler)(mkevt('example.gif?x-oss-process=image/format,png'));
    expect(res.isBase64Encoded).toBeTruthy();
    expect(res.statusCode).toBe(200);
    expect(res.headers['Content-Type']).toBe('image/png');
    const metadata = await sharp(Buffer.from(res.body, 'base64')).metadata();
    expect(metadata.width).toBe(500);
    expect(metadata.height).toBe(300);
    expect(metadata.format).toBe('png');
});
test('index-lambda.ts example.gif?x-oss-process=image/resize,w_1/info', async () => {
    const res = await (0, index_lambda_1.handler)(mkevt('example.gif?x-oss-process=image/resize,w_1/info'));
    expect(res.isBase64Encoded).toBeFalsy();
    expect(res.statusCode).toBe(200);
    expect(res.headers['Content-Type']).toBe('application/json');
    expect(res.body).toBe(JSON.stringify({
        FileSize: {
            value: '21957',
        },
        Format: {
            value: 'gif',
        },
        ImageHeight: {
            value: '300',
        },
        ImageWidth: {
            value: '500',
        },
    }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgtbGFtYmRhLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi90ZXN0L2luZGV4LWxhbWJkYS50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkJBQTJDO0FBQzNDLCtCQUErQjtBQUMvQixzREFBOEM7QUFFOUMsU0FBUyxtQkFBbUIsQ0FBQyxLQUFzQjtJQUNqRCxNQUFNLENBQUMsR0FBNEIsRUFBRSxDQUFDO0lBQ3RDLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDMUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztLQUNoQjtJQUNELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQUVELFNBQVMsS0FBSyxDQUFDLENBQVM7SUFDdEIsTUFBTSxDQUFDLEdBQUcsSUFBSSxTQUFHLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3BDLE9BQU87UUFDTCxPQUFPLEVBQUUsS0FBSztRQUNkLFFBQVEsRUFBRSxlQUFlO1FBQ3pCLE9BQU8sRUFBRSxDQUFDLENBQUMsUUFBUTtRQUNuQixjQUFjLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sRUFBRTtZQUNQLGdCQUFnQjtTQUNqQjtRQUNELE9BQU8sRUFBRTtZQUNQLFFBQVEsRUFBRSx5SUFBeUk7WUFDbkosaUJBQWlCLEVBQUUsbUJBQW1CO1lBQ3RDLGlCQUFpQixFQUFFLHlCQUF5QjtZQUM1QyxnQkFBZ0IsRUFBRSxHQUFHO1lBQ3JCLE1BQU0sRUFBRSw4Q0FBOEM7WUFDdEQsV0FBVyxFQUFFLG9FQUFvRTtZQUNqRixrQkFBa0IsRUFBRSxJQUFJO1lBQ3hCLG9CQUFvQixFQUFFLFNBQVM7WUFDL0IsZ0JBQWdCLEVBQUUsVUFBVTtZQUM1QixnQkFBZ0IsRUFBRSxVQUFVO1lBQzVCLGdCQUFnQixFQUFF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U2VhcmNoUGFyYW1zIH0gZnJvbSAndXJsJztcbmltcG9ydCAqIGFzIHNoYXJwIGZyb20gJ3NoYXJwJztcbmltcG9ydCB7IGhhbmRsZXIgfSBmcm9tICcuLi9zcmMvaW5kZXgtbGFtYmRhJztcblxuZnVuY3Rpb24gVVJMU2VhcmNoUGFyYW1zMk9iaihwYXJhbTogVVJMU2VhcmNoUGFyYW1zKSB7XG4gIGNvbnN0IG86IHsgW2s6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHBhcmFtLmVudHJpZXMoKSkge1xuICAgIG9ba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiBvO1xufVxuXG5mdW5jdGlvbiBta2V2dChwOiBzdHJpbmcpIHtcbiAgY29uc3QgdSA9IG5ldyBVUkwocCwgJ2h0dHA6Ly90ZXN0Jyk7XG4gIHJldHVybiB7XG4gICAgdmVyc2lvbjogJzIuMCcsXG4gICAgcm91dGVLZXk6ICdBTlkgL3twcm94eSt9JyxcbiAgICByYXdQYXRoOiB1LnBhdGhuYW1lLFxuICAgIHJhd1F1ZXJ5U3RyaW5nOiB1LnNlYXJjaC5zdWJzdHJpbmcoMSksXG4gICAgY29va2llczogW1xuICAgICAgJ3NfZmlkPSoqKioqKioqJyxcbiAgICBdLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgICdhY2NlcHQnOiAndGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45JyxcbiAgICAgICdhY2NlcHQtZW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZSwgYnInLFxuICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbix6aC1DTjtxPTAuOSx6aDtxPTAuOCcsXG4gICAgICAnY29udGVudC1sZW5ndGgnOiAnMCcsXG4gICAgICAnaG9zdCc6ICcqKioqKioqKi5leGVjdXRlLWFwaS51cy13ZXN0LTIuYW1hem9uYXdzLmNvbScsXG4gICAgICAnc2VjLWNoLXVhJzogJ1wiIE5vdCBBO0JyYW5kXCI7dj1cIjk5XCIsIFwiQ2hyb21pdW1cIjt2PVwiMTAwXCIsIFwiR29vZ2xlIENocm9tZVwiO3Y9XCIxMDBcIicsXG4gICAgICAnc2VjLWNoLXVhLW1vYmlsZSc6ICc/MCcsXG4gICAgICAnc2VjLWNoLXVhLXBsYXRmb3JtJzogJ1wibWFjT1NcIicsXG4gICAgICAnc2VjLWZldGNoLWRlc3QnOiAnZG9jdW1lbnQnLFxuICAgICAgJ3NlYy1mZXRjaC1tb2RlJzogJ25hdmlnYXRlJyxcbiAgICAgICdzZWMtZmV0Y2gtc2l0ZSc6ICdub25lJyxcbiAgICAgICdzZWMtZmV0Y2gtdXNlcic6ICc/MScsXG4gICAgICAndXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyc6ICcxJyxcbiAgICAgICd1c2VyLWFnZW50JzogJ01vemlsbGEvNS4wIChNYWNpbnRvc2g7IEludGVsIE1hYyBPUyBYIDEwXzE1XzcpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMDAuMC40ODk2Ljg4IFNhZmFyaS81MzcuMzYnLFxuICAgICAgJ3gtYW16bi10cmFjZS1pZCc6ICdSb290PTEtNjI1Yjk0OGYtNTE0MjQwYmU3NWQyYzUwOTI0ZGNhZjQyJyxcbiAgICAgICd4LWZvcndhcmRlZC1mb3InOiAnMTI3LjAuMC4xJyxcbiAgICAgICd4LWZvcndhcmRlZC1wb3J0JzogJzQ0MycsXG4gICAgICAneC1mb3J3YXJkZWQtcHJvdG8nOiAnaHR0cHMnLFxuICAgIH0sXG4gICAgcXVlcnlTdHJpbmdQYXJhbWV0ZXJzOiBVUkxTZWFyY2hQYXJhbXMyT2JqKHUuc2VhcmNoUGFyYW1zKSxcbiAgICByZXF1ZXN0Q29udGV4dDoge1xuICAgICAgYWNjb3VudElkOiAnKioqKioqKionLFxuICAgICAgYXBpSWQ6ICcqKioqKioqKicsXG4gICAgICBkb21haW5OYW1lOiAnKioqKioqKiouZXhlY3V0ZS1hcGkudXMtd2VzdC0yLmFtYXpvbmF3cy5jb20nLFxuICAgICAgZG9tYWluUHJlZml4OiAnKioqKioqKionLFxuICAgICAgaHR0cDoge1xuICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICBwYXRoOiB1LnBhdGhuYW1lLFxuICAgICAgICBwcm90b2NvbDogJ0hUVFAvMS4xJyxcbiAgICAgICAgc291cmNlSXA6ICcxMjcuMC4wLjEnLFxuICAgICAgICB1c2VyQWdlbnQ6ICdNb3ppbGxhLzUuMCAoTWFjaW50b3NoOyBJbnRlbCBNYWMgT1MgWCAxMF8xNV83KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTAwLjAuNDg5Ni44OCBTYWZhcmkvNTM3LjM2JyxcbiAgICAgIH0sXG4gICAgICByZXF1ZXN0SWQ6ICcqKioqKicsXG4gICAgICByb3V0ZUtleTogJ0FOWSAve3Byb3h5K30nLFxuICAgICAgc3RhZ2U6ICckZGVmYXVsdCcsXG4gICAgICB0aW1lOiAnMTcvQXByLzIwMjI6MDQ6MTY6MTUgKzAwMDAnLFxuICAgICAgdGltZUVwb2NoOiAxNjUwMTY4OTc1NjA2LFxuICAgIH0sXG4gICAgcGF0aFBhcmFtZXRlcnM6IHtcbiAgICAgIHByb3h5OiAnZXhhbXBsZS5qcGcnLFxuICAgIH0sXG4gICAgaXNCYXNlNjRFbmNvZGVkOiBmYWxzZSxcbiAgfTtcbn1cblxuXG50ZXN0KCdpbmRleC1sYW1iZGEudHMgZXhhbXBsZS5qcGc/eC1vc3MtcHJvY2Vzcz1pbWFnZS9yZXNpemUsd18xMDAvcXVhbGl0eSxxXzUwJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCByZXM6IGFueSA9IGF3YWl0IGhhbmRsZXIobWtldnQoJ2V4YW1wbGUuanBnP3gtb3NzLXByb2Nlc3M9aW1hZ2UvcmVzaXplLHdfMTAwL3F1YWxpdHkscV81MCcpKTtcblxuICBleHBlY3QocmVzLmlzQmFzZTY0RW5jb2RlZCkudG9CZVRydXRoeSgpO1xuICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoMjAwKTtcbiAgZXhwZWN0KHJlcy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSkudG9CZSgnaW1hZ2UvanBlZycpO1xuICBleHBlY3QocmVzLmhlYWRlcnNbJ0xhc3QtTW9kaWZpZWQnXSkudG9CZSgnV2VkLCAyMSBPY3QgMjAxNCAwNzoyODowMCBHTVQnKTtcbiAgZXhwZWN0KHJlcy5oZWFkZXJzWydDYWNoZS1Db250cm9sJ10pLnRvQmUoJ21heC1hZ2UnKTtcblxuICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IHNoYXJwKEJ1ZmZlci5mcm9tKHJlcy5ib2R5LCAnYmFzZTY0JykpLm1ldGFkYXRhKCk7XG5cbiAgZXhwZWN0KG1ldGFkYXRhLndpZHRoKS50b0JlKDEwMCk7XG4gIGV4cGVjdChtZXRhZGF0YS5oZWlnaHQpLnRvQmUoNjcpO1xuICBleHBlY3QobWV0YWRhdGEuc2l6ZSkudG9CZSgxMzUyKTtcbiAgZXhwZWN0KG1ldGFkYXRhLmZvcm1hdCkudG9CZSgnanBlZycpO1xufSk7XG5cbnRlc3QoJ2luZGV4LWxhbWJkYS50cyBleGFtcGxlLmdpZj94LW9zcy1wcm9jZXNzPWltYWdlL3Jlc2l6ZSx3XzEwMC9xdWFsaXR5LHFfNTAnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHJlczogYW55ID0gYXdhaXQgaGFuZGxlcihta2V2dCgnZXhhbXBsZS5naWY/eC1vc3MtcHJvY2Vzcz1pbWFnZS9yZXNpemUsd18xMDAvcXVhbGl0eSxxXzUwJykpO1xuXG4gIGV4cGVjdChyZXMuaXNCYXNlNjRFbmNvZGVkKS50b0JlVHJ1dGh5KCk7XG4gIGV4cGVjdChyZXMuc3RhdHVzQ29kZSkudG9CZSgyMDApO1xuICBleHBlY3QocmVzLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKS50b0JlKCdpbWFnZS9naWYnKTtcblxuICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IHNoYXJwKEJ1ZmZlci5mcm9tKHJlcy5ib2R5LCAnYmFzZTY0JykpLm1ldGFkYXRhKCk7XG5cbiAgZXhwZWN0KG1ldGFkYXRhLndpZHRoKS50b0JlKDEwMCk7XG4gIGV4cGVjdChtZXRhZGF0YS5oZWlnaHQpLnRvQmUoNjApO1xuICBleHBlY3QobWV0YWRhdGEuc2l6ZSkudG9CZSgzNTQ0KTtcbiAgZXhwZWN0KG1ldGFkYXRhLmZvcm1hdCkudG9CZSgnZ2lmJyk7XG4gIGV4cGVjdChtZXRhZGF0YS5wYWdlcykudG9CZSgzKTtcbn0pO1xuXG50ZXN0KCdpbmRleC1sYW1iZGEudHMgZXhhbXBsZS5naWY/eC1vc3MtcHJvY2Vzcz1pbWFnZS9mb3JtYXQscG5nJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCByZXM6IGFueSA9IGF3YWl0IGhhbmRsZXIobWtldnQoJ2V4YW1wbGUuZ2lmP3gtb3NzLXByb2Nlc3M9aW1hZ2UvZm9ybWF0LHBuZycpKTtcblxuICBleHBlY3QocmVzLmlzQmFzZTY0RW5jb2RlZCkudG9CZVRydXRoeSgpO1xuICBleHBlY3QocmVzLnN0YXR1c0NvZGUpLnRvQmUoMjAwKTtcbiAgZXhwZWN0KHJlcy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSkudG9CZSgnaW1hZ2UvcG5nJyk7XG5cbiAgY29uc3QgbWV0YWRhdGEgPSBhd2FpdCBzaGFycChCdWZmZXIuZnJvbShyZXMuYm9keSwgJ2Jhc2U2NCcpKS5tZXRhZGF0YSgpO1xuXG4gIGV4cGVjdChtZXRhZGF0YS53aWR0aCkudG9CZSg1MDApO1xuICBleHBlY3QobWV0YWRhdGEuaGVpZ2h0KS50b0JlKDMwMCk7XG4gIGV4cGVjdChtZXRhZGF0YS5mb3JtYXQpLnRvQmUoJ3BuZycpO1xufSk7XG5cbnRlc3QoJ2luZGV4LWxhbWJkYS50cyBleGFtcGxlLmdpZj94LW9zcy1wcm9jZXNzPWltYWdlL3Jlc2l6ZSx3XzEvaW5mbycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgcmVzOiBhbnkgPSBhd2FpdCBoYW5kbGVyKG1rZXZ0KCdleGFtcGxlLmdpZj94LW9zcy1wcm9jZXNzPWltYWdlL3Jlc2l6ZSx3XzEvaW5mbycpKTtcblxuICBleHBlY3QocmVzLmlzQmFzZTY0RW5jb2RlZCkudG9CZUZhbHN5KCk7XG4gIGV4cGVjdChyZXMuc3RhdHVzQ29kZSkudG9CZSgyMDApO1xuICBleHBlY3QocmVzLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKS50b0JlKCdhcHBsaWNhdGlvbi9qc29uJyk7XG4gIGV4cGVjdChyZXMuYm9keSkudG9CZShKU09OLnN0cmluZ2lmeSh7XG4gICAgRmlsZVNpemU6IHtcbiAgICAgIHZhbHVlOiAnMjE5NTcnLFxuICAgIH0sXG4gICAgRm9ybWF0OiB7XG4gICAgICB2YWx1ZTogJ2dpZicsXG4gICAgfSxcbiAgICBJbWFnZUhlaWdodDoge1xuICAgICAgdmFsdWU6ICczMDAnLFxuICAgIH0sXG4gICAgSW1hZ2VXaWR0aDoge1xuICAgICAgdmFsdWU6ICc1MDAnLFxuICAgIH0sXG4gIH0pKTtcbn0pOyJdfQ==